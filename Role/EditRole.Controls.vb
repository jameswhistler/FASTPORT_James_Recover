
' This file implements the TableControl, TableControlRow, and RecordControl classes for the 
' EditRole.aspx page.  The Row or RecordControl classes are the 
' ideal place to add code customizations. For example, you can override the LoadData, 
' CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.

#Region "Imports statements"

Option Strict On
Imports Microsoft.VisualBasic
Imports BaseClasses.Web.UI.WebControls
Imports System
Imports System.Collections
Imports System.Collections.Generic
        
Imports System.Web
Imports System.Web.UI
Imports System.Web.UI.WebControls
Imports BaseClasses
Imports BaseClasses.Data
Imports BaseClasses.Utils
Imports ReportTools.ReportCreator
Imports ReportTools.Shared

  
        
Imports FASTPORT.Business
Imports FASTPORT.Data
Imports FASTPORT.UI
        

#End Region

  
Namespace FASTPORT.UI.Controls.EditRole

#Region "Section 1: Place your customizations here."

    
Public Class AgreementTableControlRow
        Inherits BaseAgreementTableControlRow
        ' The BaseAgreementTableControlRow implements code for a ROW within the
        ' the AgreementTableControl table.  The BaseAgreementTableControlRow implements the DataBind and SaveData methods.
        ' The loading of data is actually performed by the LoadData method in the base class of AgreementTableControl.

        ' This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        ' SaveData, GetUIData, and Validate methods.
        

End Class

  

Public Class AgreementTableControl
        Inherits BaseAgreementTableControl

    ' The BaseAgreementTableControl class implements the LoadData, DataBind, CreateWhereClause
    ' and other methods to load and display the data in a table control.

    ' This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    ' The AgreementTableControlRow class offers another place where you can customize
    ' the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

End Class

  
Public Class CarrierAdContactsTableControlRow
        Inherits BaseCarrierAdContactsTableControlRow
        ' The BaseCarrierAdContactsTableControlRow implements code for a ROW within the
        ' the CarrierAdContactsTableControl table.  The BaseCarrierAdContactsTableControlRow implements the DataBind and SaveData methods.
        ' The loading of data is actually performed by the LoadData method in the base class of CarrierAdContactsTableControl.

        ' This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        ' SaveData, GetUIData, and Validate methods.
        

End Class

  

Public Class CarrierAdContactsTableControl
        Inherits BaseCarrierAdContactsTableControl

    ' The BaseCarrierAdContactsTableControl class implements the LoadData, DataBind, CreateWhereClause
    ' and other methods to load and display the data in a table control.

    ' This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    ' The CarrierAdContactsTableControlRow class offers another place where you can customize
    ' the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

End Class

  
Public Class DocTreeTableControlRow
        Inherits BaseDocTreeTableControlRow
        ' The BaseDocTreeTableControlRow implements code for a ROW within the
        ' the DocTreeTableControl table.  The BaseDocTreeTableControlRow implements the DataBind and SaveData methods.
        ' The loading of data is actually performed by the LoadData method in the base class of DocTreeTableControl.

        ' This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        ' SaveData, GetUIData, and Validate methods.
        

End Class

  

Public Class DocTreeTableControl
        Inherits BaseDocTreeTableControl

    ' The BaseDocTreeTableControl class implements the LoadData, DataBind, CreateWhereClause
    ' and other methods to load and display the data in a table control.

    ' This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    ' The DocTreeTableControlRow class offers another place where you can customize
    ' the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

End Class

  
Public Class RoleRecordControl
        Inherits BaseRoleRecordControl
        ' The BaseRoleRecordControl implements the LoadData, DataBind and other
        ' methods to load and display the data in a table control.

        ' This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        ' CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        

End Class

  

#End Region

  

#Region "Section 2: Do not modify this section."
    
    
' Base class for the AgreementTableControlRow control on the EditRole page.
' Do not modify this class. Instead override any method in AgreementTableControlRow.
Public Class BaseAgreementTableControlRow
        Inherits FASTPORT.UI.BaseApplicationRecordControl

        '  To customize, override this method in AgreementTableControlRow.
        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
          
            Me.ClearControlsFromSession()
        End Sub

        '  To customize, override this method in AgreementTableControlRow.
        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
            'Call LoadFocusScripts from repeater so that onfocus attribute could be added to elements
            Me.Page.LoadFocusScripts(Me)
        
              ' Show confirmation message on Click
              Me.AgreementRowDeleteButton.Attributes.Add("onClick", "return (confirm('" & (CType(Me.Page,BaseApplicationPage)).GetResourceValue("DeleteRecordConfirm", "FASTPORT") & "'));")
                  
        
              ' Register the event handlers.
          
              AddHandler Me.AgreementRowDeleteButton.Click, AddressOf AgreementRowDeleteButton_Click
              
              AddHandler Me.AgreementRowEditButton.Click, AddressOf AgreementRowEditButton_Click
              
              AddHandler Me.CustomID.SelectedIndexChanged, AddressOf CustomID_SelectedIndexChanged
            
              AddHandler Me.DocTreeParentID.SelectedIndexChanged, AddressOf DocTreeParentID_SelectedIndexChanged
            
              AddHandler Me.EighthTypeID.SelectedIndexChanged, AddressOf EighthTypeID_SelectedIndexChanged
            
              AddHandler Me.EleventhTypeID.SelectedIndexChanged, AddressOf EleventhTypeID_SelectedIndexChanged
            
              AddHandler Me.FifteenthTypeID.SelectedIndexChanged, AddressOf FifteenthTypeID_SelectedIndexChanged
            
              AddHandler Me.FifthTypeID.SelectedIndexChanged, AddressOf FifthTypeID_SelectedIndexChanged
            
              AddHandler Me.FirstTypeID.SelectedIndexChanged, AddressOf FirstTypeID_SelectedIndexChanged
            
              AddHandler Me.FlowCollectionID.SelectedIndexChanged, AddressOf FlowCollectionID_SelectedIndexChanged
            
              AddHandler Me.FourteenthTypeID.SelectedIndexChanged, AddressOf FourteenthTypeID_SelectedIndexChanged
            
              AddHandler Me.FourthTypeID.SelectedIndexChanged, AddressOf FourthTypeID_SelectedIndexChanged
            
              AddHandler Me.NinthTypeID.SelectedIndexChanged, AddressOf NinthTypeID_SelectedIndexChanged
            
              AddHandler Me.SecondTypeID.SelectedIndexChanged, AddressOf SecondTypeID_SelectedIndexChanged
            
              AddHandler Me.SeventhTypeID.SelectedIndexChanged, AddressOf SeventhTypeID_SelectedIndexChanged
            
              AddHandler Me.SixthTypeID.SelectedIndexChanged, AddressOf SixthTypeID_SelectedIndexChanged
            
              AddHandler Me.TenthTypeID.SelectedIndexChanged, AddressOf TenthTypeID_SelectedIndexChanged
            
              AddHandler Me.ThirdTypeID.SelectedIndexChanged, AddressOf ThirdTypeID_SelectedIndexChanged
            
              AddHandler Me.ThirteenthTypeID.SelectedIndexChanged, AddressOf ThirteenthTypeID_SelectedIndexChanged
            
              AddHandler Me.TwelfthTypeID.SelectedIndexChanged, AddressOf TwelfthTypeID_SelectedIndexChanged
            
              AddHandler Me.DocHasCustomFields.CheckedChanged, AddressOf DocHasCustomFields_CheckedChanged
            
              AddHandler Me.EighthByCIX.CheckedChanged, AddressOf EighthByCIX_CheckedChanged
            
              AddHandler Me.EighthByOIX.CheckedChanged, AddressOf EighthByOIX_CheckedChanged
            
              AddHandler Me.EleventhByCIX.CheckedChanged, AddressOf EleventhByCIX_CheckedChanged
            
              AddHandler Me.EleventhByOIX.CheckedChanged, AddressOf EleventhByOIX_CheckedChanged
            
              AddHandler Me.ExecuteFromBoard.CheckedChanged, AddressOf ExecuteFromBoard_CheckedChanged
            
              AddHandler Me.FifteenthByCIX.CheckedChanged, AddressOf FifteenthByCIX_CheckedChanged
            
              AddHandler Me.FifteenthByOIX.CheckedChanged, AddressOf FifteenthByOIX_CheckedChanged
            
              AddHandler Me.FifthByCIX.CheckedChanged, AddressOf FifthByCIX_CheckedChanged
            
              AddHandler Me.FifthByOIX.CheckedChanged, AddressOf FifthByOIX_CheckedChanged
            
              AddHandler Me.FirstByCIX.CheckedChanged, AddressOf FirstByCIX_CheckedChanged
            
              AddHandler Me.FirstByOIX.CheckedChanged, AddressOf FirstByOIX_CheckedChanged
            
              AddHandler Me.FourteenthByCIX.CheckedChanged, AddressOf FourteenthByCIX_CheckedChanged
            
              AddHandler Me.FourteenthByOIX.CheckedChanged, AddressOf FourteenthByOIX_CheckedChanged
            
              AddHandler Me.FourthByCIX.CheckedChanged, AddressOf FourthByCIX_CheckedChanged
            
              AddHandler Me.FourthByOIX.CheckedChanged, AddressOf FourthByOIX_CheckedChanged
            
              AddHandler Me.Hide.CheckedChanged, AddressOf Hide_CheckedChanged
            
              AddHandler Me.InitialsInDocument.CheckedChanged, AddressOf InitialsInDocument_CheckedChanged
            
              AddHandler Me.NinthByCIX.CheckedChanged, AddressOf NinthByCIX_CheckedChanged
            
              AddHandler Me.NinthByOIX.CheckedChanged, AddressOf NinthByOIX_CheckedChanged
            
              AddHandler Me.RequiredDoc.CheckedChanged, AddressOf RequiredDoc_CheckedChanged
            
              AddHandler Me.SecondByCIX.CheckedChanged, AddressOf SecondByCIX_CheckedChanged
            
              AddHandler Me.SecondByOIX.CheckedChanged, AddressOf SecondByOIX_CheckedChanged
            
              AddHandler Me.SeventhByCIX.CheckedChanged, AddressOf SeventhByCIX_CheckedChanged
            
              AddHandler Me.SeventhByOIX.CheckedChanged, AddressOf SeventhByOIX_CheckedChanged
            
              AddHandler Me.ShowExpirationDate.CheckedChanged, AddressOf ShowExpirationDate_CheckedChanged
            
              AddHandler Me.ShowSignatureDate.CheckedChanged, AddressOf ShowSignatureDate_CheckedChanged
            
              AddHandler Me.SixthByCIX.CheckedChanged, AddressOf SixthByCIX_CheckedChanged
            
              AddHandler Me.SixthByOIX.CheckedChanged, AddressOf SixthByOIX_CheckedChanged
            
              AddHandler Me.TenthByCIX.CheckedChanged, AddressOf TenthByCIX_CheckedChanged
            
              AddHandler Me.TenthByOIX.CheckedChanged, AddressOf TenthByOIX_CheckedChanged
            
              AddHandler Me.ThirdByCIX.CheckedChanged, AddressOf ThirdByCIX_CheckedChanged
            
              AddHandler Me.ThirdByOIX.CheckedChanged, AddressOf ThirdByOIX_CheckedChanged
            
              AddHandler Me.ThirteenthByCIX.CheckedChanged, AddressOf ThirteenthByCIX_CheckedChanged
            
              AddHandler Me.ThirteenthByOIX.CheckedChanged, AddressOf ThirteenthByOIX_CheckedChanged
            
              AddHandler Me.TwelfthByCIX.CheckedChanged, AddressOf TwelfthByCIX_CheckedChanged
            
              AddHandler Me.TwelfthByOIX.CheckedChanged, AddressOf TwelfthByOIX_CheckedChanged
            
              AddHandler Me.UseStoredSignature.CheckedChanged, AddressOf UseStoredSignature_CheckedChanged
            
              AddHandler Me.Agreement.TextChanged, AddressOf Agreement_TextChanged
            
              AddHandler Me.AgreementFileName.TextChanged, AddressOf AgreementFileName_TextChanged
            
              AddHandler Me.CIX.TextChanged, AddressOf CIX_TextChanged
            
              AddHandler Me.CreatedAt.TextChanged, AddressOf CreatedAt_TextChanged
            
              AddHandler Me.CreatedByID.TextChanged, AddressOf CreatedByID_TextChanged
            
              AddHandler Me.Description.TextChanged, AddressOf Description_TextChanged
            
              AddHandler Me.DocIndex.TextChanged, AddressOf DocIndex_TextChanged
            
              AddHandler Me.DocRank.TextChanged, AddressOf DocRank_TextChanged
            
              AddHandler Me.DocSort.TextChanged, AddressOf DocSort_TextChanged
            
              AddHandler Me.EighthDefault.TextChanged, AddressOf EighthDefault_TextChanged
            
              AddHandler Me.EighthItem.TextChanged, AddressOf EighthItem_TextChanged
            
              AddHandler Me.EleventhDefault.TextChanged, AddressOf EleventhDefault_TextChanged
            
              AddHandler Me.EleventhItem.TextChanged, AddressOf EleventhItem_TextChanged
            
              AddHandler Me.FifteenthDefault.TextChanged, AddressOf FifteenthDefault_TextChanged
            
              AddHandler Me.FifteenthItem.TextChanged, AddressOf FifteenthItem_TextChanged
            
              AddHandler Me.FifthDefault.TextChanged, AddressOf FifthDefault_TextChanged
            
              AddHandler Me.FifthItem.TextChanged, AddressOf FifthItem_TextChanged
            
              AddHandler Me.FirstDefault.TextChanged, AddressOf FirstDefault_TextChanged
            
              AddHandler Me.FirstItem.TextChanged, AddressOf FirstItem_TextChanged
            
              AddHandler Me.FourteenthDefault.TextChanged, AddressOf FourteenthDefault_TextChanged
            
              AddHandler Me.FourteenthItem.TextChanged, AddressOf FourteenthItem_TextChanged
            
              AddHandler Me.FourthDefault.TextChanged, AddressOf FourthDefault_TextChanged
            
              AddHandler Me.FourthItem.TextChanged, AddressOf FourthItem_TextChanged
            
              AddHandler Me.NinthDefault.TextChanged, AddressOf NinthDefault_TextChanged
            
              AddHandler Me.NinthItem.TextChanged, AddressOf NinthItem_TextChanged
            
              AddHandler Me.OtherInstructions.TextChanged, AddressOf OtherInstructions_TextChanged
            
              AddHandler Me.RecipientInstructions.TextChanged, AddressOf RecipientInstructions_TextChanged
            
              AddHandler Me.SecondDefault.TextChanged, AddressOf SecondDefault_TextChanged
            
              AddHandler Me.SecondItem.TextChanged, AddressOf SecondItem_TextChanged
            
              AddHandler Me.SenderInstructions.TextChanged, AddressOf SenderInstructions_TextChanged
            
              AddHandler Me.SeventhDefault.TextChanged, AddressOf SeventhDefault_TextChanged
            
              AddHandler Me.SeventhItem.TextChanged, AddressOf SeventhItem_TextChanged
            
              AddHandler Me.SixthDefault.TextChanged, AddressOf SixthDefault_TextChanged
            
              AddHandler Me.SixthItem.TextChanged, AddressOf SixthItem_TextChanged
            
              AddHandler Me.TenthDefault.TextChanged, AddressOf TenthDefault_TextChanged
            
              AddHandler Me.TenthItem.TextChanged, AddressOf TenthItem_TextChanged
            
              AddHandler Me.ThirdDefault.TextChanged, AddressOf ThirdDefault_TextChanged
            
              AddHandler Me.ThirdItem.TextChanged, AddressOf ThirdItem_TextChanged
            
              AddHandler Me.ThirteenthDefault.TextChanged, AddressOf ThirteenthDefault_TextChanged
            
              AddHandler Me.ThirteenthItem.TextChanged, AddressOf ThirteenthItem_TextChanged
            
              AddHandler Me.TwelfthDefault.TextChanged, AddressOf TwelfthDefault_TextChanged
            
              AddHandler Me.TwelfthItem.TextChanged, AddressOf TwelfthItem_TextChanged
            
              AddHandler Me.UpdatedAt.TextChanged, AddressOf UpdatedAt_TextChanged
            
              AddHandler Me.UpdatedByID.TextChanged, AddressOf UpdatedByID_TextChanged
            
    
        End Sub

        
        Public Overridable Sub LoadData()        
                
            ' Load the data from the database into the DataSource Agreement record.
            ' It is better to make changes to functions called by LoadData such as
            ' CreateWhereClause, rather than making changes here.
    
            ' The RecordUniqueId is set the first time a record is loaded, and is
            ' used during a PostBack to load the record.
          
            If Me.RecordUniqueId IsNot Nothing AndAlso Me.RecordUniqueId.Trim <> "" Then
                Me.DataSource = AgreementTable.GetRecord(Me.RecordUniqueId, True)
          
                Return
            End If
        
            ' Since this is a row in the table, the data for this row is loaded by the 
            ' LoadData method of the BaseAgreementTableControl when the data for the entire
            ' table is loaded.
            
            Me.DataSource = New AgreementRecord()
          
    
    
        End Sub

        ' Populate the UI controls using the DataSource.  To customize, override this method in AgreementTableControlRow.
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record.  To do this, it calls the Set methods for 
            ' each of the field displayed on the webpage.  It is better to make 
            ' changes in the Set methods, rather than making changes here.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
    
                Return
            End If
            
    
            'LoadData for DataSource for chart and report if they exist
          
            ' Store the checksum. The checksum is used to
            ' ensure the record was not changed by another user.
            If Not Me.DataSource.GetCheckSumValue() Is Nothing
                Me.CheckSum = Me.DataSource.GetCheckSumValue().Value
            End If
            
      
      
            ' Call the Set methods for each controls on the panel
        
                SetAgreement()
                
                SetAgreementFileLabel()
                SetAgreementFileName()
                SetAgreementFileNameLabel()
                SetAgreementLabel()
                
                
                
                SetCIX()
                SetCIXLabel()
                SetCreatedAt()
                SetCreatedAtLabel()
                SetCreatedByID()
                SetCreatedByIDLabel()
                SetCustomID()
                SetCustomIDLabel()
                SetDescription()
                SetDescriptionLabel()
                SetDocHasCustomFields()
                SetDocHasCustomFieldsLabel()
                SetDocIndex()
                SetDocIndexLabel()
                SetDocRank()
                SetDocRankLabel()
                SetDocSort()
                SetDocSortLabel()
                SetDocTreeParentID()
                SetDocTreeParentIDLabel()
                SetEighthByCIX()
                SetEighthByCIXLabel()
                SetEighthByOIX()
                SetEighthByOIXLabel()
                SetEighthDefault()
                SetEighthDefaultLabel()
                SetEighthItem()
                SetEighthItemLabel()
                SetEighthTypeID()
                SetEighthTypeIDLabel()
                SetEleventhByCIX()
                SetEleventhByCIXLabel()
                SetEleventhByOIX()
                SetEleventhByOIXLabel()
                SetEleventhDefault()
                SetEleventhDefaultLabel()
                SetEleventhItem()
                SetEleventhItemLabel()
                SetEleventhTypeID()
                SetEleventhTypeIDLabel()
                SetExecuteFromBoard()
                SetExecuteFromBoardLabel()
                SetFifteenthByCIX()
                SetFifteenthByCIXLabel()
                SetFifteenthByOIX()
                SetFifteenthByOIXLabel()
                SetFifteenthDefault()
                SetFifteenthDefaultLabel()
                SetFifteenthItem()
                SetFifteenthItemLabel()
                SetFifteenthTypeID()
                SetFifteenthTypeIDLabel()
                SetFifthByCIX()
                SetFifthByCIXLabel()
                SetFifthByOIX()
                SetFifthByOIXLabel()
                SetFifthDefault()
                SetFifthDefaultLabel()
                SetFifthItem()
                SetFifthItemLabel()
                SetFifthTypeID()
                SetFifthTypeIDLabel()
                SetFirstByCIX()
                SetFirstByCIXLabel()
                SetFirstByOIX()
                SetFirstByOIXLabel()
                SetFirstDefault()
                SetFirstDefaultLabel()
                SetFirstItem()
                SetFirstItemLabel()
                SetFirstTypeID()
                SetFirstTypeIDLabel()
                SetFlowCollectionID()
                SetFlowCollectionIDLabel()
                SetFourteenthByCIX()
                SetFourteenthByCIXLabel()
                SetFourteenthByOIX()
                SetFourteenthByOIXLabel()
                SetFourteenthDefault()
                SetFourteenthDefaultLabel()
                SetFourteenthItem()
                SetFourteenthItemLabel()
                SetFourteenthTypeID()
                SetFourteenthTypeIDLabel()
                SetFourthByCIX()
                SetFourthByCIXLabel()
                SetFourthByOIX()
                SetFourthByOIXLabel()
                SetFourthDefault()
                SetFourthDefaultLabel()
                SetFourthItem()
                SetFourthItemLabel()
                SetFourthTypeID()
                SetFourthTypeIDLabel()
                SetHide()
                SetHideLabel()
                SetInitialsInDocument()
                SetInitialsInDocumentLabel()
                SetNinthByCIX()
                SetNinthByCIXLabel()
                SetNinthByOIX()
                SetNinthByOIXLabel()
                SetNinthDefault()
                SetNinthDefaultLabel()
                SetNinthItem()
                SetNinthItemLabel()
                SetNinthTypeID()
                SetNinthTypeIDLabel()
                SetOtherInstructions()
                SetOtherInstructionsLabel()
                SetRecipientInstructions()
                SetRecipientInstructionsLabel()
                SetRequiredDoc()
                SetRequiredDocLabel()
                SetSecondByCIX()
                SetSecondByCIXLabel()
                SetSecondByOIX()
                SetSecondByOIXLabel()
                SetSecondDefault()
                SetSecondDefaultLabel()
                SetSecondItem()
                SetSecondItemLabel()
                SetSecondTypeID()
                SetSecondTypeIDLabel()
                SetSenderInstructions()
                SetSenderInstructionsLabel()
                SetSeventhByCIX()
                SetSeventhByCIXLabel()
                SetSeventhByOIX()
                SetSeventhByOIXLabel()
                SetSeventhDefault()
                SetSeventhDefaultLabel()
                SetSeventhItem()
                SetSeventhItemLabel()
                SetSeventhTypeID()
                SetSeventhTypeIDLabel()
                SetShowExpirationDate()
                SetShowExpirationDateLabel()
                SetShowSignatureDate()
                SetShowSignatureDateLabel()
                SetSixthByCIX()
                SetSixthByCIXLabel()
                SetSixthByOIX()
                SetSixthByOIXLabel()
                SetSixthDefault()
                SetSixthDefaultLabel()
                SetSixthItem()
                SetSixthItemLabel()
                SetSixthTypeID()
                SetSixthTypeIDLabel()
                SetTenthByCIX()
                SetTenthByCIXLabel()
                SetTenthByOIX()
                SetTenthByOIXLabel()
                SetTenthDefault()
                SetTenthDefaultLabel()
                SetTenthItem()
                SetTenthItemLabel()
                SetTenthTypeID()
                SetTenthTypeIDLabel()
                SetThirdByCIX()
                SetThirdByCIXLabel()
                SetThirdByOIX()
                SetThirdByOIXLabel()
                SetThirdDefault()
                SetThirdDefaultLabel()
                SetThirdItem()
                SetThirdItemLabel()
                SetThirdTypeID()
                SetThirdTypeIDLabel()
                SetThirteenthByCIX()
                SetThirteenthByCIXLabel()
                SetThirteenthByOIX()
                SetThirteenthByOIXLabel()
                SetThirteenthDefault()
                SetThirteenthDefaultLabel()
                SetThirteenthItem()
                SetThirteenthItemLabel()
                SetThirteenthTypeID()
                SetThirteenthTypeIDLabel()
                SetTwelfthByCIX()
                SetTwelfthByCIXLabel()
                SetTwelfthByOIX()
                SetTwelfthByOIXLabel()
                SetTwelfthDefault()
                SetTwelfthDefaultLabel()
                SetTwelfthItem()
                SetTwelfthItemLabel()
                SetTwelfthTypeID()
                SetTwelfthTypeIDLabel()
                SetUpdatedAt()
                SetUpdatedAtLabel()
                SetUpdatedByID()
                SetUpdatedByIDLabel()
                SetUseStoredSignature()
                SetUseStoredSignatureLabel()
      
      
            Me.IsNewRecord = True
            
            If Me.DataSource.IsCreated Then
                Me.IsNewRecord = False
                
                Me.RecordUniqueId = Me.DataSource.GetID.ToXmlString()
            End If
          
            ' Now load data for each record and table child UI controls.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
            Dim shouldResetControl As Boolean = False
                  
        End Sub
        
        
        Public Overridable Sub SetAgreement()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.Agreement.ID) Then
            
                Me.Agreement.Text = Me.PreviousUIData(Me.Agreement.ID).ToString()
              
                Return
            End If
            
        
            ' Set the Agreement TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.Agreement is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetAgreement()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.AgreementSpecified Then
                				
                ' If the Agreement is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.Agreement)
                              
                Me.Agreement.Text = formattedValue
                
            Else 
            
                ' Agreement is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.Agreement.Text = AgreementTable.Agreement.Format(AgreementTable.Agreement.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetAgreementFileName()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.AgreementFileName.ID) Then
            
                Me.AgreementFileName.Text = Me.PreviousUIData(Me.AgreementFileName.ID).ToString()
              
                Return
            End If
            
        
            ' Set the AgreementFileName TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.AgreementFileName is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetAgreementFileName()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.AgreementFileNameSpecified Then
                				
                ' If the AgreementFileName is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.AgreementFileName)
                              
                Me.AgreementFileName.Text = formattedValue
                
            Else 
            
                ' AgreementFileName is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.AgreementFileName.Text = AgreementTable.AgreementFileName.Format(AgreementTable.AgreementFileName.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetCIX()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CIX.ID) Then
            
                Me.CIX.Text = Me.PreviousUIData(Me.CIX.ID).ToString()
              
                Return
            End If
            
        
            ' Set the CIX TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.CIX is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCIX()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CIXSpecified Then
                				
                ' If the CIX is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.CIX)
                              
                Me.CIX.Text = formattedValue
                
            Else 
            
                ' CIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.CIX.Text = AgreementTable.CIX.Format(AgreementTable.CIX.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetCreatedAt()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CreatedAt.ID) Then
            
                Me.CreatedAt.Text = Me.PreviousUIData(Me.CreatedAt.ID).ToString()
              
                Return
            End If
            
        
            ' Set the CreatedAt TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.CreatedAt is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCreatedAt()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CreatedAtSpecified Then
                				
                ' If the CreatedAt is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.CreatedAt, "g")
                              
                Me.CreatedAt.Text = formattedValue
                
            Else 
            
                ' CreatedAt is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.CreatedAt.Text = AgreementTable.CreatedAt.Format(AgreementTable.CreatedAt.DefaultValue, "g")
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetCreatedByID()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CreatedByID.ID) Then
            
                Me.CreatedByID.Text = Me.PreviousUIData(Me.CreatedByID.ID).ToString()
              
                Return
            End If
            
        
            ' Set the CreatedByID TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.CreatedByID is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCreatedByID()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CreatedByIDSpecified Then
                				
                ' If the CreatedByID is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.CreatedByID)
                              
                Me.CreatedByID.Text = formattedValue
                
            Else 
            
                ' CreatedByID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.CreatedByID.Text = AgreementTable.CreatedByID.Format(AgreementTable.CreatedByID.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetCustomID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CustomID.ID) Then
                If Me.PreviousUIData(Me.CustomID.ID) Is Nothing
                    Me.PopulateCustomIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateCustomIDDropDownList(Me.PreviousUIData(Me.CustomID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the CustomID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.CustomID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCustomID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CustomIDSpecified Then
                            
                ' If the CustomID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateCustomIDDropDownList(Me.DataSource.CustomID.ToString(), 100)
                
            Else
                
                ' CustomID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateCustomIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateCustomIDDropDownList(AgreementTable.CustomID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetDescription()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.Description.ID) Then
            
                Me.Description.Text = Me.PreviousUIData(Me.Description.ID).ToString()
              
                Return
            End If
            
        
            ' Set the Description TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.Description is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDescription()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DescriptionSpecified Then
                				
                ' If the Description is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.Description)
                              
                Me.Description.Text = formattedValue
                
            Else 
            
                ' Description is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.Description.Text = AgreementTable.Description.Format(AgreementTable.Description.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocHasCustomFields()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocHasCustomFields.ID) Then
                Me.DocHasCustomFields.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.DocHasCustomFields.ID))
                Return
            End If		
            
        
            ' Set the DocHasCustomFields CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.DocHasCustomFields is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetDocHasCustomFields()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocHasCustomFieldsSpecified Then
                									
                ' If the DocHasCustomFields is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.DocHasCustomFields.Checked = Me.DataSource.DocHasCustomFields
            Else
            
                ' DocHasCustomFields is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.DocHasCustomFields.Checked = AgreementTable.DocHasCustomFields.ParseValue(AgreementTable.DocHasCustomFields.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetDocIndex()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocIndex.ID) Then
            
                Me.DocIndex.Text = Me.PreviousUIData(Me.DocIndex.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocIndex TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.DocIndex is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocIndex()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocIndexSpecified Then
                				
                ' If the DocIndex is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.DocIndex)
                              
                Me.DocIndex.Text = formattedValue
                
            Else 
            
                ' DocIndex is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocIndex.Text = AgreementTable.DocIndex.Format(AgreementTable.DocIndex.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocRank()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocRank.ID) Then
            
                Me.DocRank.Text = Me.PreviousUIData(Me.DocRank.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocRank TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.DocRank is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocRank()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocRankSpecified Then
                				
                ' If the DocRank is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.DocRank)
                              
                Me.DocRank.Text = formattedValue
                
            Else 
            
                ' DocRank is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocRank.Text = AgreementTable.DocRank.Format(AgreementTable.DocRank.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocSort()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocSort.ID) Then
            
                Me.DocSort.Text = Me.PreviousUIData(Me.DocSort.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocSort TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.DocSort is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocSort()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocSortSpecified Then
                				
                ' If the DocSort is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.DocSort)
                              
                Me.DocSort.Text = formattedValue
                
            Else 
            
                ' DocSort is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocSort.Text = AgreementTable.DocSort.Format(AgreementTable.DocSort.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocTreeParentID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocTreeParentID.ID) Then
                If Me.PreviousUIData(Me.DocTreeParentID.ID) Is Nothing
                    Me.PopulateDocTreeParentIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateDocTreeParentIDDropDownList(Me.PreviousUIData(Me.DocTreeParentID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the DocTreeParentID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.DocTreeParentID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocTreeParentID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocTreeParentIDSpecified Then
                            
                ' If the DocTreeParentID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateDocTreeParentIDDropDownList(Me.DataSource.DocTreeParentID.ToString(), 100)
                
            Else
                
                ' DocTreeParentID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateDocTreeParentIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateDocTreeParentIDDropDownList(AgreementTable.DocTreeParentID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetEighthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EighthByCIX.ID) Then
                Me.EighthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.EighthByCIX.ID))
                Return
            End If		
            
        
            ' Set the EighthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EighthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetEighthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EighthByCIXSpecified Then
                									
                ' If the EighthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.EighthByCIX.Checked = Me.DataSource.EighthByCIX
            Else
            
                ' EighthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.EighthByCIX.Checked = AgreementTable.EighthByCIX.ParseValue(AgreementTable.EighthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetEighthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EighthByOIX.ID) Then
                Me.EighthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.EighthByOIX.ID))
                Return
            End If		
            
        
            ' Set the EighthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EighthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetEighthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EighthByOIXSpecified Then
                									
                ' If the EighthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.EighthByOIX.Checked = Me.DataSource.EighthByOIX
            Else
            
                ' EighthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.EighthByOIX.Checked = AgreementTable.EighthByOIX.ParseValue(AgreementTable.EighthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetEighthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EighthDefault.ID) Then
            
                Me.EighthDefault.Text = Me.PreviousUIData(Me.EighthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the EighthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EighthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetEighthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EighthDefaultSpecified Then
                				
                ' If the EighthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.EighthDefault)
                              
                Me.EighthDefault.Text = formattedValue
                
            Else 
            
                ' EighthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.EighthDefault.Text = AgreementTable.EighthDefault.Format(AgreementTable.EighthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetEighthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EighthItem.ID) Then
            
                Me.EighthItem.Text = Me.PreviousUIData(Me.EighthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the EighthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EighthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetEighthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EighthItemSpecified Then
                				
                ' If the EighthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.EighthItem)
                              
                Me.EighthItem.Text = formattedValue
                
            Else 
            
                ' EighthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.EighthItem.Text = AgreementTable.EighthItem.Format(AgreementTable.EighthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetEighthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EighthTypeID.ID) Then
                If Me.PreviousUIData(Me.EighthTypeID.ID) Is Nothing
                    Me.PopulateEighthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateEighthTypeIDDropDownList(Me.PreviousUIData(Me.EighthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the EighthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EighthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetEighthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EighthTypeIDSpecified Then
                            
                ' If the EighthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateEighthTypeIDDropDownList(Me.DataSource.EighthTypeID.ToString(), 100)
                
            Else
                
                ' EighthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateEighthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateEighthTypeIDDropDownList(AgreementTable.EighthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetEleventhByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EleventhByCIX.ID) Then
                Me.EleventhByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.EleventhByCIX.ID))
                Return
            End If		
            
        
            ' Set the EleventhByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EleventhByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetEleventhByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EleventhByCIXSpecified Then
                									
                ' If the EleventhByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.EleventhByCIX.Checked = Me.DataSource.EleventhByCIX
            Else
            
                ' EleventhByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.EleventhByCIX.Checked = AgreementTable.EleventhByCIX.ParseValue(AgreementTable.EleventhByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetEleventhByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EleventhByOIX.ID) Then
                Me.EleventhByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.EleventhByOIX.ID))
                Return
            End If		
            
        
            ' Set the EleventhByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EleventhByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetEleventhByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EleventhByOIXSpecified Then
                									
                ' If the EleventhByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.EleventhByOIX.Checked = Me.DataSource.EleventhByOIX
            Else
            
                ' EleventhByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.EleventhByOIX.Checked = AgreementTable.EleventhByOIX.ParseValue(AgreementTable.EleventhByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetEleventhDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EleventhDefault.ID) Then
            
                Me.EleventhDefault.Text = Me.PreviousUIData(Me.EleventhDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the EleventhDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EleventhDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetEleventhDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EleventhDefaultSpecified Then
                				
                ' If the EleventhDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.EleventhDefault)
                              
                Me.EleventhDefault.Text = formattedValue
                
            Else 
            
                ' EleventhDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.EleventhDefault.Text = AgreementTable.EleventhDefault.Format(AgreementTable.EleventhDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetEleventhItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EleventhItem.ID) Then
            
                Me.EleventhItem.Text = Me.PreviousUIData(Me.EleventhItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the EleventhItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EleventhItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetEleventhItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EleventhItemSpecified Then
                				
                ' If the EleventhItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.EleventhItem)
                              
                Me.EleventhItem.Text = formattedValue
                
            Else 
            
                ' EleventhItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.EleventhItem.Text = AgreementTable.EleventhItem.Format(AgreementTable.EleventhItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetEleventhTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.EleventhTypeID.ID) Then
                If Me.PreviousUIData(Me.EleventhTypeID.ID) Is Nothing
                    Me.PopulateEleventhTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateEleventhTypeIDDropDownList(Me.PreviousUIData(Me.EleventhTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the EleventhTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.EleventhTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetEleventhTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.EleventhTypeIDSpecified Then
                            
                ' If the EleventhTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateEleventhTypeIDDropDownList(Me.DataSource.EleventhTypeID.ToString(), 100)
                
            Else
                
                ' EleventhTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateEleventhTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateEleventhTypeIDDropDownList(AgreementTable.EleventhTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetExecuteFromBoard()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ExecuteFromBoard.ID) Then
                Me.ExecuteFromBoard.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ExecuteFromBoard.ID))
                Return
            End If		
            
        
            ' Set the ExecuteFromBoard CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ExecuteFromBoard is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetExecuteFromBoard()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ExecuteFromBoardSpecified Then
                									
                ' If the ExecuteFromBoard is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ExecuteFromBoard.Checked = Me.DataSource.ExecuteFromBoard
            Else
            
                ' ExecuteFromBoard is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ExecuteFromBoard.Checked = AgreementTable.ExecuteFromBoard.ParseValue(AgreementTable.ExecuteFromBoard.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFifteenthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifteenthByCIX.ID) Then
                Me.FifteenthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FifteenthByCIX.ID))
                Return
            End If		
            
        
            ' Set the FifteenthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifteenthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFifteenthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifteenthByCIXSpecified Then
                									
                ' If the FifteenthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FifteenthByCIX.Checked = Me.DataSource.FifteenthByCIX
            Else
            
                ' FifteenthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FifteenthByCIX.Checked = AgreementTable.FifteenthByCIX.ParseValue(AgreementTable.FifteenthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFifteenthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifteenthByOIX.ID) Then
                Me.FifteenthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FifteenthByOIX.ID))
                Return
            End If		
            
        
            ' Set the FifteenthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifteenthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFifteenthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifteenthByOIXSpecified Then
                									
                ' If the FifteenthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FifteenthByOIX.Checked = Me.DataSource.FifteenthByOIX
            Else
            
                ' FifteenthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FifteenthByOIX.Checked = AgreementTable.FifteenthByOIX.ParseValue(AgreementTable.FifteenthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFifteenthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifteenthDefault.ID) Then
            
                Me.FifteenthDefault.Text = Me.PreviousUIData(Me.FifteenthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FifteenthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifteenthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFifteenthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifteenthDefaultSpecified Then
                				
                ' If the FifteenthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FifteenthDefault)
                              
                Me.FifteenthDefault.Text = formattedValue
                
            Else 
            
                ' FifteenthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FifteenthDefault.Text = AgreementTable.FifteenthDefault.Format(AgreementTable.FifteenthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFifteenthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifteenthItem.ID) Then
            
                Me.FifteenthItem.Text = Me.PreviousUIData(Me.FifteenthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FifteenthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifteenthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFifteenthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifteenthItemSpecified Then
                				
                ' If the FifteenthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FifteenthItem)
                              
                Me.FifteenthItem.Text = formattedValue
                
            Else 
            
                ' FifteenthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FifteenthItem.Text = AgreementTable.FifteenthItem.Format(AgreementTable.FifteenthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFifteenthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifteenthTypeID.ID) Then
                If Me.PreviousUIData(Me.FifteenthTypeID.ID) Is Nothing
                    Me.PopulateFifteenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFifteenthTypeIDDropDownList(Me.PreviousUIData(Me.FifteenthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the FifteenthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifteenthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFifteenthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifteenthTypeIDSpecified Then
                            
                ' If the FifteenthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateFifteenthTypeIDDropDownList(Me.DataSource.FifteenthTypeID.ToString(), 100)
                
            Else
                
                ' FifteenthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateFifteenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFifteenthTypeIDDropDownList(AgreementTable.FifteenthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetFifthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifthByCIX.ID) Then
                Me.FifthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FifthByCIX.ID))
                Return
            End If		
            
        
            ' Set the FifthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFifthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifthByCIXSpecified Then
                									
                ' If the FifthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FifthByCIX.Checked = Me.DataSource.FifthByCIX
            Else
            
                ' FifthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FifthByCIX.Checked = AgreementTable.FifthByCIX.ParseValue(AgreementTable.FifthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFifthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifthByOIX.ID) Then
                Me.FifthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FifthByOIX.ID))
                Return
            End If		
            
        
            ' Set the FifthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFifthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifthByOIXSpecified Then
                									
                ' If the FifthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FifthByOIX.Checked = Me.DataSource.FifthByOIX
            Else
            
                ' FifthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FifthByOIX.Checked = AgreementTable.FifthByOIX.ParseValue(AgreementTable.FifthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFifthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifthDefault.ID) Then
            
                Me.FifthDefault.Text = Me.PreviousUIData(Me.FifthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FifthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFifthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifthDefaultSpecified Then
                				
                ' If the FifthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FifthDefault)
                              
                Me.FifthDefault.Text = formattedValue
                
            Else 
            
                ' FifthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FifthDefault.Text = AgreementTable.FifthDefault.Format(AgreementTable.FifthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFifthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifthItem.ID) Then
            
                Me.FifthItem.Text = Me.PreviousUIData(Me.FifthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FifthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFifthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifthItemSpecified Then
                				
                ' If the FifthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FifthItem)
                              
                Me.FifthItem.Text = formattedValue
                
            Else 
            
                ' FifthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FifthItem.Text = AgreementTable.FifthItem.Format(AgreementTable.FifthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFifthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FifthTypeID.ID) Then
                If Me.PreviousUIData(Me.FifthTypeID.ID) Is Nothing
                    Me.PopulateFifthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFifthTypeIDDropDownList(Me.PreviousUIData(Me.FifthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the FifthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FifthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFifthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FifthTypeIDSpecified Then
                            
                ' If the FifthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateFifthTypeIDDropDownList(Me.DataSource.FifthTypeID.ToString(), 100)
                
            Else
                
                ' FifthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateFifthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFifthTypeIDDropDownList(AgreementTable.FifthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetFirstByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FirstByCIX.ID) Then
                Me.FirstByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FirstByCIX.ID))
                Return
            End If		
            
        
            ' Set the FirstByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FirstByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFirstByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FirstByCIXSpecified Then
                									
                ' If the FirstByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FirstByCIX.Checked = Me.DataSource.FirstByCIX
            Else
            
                ' FirstByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FirstByCIX.Checked = AgreementTable.FirstByCIX.ParseValue(AgreementTable.FirstByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFirstByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FirstByOIX.ID) Then
                Me.FirstByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FirstByOIX.ID))
                Return
            End If		
            
        
            ' Set the FirstByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FirstByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFirstByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FirstByOIXSpecified Then
                									
                ' If the FirstByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FirstByOIX.Checked = Me.DataSource.FirstByOIX
            Else
            
                ' FirstByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FirstByOIX.Checked = AgreementTable.FirstByOIX.ParseValue(AgreementTable.FirstByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFirstDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FirstDefault.ID) Then
            
                Me.FirstDefault.Text = Me.PreviousUIData(Me.FirstDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FirstDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FirstDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFirstDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FirstDefaultSpecified Then
                				
                ' If the FirstDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FirstDefault)
                              
                Me.FirstDefault.Text = formattedValue
                
            Else 
            
                ' FirstDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FirstDefault.Text = AgreementTable.FirstDefault.Format(AgreementTable.FirstDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFirstItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FirstItem.ID) Then
            
                Me.FirstItem.Text = Me.PreviousUIData(Me.FirstItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FirstItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FirstItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFirstItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FirstItemSpecified Then
                				
                ' If the FirstItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FirstItem)
                              
                Me.FirstItem.Text = formattedValue
                
            Else 
            
                ' FirstItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FirstItem.Text = AgreementTable.FirstItem.Format(AgreementTable.FirstItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFirstTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FirstTypeID.ID) Then
                If Me.PreviousUIData(Me.FirstTypeID.ID) Is Nothing
                    Me.PopulateFirstTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFirstTypeIDDropDownList(Me.PreviousUIData(Me.FirstTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the FirstTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FirstTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFirstTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FirstTypeIDSpecified Then
                            
                ' If the FirstTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateFirstTypeIDDropDownList(Me.DataSource.FirstTypeID.ToString(), 100)
                
            Else
                
                ' FirstTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateFirstTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFirstTypeIDDropDownList(AgreementTable.FirstTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetFlowCollectionID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FlowCollectionID.ID) Then
                If Me.PreviousUIData(Me.FlowCollectionID.ID) Is Nothing
                    Me.PopulateFlowCollectionIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFlowCollectionIDDropDownList(Me.PreviousUIData(Me.FlowCollectionID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the FlowCollectionID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FlowCollectionID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFlowCollectionID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FlowCollectionIDSpecified Then
                            
                ' If the FlowCollectionID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateFlowCollectionIDDropDownList(Me.DataSource.FlowCollectionID.ToString(), 100)
                
            Else
                
                ' FlowCollectionID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateFlowCollectionIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFlowCollectionIDDropDownList(AgreementTable.FlowCollectionID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetFourteenthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourteenthByCIX.ID) Then
                Me.FourteenthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FourteenthByCIX.ID))
                Return
            End If		
            
        
            ' Set the FourteenthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourteenthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFourteenthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourteenthByCIXSpecified Then
                									
                ' If the FourteenthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FourteenthByCIX.Checked = Me.DataSource.FourteenthByCIX
            Else
            
                ' FourteenthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FourteenthByCIX.Checked = AgreementTable.FourteenthByCIX.ParseValue(AgreementTable.FourteenthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFourteenthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourteenthByOIX.ID) Then
                Me.FourteenthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FourteenthByOIX.ID))
                Return
            End If		
            
        
            ' Set the FourteenthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourteenthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFourteenthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourteenthByOIXSpecified Then
                									
                ' If the FourteenthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FourteenthByOIX.Checked = Me.DataSource.FourteenthByOIX
            Else
            
                ' FourteenthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FourteenthByOIX.Checked = AgreementTable.FourteenthByOIX.ParseValue(AgreementTable.FourteenthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFourteenthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourteenthDefault.ID) Then
            
                Me.FourteenthDefault.Text = Me.PreviousUIData(Me.FourteenthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FourteenthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourteenthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFourteenthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourteenthDefaultSpecified Then
                				
                ' If the FourteenthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FourteenthDefault)
                              
                Me.FourteenthDefault.Text = formattedValue
                
            Else 
            
                ' FourteenthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FourteenthDefault.Text = AgreementTable.FourteenthDefault.Format(AgreementTable.FourteenthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFourteenthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourteenthItem.ID) Then
            
                Me.FourteenthItem.Text = Me.PreviousUIData(Me.FourteenthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FourteenthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourteenthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFourteenthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourteenthItemSpecified Then
                				
                ' If the FourteenthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FourteenthItem)
                              
                Me.FourteenthItem.Text = formattedValue
                
            Else 
            
                ' FourteenthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FourteenthItem.Text = AgreementTable.FourteenthItem.Format(AgreementTable.FourteenthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFourteenthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourteenthTypeID.ID) Then
                If Me.PreviousUIData(Me.FourteenthTypeID.ID) Is Nothing
                    Me.PopulateFourteenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFourteenthTypeIDDropDownList(Me.PreviousUIData(Me.FourteenthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the FourteenthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourteenthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFourteenthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourteenthTypeIDSpecified Then
                            
                ' If the FourteenthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateFourteenthTypeIDDropDownList(Me.DataSource.FourteenthTypeID.ToString(), 100)
                
            Else
                
                ' FourteenthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateFourteenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFourteenthTypeIDDropDownList(AgreementTable.FourteenthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetFourthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourthByCIX.ID) Then
                Me.FourthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FourthByCIX.ID))
                Return
            End If		
            
        
            ' Set the FourthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFourthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourthByCIXSpecified Then
                									
                ' If the FourthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FourthByCIX.Checked = Me.DataSource.FourthByCIX
            Else
            
                ' FourthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FourthByCIX.Checked = AgreementTable.FourthByCIX.ParseValue(AgreementTable.FourthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFourthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourthByOIX.ID) Then
                Me.FourthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.FourthByOIX.ID))
                Return
            End If		
            
        
            ' Set the FourthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFourthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourthByOIXSpecified Then
                									
                ' If the FourthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.FourthByOIX.Checked = Me.DataSource.FourthByOIX
            Else
            
                ' FourthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.FourthByOIX.Checked = AgreementTable.FourthByOIX.ParseValue(AgreementTable.FourthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetFourthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourthDefault.ID) Then
            
                Me.FourthDefault.Text = Me.PreviousUIData(Me.FourthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FourthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFourthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourthDefaultSpecified Then
                				
                ' If the FourthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FourthDefault)
                              
                Me.FourthDefault.Text = formattedValue
                
            Else 
            
                ' FourthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FourthDefault.Text = AgreementTable.FourthDefault.Format(AgreementTable.FourthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFourthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourthItem.ID) Then
            
                Me.FourthItem.Text = Me.PreviousUIData(Me.FourthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the FourthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFourthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourthItemSpecified Then
                				
                ' If the FourthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.FourthItem)
                              
                Me.FourthItem.Text = formattedValue
                
            Else 
            
                ' FourthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.FourthItem.Text = AgreementTable.FourthItem.Format(AgreementTable.FourthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetFourthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.FourthTypeID.ID) Then
                If Me.PreviousUIData(Me.FourthTypeID.ID) Is Nothing
                    Me.PopulateFourthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFourthTypeIDDropDownList(Me.PreviousUIData(Me.FourthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the FourthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.FourthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetFourthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FourthTypeIDSpecified Then
                            
                ' If the FourthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateFourthTypeIDDropDownList(Me.DataSource.FourthTypeID.ToString(), 100)
                
            Else
                
                ' FourthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateFourthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateFourthTypeIDDropDownList(AgreementTable.FourthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetHide()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.Hide.ID) Then
                Me.Hide.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.Hide.ID))
                Return
            End If		
            
        
            ' Set the Hide CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.Hide is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetHide()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.HideSpecified Then
                									
                ' If the Hide is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.Hide.Checked = Me.DataSource.Hide
            Else
            
                ' Hide is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.Hide.Checked = AgreementTable.Hide.ParseValue(AgreementTable.Hide.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetInitialsInDocument()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.InitialsInDocument.ID) Then
                Me.InitialsInDocument.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.InitialsInDocument.ID))
                Return
            End If		
            
        
            ' Set the InitialsInDocument CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.InitialsInDocument is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetInitialsInDocument()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.InitialsInDocumentSpecified Then
                									
                ' If the InitialsInDocument is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.InitialsInDocument.Checked = Me.DataSource.InitialsInDocument
            Else
            
                ' InitialsInDocument is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.InitialsInDocument.Checked = AgreementTable.InitialsInDocument.ParseValue(AgreementTable.InitialsInDocument.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetNinthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.NinthByCIX.ID) Then
                Me.NinthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.NinthByCIX.ID))
                Return
            End If		
            
        
            ' Set the NinthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.NinthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetNinthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.NinthByCIXSpecified Then
                									
                ' If the NinthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.NinthByCIX.Checked = Me.DataSource.NinthByCIX
            Else
            
                ' NinthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.NinthByCIX.Checked = AgreementTable.NinthByCIX.ParseValue(AgreementTable.NinthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetNinthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.NinthByOIX.ID) Then
                Me.NinthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.NinthByOIX.ID))
                Return
            End If		
            
        
            ' Set the NinthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.NinthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetNinthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.NinthByOIXSpecified Then
                									
                ' If the NinthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.NinthByOIX.Checked = Me.DataSource.NinthByOIX
            Else
            
                ' NinthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.NinthByOIX.Checked = AgreementTable.NinthByOIX.ParseValue(AgreementTable.NinthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetNinthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.NinthDefault.ID) Then
            
                Me.NinthDefault.Text = Me.PreviousUIData(Me.NinthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the NinthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.NinthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetNinthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.NinthDefaultSpecified Then
                				
                ' If the NinthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.NinthDefault)
                              
                Me.NinthDefault.Text = formattedValue
                
            Else 
            
                ' NinthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.NinthDefault.Text = AgreementTable.NinthDefault.Format(AgreementTable.NinthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetNinthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.NinthItem.ID) Then
            
                Me.NinthItem.Text = Me.PreviousUIData(Me.NinthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the NinthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.NinthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetNinthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.NinthItemSpecified Then
                				
                ' If the NinthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.NinthItem)
                              
                Me.NinthItem.Text = formattedValue
                
            Else 
            
                ' NinthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.NinthItem.Text = AgreementTable.NinthItem.Format(AgreementTable.NinthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetNinthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.NinthTypeID.ID) Then
                If Me.PreviousUIData(Me.NinthTypeID.ID) Is Nothing
                    Me.PopulateNinthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateNinthTypeIDDropDownList(Me.PreviousUIData(Me.NinthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the NinthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.NinthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetNinthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.NinthTypeIDSpecified Then
                            
                ' If the NinthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateNinthTypeIDDropDownList(Me.DataSource.NinthTypeID.ToString(), 100)
                
            Else
                
                ' NinthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateNinthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateNinthTypeIDDropDownList(AgreementTable.NinthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetOtherInstructions()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.OtherInstructions.ID) Then
            
                Me.OtherInstructions.Text = Me.PreviousUIData(Me.OtherInstructions.ID).ToString()
              
                Return
            End If
            
        
            ' Set the OtherInstructions TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.OtherInstructions is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetOtherInstructions()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.OtherInstructionsSpecified Then
                				
                ' If the OtherInstructions is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.OtherInstructions)
                              
                Me.OtherInstructions.Text = formattedValue
                
            Else 
            
                ' OtherInstructions is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.OtherInstructions.Text = AgreementTable.OtherInstructions.Format(AgreementTable.OtherInstructions.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetRecipientInstructions()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.RecipientInstructions.ID) Then
            
                Me.RecipientInstructions.Text = Me.PreviousUIData(Me.RecipientInstructions.ID).ToString()
              
                Return
            End If
            
        
            ' Set the RecipientInstructions TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.RecipientInstructions is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetRecipientInstructions()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RecipientInstructionsSpecified Then
                				
                ' If the RecipientInstructions is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.RecipientInstructions)
                              
                Me.RecipientInstructions.Text = formattedValue
                
            Else 
            
                ' RecipientInstructions is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.RecipientInstructions.Text = AgreementTable.RecipientInstructions.Format(AgreementTable.RecipientInstructions.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetRequiredDoc()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.RequiredDoc.ID) Then
                Me.RequiredDoc.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.RequiredDoc.ID))
                Return
            End If		
            
        
            ' Set the RequiredDoc CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.RequiredDoc is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetRequiredDoc()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RequiredDocSpecified Then
                									
                ' If the RequiredDoc is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.RequiredDoc.Checked = Me.DataSource.RequiredDoc
            Else
            
                ' RequiredDoc is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.RequiredDoc.Checked = AgreementTable.RequiredDoc.ParseValue(AgreementTable.RequiredDoc.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSecondByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SecondByCIX.ID) Then
                Me.SecondByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.SecondByCIX.ID))
                Return
            End If		
            
        
            ' Set the SecondByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SecondByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetSecondByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SecondByCIXSpecified Then
                									
                ' If the SecondByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.SecondByCIX.Checked = Me.DataSource.SecondByCIX
            Else
            
                ' SecondByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.SecondByCIX.Checked = AgreementTable.SecondByCIX.ParseValue(AgreementTable.SecondByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSecondByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SecondByOIX.ID) Then
                Me.SecondByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.SecondByOIX.ID))
                Return
            End If		
            
        
            ' Set the SecondByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SecondByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetSecondByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SecondByOIXSpecified Then
                									
                ' If the SecondByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.SecondByOIX.Checked = Me.DataSource.SecondByOIX
            Else
            
                ' SecondByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.SecondByOIX.Checked = AgreementTable.SecondByOIX.ParseValue(AgreementTable.SecondByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSecondDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SecondDefault.ID) Then
            
                Me.SecondDefault.Text = Me.PreviousUIData(Me.SecondDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SecondDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SecondDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSecondDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SecondDefaultSpecified Then
                				
                ' If the SecondDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SecondDefault)
                              
                Me.SecondDefault.Text = formattedValue
                
            Else 
            
                ' SecondDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SecondDefault.Text = AgreementTable.SecondDefault.Format(AgreementTable.SecondDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSecondItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SecondItem.ID) Then
            
                Me.SecondItem.Text = Me.PreviousUIData(Me.SecondItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SecondItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SecondItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSecondItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SecondItemSpecified Then
                				
                ' If the SecondItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SecondItem)
                              
                Me.SecondItem.Text = formattedValue
                
            Else 
            
                ' SecondItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SecondItem.Text = AgreementTable.SecondItem.Format(AgreementTable.SecondItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSecondTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SecondTypeID.ID) Then
                If Me.PreviousUIData(Me.SecondTypeID.ID) Is Nothing
                    Me.PopulateSecondTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateSecondTypeIDDropDownList(Me.PreviousUIData(Me.SecondTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the SecondTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SecondTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSecondTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SecondTypeIDSpecified Then
                            
                ' If the SecondTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateSecondTypeIDDropDownList(Me.DataSource.SecondTypeID.ToString(), 100)
                
            Else
                
                ' SecondTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateSecondTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateSecondTypeIDDropDownList(AgreementTable.SecondTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetSenderInstructions()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SenderInstructions.ID) Then
            
                Me.SenderInstructions.Text = Me.PreviousUIData(Me.SenderInstructions.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SenderInstructions TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SenderInstructions is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSenderInstructions()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SenderInstructionsSpecified Then
                				
                ' If the SenderInstructions is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SenderInstructions)
                              
                Me.SenderInstructions.Text = formattedValue
                
            Else 
            
                ' SenderInstructions is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SenderInstructions.Text = AgreementTable.SenderInstructions.Format(AgreementTable.SenderInstructions.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSeventhByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SeventhByCIX.ID) Then
                Me.SeventhByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.SeventhByCIX.ID))
                Return
            End If		
            
        
            ' Set the SeventhByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SeventhByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetSeventhByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SeventhByCIXSpecified Then
                									
                ' If the SeventhByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.SeventhByCIX.Checked = Me.DataSource.SeventhByCIX
            Else
            
                ' SeventhByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.SeventhByCIX.Checked = AgreementTable.SeventhByCIX.ParseValue(AgreementTable.SeventhByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSeventhByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SeventhByOIX.ID) Then
                Me.SeventhByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.SeventhByOIX.ID))
                Return
            End If		
            
        
            ' Set the SeventhByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SeventhByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetSeventhByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SeventhByOIXSpecified Then
                									
                ' If the SeventhByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.SeventhByOIX.Checked = Me.DataSource.SeventhByOIX
            Else
            
                ' SeventhByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.SeventhByOIX.Checked = AgreementTable.SeventhByOIX.ParseValue(AgreementTable.SeventhByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSeventhDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SeventhDefault.ID) Then
            
                Me.SeventhDefault.Text = Me.PreviousUIData(Me.SeventhDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SeventhDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SeventhDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSeventhDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SeventhDefaultSpecified Then
                				
                ' If the SeventhDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SeventhDefault)
                              
                Me.SeventhDefault.Text = formattedValue
                
            Else 
            
                ' SeventhDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SeventhDefault.Text = AgreementTable.SeventhDefault.Format(AgreementTable.SeventhDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSeventhItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SeventhItem.ID) Then
            
                Me.SeventhItem.Text = Me.PreviousUIData(Me.SeventhItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SeventhItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SeventhItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSeventhItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SeventhItemSpecified Then
                				
                ' If the SeventhItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SeventhItem)
                              
                Me.SeventhItem.Text = formattedValue
                
            Else 
            
                ' SeventhItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SeventhItem.Text = AgreementTable.SeventhItem.Format(AgreementTable.SeventhItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSeventhTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SeventhTypeID.ID) Then
                If Me.PreviousUIData(Me.SeventhTypeID.ID) Is Nothing
                    Me.PopulateSeventhTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateSeventhTypeIDDropDownList(Me.PreviousUIData(Me.SeventhTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the SeventhTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SeventhTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSeventhTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SeventhTypeIDSpecified Then
                            
                ' If the SeventhTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateSeventhTypeIDDropDownList(Me.DataSource.SeventhTypeID.ToString(), 100)
                
            Else
                
                ' SeventhTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateSeventhTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateSeventhTypeIDDropDownList(AgreementTable.SeventhTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetShowExpirationDate()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ShowExpirationDate.ID) Then
                Me.ShowExpirationDate.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ShowExpirationDate.ID))
                Return
            End If		
            
        
            ' Set the ShowExpirationDate CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ShowExpirationDate is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetShowExpirationDate()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ShowExpirationDateSpecified Then
                									
                ' If the ShowExpirationDate is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ShowExpirationDate.Checked = Me.DataSource.ShowExpirationDate
            Else
            
                ' ShowExpirationDate is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ShowExpirationDate.Checked = AgreementTable.ShowExpirationDate.ParseValue(AgreementTable.ShowExpirationDate.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetShowSignatureDate()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ShowSignatureDate.ID) Then
                Me.ShowSignatureDate.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ShowSignatureDate.ID))
                Return
            End If		
            
        
            ' Set the ShowSignatureDate CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ShowSignatureDate is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetShowSignatureDate()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ShowSignatureDateSpecified Then
                									
                ' If the ShowSignatureDate is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ShowSignatureDate.Checked = Me.DataSource.ShowSignatureDate
            Else
            
                ' ShowSignatureDate is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ShowSignatureDate.Checked = AgreementTable.ShowSignatureDate.ParseValue(AgreementTable.ShowSignatureDate.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSixthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SixthByCIX.ID) Then
                Me.SixthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.SixthByCIX.ID))
                Return
            End If		
            
        
            ' Set the SixthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SixthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetSixthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SixthByCIXSpecified Then
                									
                ' If the SixthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.SixthByCIX.Checked = Me.DataSource.SixthByCIX
            Else
            
                ' SixthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.SixthByCIX.Checked = AgreementTable.SixthByCIX.ParseValue(AgreementTable.SixthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSixthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SixthByOIX.ID) Then
                Me.SixthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.SixthByOIX.ID))
                Return
            End If		
            
        
            ' Set the SixthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SixthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetSixthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SixthByOIXSpecified Then
                									
                ' If the SixthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.SixthByOIX.Checked = Me.DataSource.SixthByOIX
            Else
            
                ' SixthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.SixthByOIX.Checked = AgreementTable.SixthByOIX.ParseValue(AgreementTable.SixthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetSixthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SixthDefault.ID) Then
            
                Me.SixthDefault.Text = Me.PreviousUIData(Me.SixthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SixthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SixthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSixthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SixthDefaultSpecified Then
                				
                ' If the SixthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SixthDefault)
                              
                Me.SixthDefault.Text = formattedValue
                
            Else 
            
                ' SixthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SixthDefault.Text = AgreementTable.SixthDefault.Format(AgreementTable.SixthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSixthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SixthItem.ID) Then
            
                Me.SixthItem.Text = Me.PreviousUIData(Me.SixthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the SixthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SixthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSixthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SixthItemSpecified Then
                				
                ' If the SixthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.SixthItem)
                              
                Me.SixthItem.Text = formattedValue
                
            Else 
            
                ' SixthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.SixthItem.Text = AgreementTable.SixthItem.Format(AgreementTable.SixthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetSixthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.SixthTypeID.ID) Then
                If Me.PreviousUIData(Me.SixthTypeID.ID) Is Nothing
                    Me.PopulateSixthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateSixthTypeIDDropDownList(Me.PreviousUIData(Me.SixthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the SixthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.SixthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetSixthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.SixthTypeIDSpecified Then
                            
                ' If the SixthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateSixthTypeIDDropDownList(Me.DataSource.SixthTypeID.ToString(), 100)
                
            Else
                
                ' SixthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateSixthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateSixthTypeIDDropDownList(AgreementTable.SixthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetTenthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TenthByCIX.ID) Then
                Me.TenthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.TenthByCIX.ID))
                Return
            End If		
            
        
            ' Set the TenthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TenthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetTenthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TenthByCIXSpecified Then
                									
                ' If the TenthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.TenthByCIX.Checked = Me.DataSource.TenthByCIX
            Else
            
                ' TenthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.TenthByCIX.Checked = AgreementTable.TenthByCIX.ParseValue(AgreementTable.TenthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetTenthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TenthByOIX.ID) Then
                Me.TenthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.TenthByOIX.ID))
                Return
            End If		
            
        
            ' Set the TenthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TenthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetTenthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TenthByOIXSpecified Then
                									
                ' If the TenthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.TenthByOIX.Checked = Me.DataSource.TenthByOIX
            Else
            
                ' TenthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.TenthByOIX.Checked = AgreementTable.TenthByOIX.ParseValue(AgreementTable.TenthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetTenthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TenthDefault.ID) Then
            
                Me.TenthDefault.Text = Me.PreviousUIData(Me.TenthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the TenthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TenthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetTenthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TenthDefaultSpecified Then
                				
                ' If the TenthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.TenthDefault)
                              
                Me.TenthDefault.Text = formattedValue
                
            Else 
            
                ' TenthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.TenthDefault.Text = AgreementTable.TenthDefault.Format(AgreementTable.TenthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetTenthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TenthItem.ID) Then
            
                Me.TenthItem.Text = Me.PreviousUIData(Me.TenthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the TenthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TenthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetTenthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TenthItemSpecified Then
                				
                ' If the TenthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.TenthItem)
                              
                Me.TenthItem.Text = formattedValue
                
            Else 
            
                ' TenthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.TenthItem.Text = AgreementTable.TenthItem.Format(AgreementTable.TenthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetTenthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TenthTypeID.ID) Then
                If Me.PreviousUIData(Me.TenthTypeID.ID) Is Nothing
                    Me.PopulateTenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateTenthTypeIDDropDownList(Me.PreviousUIData(Me.TenthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the TenthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TenthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetTenthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TenthTypeIDSpecified Then
                            
                ' If the TenthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateTenthTypeIDDropDownList(Me.DataSource.TenthTypeID.ToString(), 100)
                
            Else
                
                ' TenthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateTenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateTenthTypeIDDropDownList(AgreementTable.TenthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetThirdByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirdByCIX.ID) Then
                Me.ThirdByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ThirdByCIX.ID))
                Return
            End If		
            
        
            ' Set the ThirdByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirdByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetThirdByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirdByCIXSpecified Then
                									
                ' If the ThirdByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ThirdByCIX.Checked = Me.DataSource.ThirdByCIX
            Else
            
                ' ThirdByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ThirdByCIX.Checked = AgreementTable.ThirdByCIX.ParseValue(AgreementTable.ThirdByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetThirdByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirdByOIX.ID) Then
                Me.ThirdByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ThirdByOIX.ID))
                Return
            End If		
            
        
            ' Set the ThirdByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirdByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetThirdByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirdByOIXSpecified Then
                									
                ' If the ThirdByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ThirdByOIX.Checked = Me.DataSource.ThirdByOIX
            Else
            
                ' ThirdByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ThirdByOIX.Checked = AgreementTable.ThirdByOIX.ParseValue(AgreementTable.ThirdByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetThirdDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirdDefault.ID) Then
            
                Me.ThirdDefault.Text = Me.PreviousUIData(Me.ThirdDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the ThirdDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirdDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetThirdDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirdDefaultSpecified Then
                				
                ' If the ThirdDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.ThirdDefault)
                              
                Me.ThirdDefault.Text = formattedValue
                
            Else 
            
                ' ThirdDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.ThirdDefault.Text = AgreementTable.ThirdDefault.Format(AgreementTable.ThirdDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetThirdItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirdItem.ID) Then
            
                Me.ThirdItem.Text = Me.PreviousUIData(Me.ThirdItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the ThirdItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirdItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetThirdItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirdItemSpecified Then
                				
                ' If the ThirdItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.ThirdItem)
                              
                Me.ThirdItem.Text = formattedValue
                
            Else 
            
                ' ThirdItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.ThirdItem.Text = AgreementTable.ThirdItem.Format(AgreementTable.ThirdItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetThirdTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirdTypeID.ID) Then
                If Me.PreviousUIData(Me.ThirdTypeID.ID) Is Nothing
                    Me.PopulateThirdTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateThirdTypeIDDropDownList(Me.PreviousUIData(Me.ThirdTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the ThirdTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirdTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetThirdTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirdTypeIDSpecified Then
                            
                ' If the ThirdTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateThirdTypeIDDropDownList(Me.DataSource.ThirdTypeID.ToString(), 100)
                
            Else
                
                ' ThirdTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateThirdTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateThirdTypeIDDropDownList(AgreementTable.ThirdTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetThirteenthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirteenthByCIX.ID) Then
                Me.ThirteenthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ThirteenthByCIX.ID))
                Return
            End If		
            
        
            ' Set the ThirteenthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirteenthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetThirteenthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirteenthByCIXSpecified Then
                									
                ' If the ThirteenthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ThirteenthByCIX.Checked = Me.DataSource.ThirteenthByCIX
            Else
            
                ' ThirteenthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ThirteenthByCIX.Checked = AgreementTable.ThirteenthByCIX.ParseValue(AgreementTable.ThirteenthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetThirteenthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirteenthByOIX.ID) Then
                Me.ThirteenthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.ThirteenthByOIX.ID))
                Return
            End If		
            
        
            ' Set the ThirteenthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirteenthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetThirteenthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirteenthByOIXSpecified Then
                									
                ' If the ThirteenthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.ThirteenthByOIX.Checked = Me.DataSource.ThirteenthByOIX
            Else
            
                ' ThirteenthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.ThirteenthByOIX.Checked = AgreementTable.ThirteenthByOIX.ParseValue(AgreementTable.ThirteenthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetThirteenthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirteenthDefault.ID) Then
            
                Me.ThirteenthDefault.Text = Me.PreviousUIData(Me.ThirteenthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the ThirteenthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirteenthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetThirteenthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirteenthDefaultSpecified Then
                				
                ' If the ThirteenthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.ThirteenthDefault)
                              
                Me.ThirteenthDefault.Text = formattedValue
                
            Else 
            
                ' ThirteenthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.ThirteenthDefault.Text = AgreementTable.ThirteenthDefault.Format(AgreementTable.ThirteenthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetThirteenthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirteenthItem.ID) Then
            
                Me.ThirteenthItem.Text = Me.PreviousUIData(Me.ThirteenthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the ThirteenthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirteenthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetThirteenthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirteenthItemSpecified Then
                				
                ' If the ThirteenthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.ThirteenthItem)
                              
                Me.ThirteenthItem.Text = formattedValue
                
            Else 
            
                ' ThirteenthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.ThirteenthItem.Text = AgreementTable.ThirteenthItem.Format(AgreementTable.ThirteenthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetThirteenthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ThirteenthTypeID.ID) Then
                If Me.PreviousUIData(Me.ThirteenthTypeID.ID) Is Nothing
                    Me.PopulateThirteenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateThirteenthTypeIDDropDownList(Me.PreviousUIData(Me.ThirteenthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the ThirteenthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.ThirteenthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetThirteenthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ThirteenthTypeIDSpecified Then
                            
                ' If the ThirteenthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateThirteenthTypeIDDropDownList(Me.DataSource.ThirteenthTypeID.ToString(), 100)
                
            Else
                
                ' ThirteenthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateThirteenthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateThirteenthTypeIDDropDownList(AgreementTable.ThirteenthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetTwelfthByCIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TwelfthByCIX.ID) Then
                Me.TwelfthByCIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.TwelfthByCIX.ID))
                Return
            End If		
            
        
            ' Set the TwelfthByCIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TwelfthByCIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetTwelfthByCIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TwelfthByCIXSpecified Then
                									
                ' If the TwelfthByCIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.TwelfthByCIX.Checked = Me.DataSource.TwelfthByCIX
            Else
            
                ' TwelfthByCIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.TwelfthByCIX.Checked = AgreementTable.TwelfthByCIX.ParseValue(AgreementTable.TwelfthByCIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetTwelfthByOIX()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TwelfthByOIX.ID) Then
                Me.TwelfthByOIX.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.TwelfthByOIX.ID))
                Return
            End If		
            
        
            ' Set the TwelfthByOIX CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TwelfthByOIX is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetTwelfthByOIX()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TwelfthByOIXSpecified Then
                									
                ' If the TwelfthByOIX is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.TwelfthByOIX.Checked = Me.DataSource.TwelfthByOIX
            Else
            
                ' TwelfthByOIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.TwelfthByOIX.Checked = AgreementTable.TwelfthByOIX.ParseValue(AgreementTable.TwelfthByOIX.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetTwelfthDefault()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TwelfthDefault.ID) Then
            
                Me.TwelfthDefault.Text = Me.PreviousUIData(Me.TwelfthDefault.ID).ToString()
              
                Return
            End If
            
        
            ' Set the TwelfthDefault TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TwelfthDefault is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetTwelfthDefault()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TwelfthDefaultSpecified Then
                				
                ' If the TwelfthDefault is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.TwelfthDefault)
                              
                Me.TwelfthDefault.Text = formattedValue
                
            Else 
            
                ' TwelfthDefault is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.TwelfthDefault.Text = AgreementTable.TwelfthDefault.Format(AgreementTable.TwelfthDefault.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetTwelfthItem()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TwelfthItem.ID) Then
            
                Me.TwelfthItem.Text = Me.PreviousUIData(Me.TwelfthItem.ID).ToString()
              
                Return
            End If
            
        
            ' Set the TwelfthItem TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TwelfthItem is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetTwelfthItem()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TwelfthItemSpecified Then
                				
                ' If the TwelfthItem is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.TwelfthItem)
                              
                Me.TwelfthItem.Text = formattedValue
                
            Else 
            
                ' TwelfthItem is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.TwelfthItem.Text = AgreementTable.TwelfthItem.Format(AgreementTable.TwelfthItem.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetTwelfthTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.TwelfthTypeID.ID) Then
                If Me.PreviousUIData(Me.TwelfthTypeID.ID) Is Nothing
                    Me.PopulateTwelfthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateTwelfthTypeIDDropDownList(Me.PreviousUIData(Me.TwelfthTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the TwelfthTypeID DropDownList on the webpage with value from the
            ' Agreement database record.
            
            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.TwelfthTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetTwelfthTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.TwelfthTypeIDSpecified Then
                            
                ' If the TwelfthTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateTwelfthTypeIDDropDownList(Me.DataSource.TwelfthTypeID.ToString(), 100)
                
            Else
                
                ' TwelfthTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateTwelfthTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateTwelfthTypeIDDropDownList(AgreementTable.TwelfthTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetUpdatedAt()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.UpdatedAt.ID) Then
            
                Me.UpdatedAt.Text = Me.PreviousUIData(Me.UpdatedAt.ID).ToString()
              
                Return
            End If
            
        
            ' Set the UpdatedAt TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.UpdatedAt is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetUpdatedAt()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.UpdatedAtSpecified Then
                				
                ' If the UpdatedAt is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.UpdatedAt, "g")
                              
                Me.UpdatedAt.Text = formattedValue
                
            Else 
            
                ' UpdatedAt is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.UpdatedAt.Text = AgreementTable.UpdatedAt.Format(AgreementTable.UpdatedAt.DefaultValue, "g")
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetUpdatedByID()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.UpdatedByID.ID) Then
            
                Me.UpdatedByID.Text = Me.PreviousUIData(Me.UpdatedByID.ID).ToString()
              
                Return
            End If
            
        
            ' Set the UpdatedByID TextBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.UpdatedByID is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetUpdatedByID()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.UpdatedByIDSpecified Then
                				
                ' If the UpdatedByID is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(AgreementTable.UpdatedByID)
                              
                Me.UpdatedByID.Text = formattedValue
                
            Else 
            
                ' UpdatedByID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.UpdatedByID.Text = AgreementTable.UpdatedByID.Format(AgreementTable.UpdatedByID.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetUseStoredSignature()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.UseStoredSignature.ID) Then
                Me.UseStoredSignature.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.UseStoredSignature.ID))
                Return
            End If		
            
        
            ' Set the UseStoredSignature CheckBox on the webpage with value from the
            ' Agreement database record.

            ' Me.DataSource is the Agreement record retrieved from the database.
            ' Me.UseStoredSignature is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetUseStoredSignature()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.UseStoredSignatureSpecified Then
                									
                ' If the UseStoredSignature is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.UseStoredSignature.Checked = Me.DataSource.UseStoredSignature
            Else
            
                ' UseStoredSignature is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.UseStoredSignature.Checked = AgreementTable.UseStoredSignature.ParseValue(AgreementTable.UseStoredSignature.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetAgreementFileLabel()
                  
                  End Sub
                
        Public Overridable Sub SetAgreementFileNameLabel()
                  
                  End Sub
                
        Public Overridable Sub SetAgreementLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedAtLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedByIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCustomIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDescriptionLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocHasCustomFieldsLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocIndexLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocRankLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocTreeParentIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEighthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEighthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEighthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEighthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEighthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEleventhByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEleventhByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEleventhDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEleventhItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetEleventhTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetExecuteFromBoardLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifteenthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifteenthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifteenthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifteenthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifteenthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFifthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFirstByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFirstByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFirstDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFirstItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFirstTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFlowCollectionIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourteenthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourteenthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourteenthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourteenthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourteenthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFourthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetHideLabel()
                  
                  End Sub
                
        Public Overridable Sub SetInitialsInDocumentLabel()
                  
                  End Sub
                
        Public Overridable Sub SetNinthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetNinthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetNinthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetNinthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetNinthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetOtherInstructionsLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRecipientInstructionsLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRequiredDocLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSecondByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSecondByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSecondDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSecondItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSecondTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSenderInstructionsLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSeventhByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSeventhByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSeventhDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSeventhItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSeventhTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetShowExpirationDateLabel()
                  
                  End Sub
                
        Public Overridable Sub SetShowSignatureDateLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSixthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSixthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSixthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSixthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetSixthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTenthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTenthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTenthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTenthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTenthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirdByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirdByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirdDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirdItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirdTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirteenthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirteenthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirteenthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirteenthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetThirteenthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTwelfthByCIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTwelfthByOIXLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTwelfthDefaultLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTwelfthItemLabel()
                  
                  End Sub
                
        Public Overridable Sub SetTwelfthTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetUpdatedAtLabel()
                  
                  End Sub
                
        Public Overridable Sub SetUpdatedByIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetUseStoredSignatureLabel()
                  
                  End Sub
                

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e As FormulaEvaluator) As String
            If e Is Nothing Then
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()

            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If

            If includeDS
                
            End IF
            
            
            ' Other variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            If dataSourceForEvaluate Is Nothing Then

                e.DataSource = Me.DataSource

            Else
                e.DataSource = dataSourceForEvaluate
            End If

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If

            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function      
        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function


        Public Overridable Sub RegisterPostback()
        
        
        End Sub

      
        
        ' To customize, override this method in AgreementTableControlRow.
        Public Overridable Sub SaveData()
            ' Saves the associated record in the database.
            ' SaveData calls Validate and Get methods - so it may be more appropriate to
            ' customize those methods.

            ' 1. Load the existing record from the database. Since we save the entire record, this ensures 
            ' that fields that are not displayed are also properly initialized.
            Me.LoadData()
        
            ' The checksum is used to ensure the record was not changed by another user.
            If (Not Me.DataSource Is Nothing) AndAlso (Not Me.DataSource.GetCheckSumValue Is Nothing) Then
                If Not Me.CheckSum Is Nothing AndAlso Me.CheckSum <> Me.DataSource.GetCheckSumValue.Value Then
                    Throw New Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "FASTPORT"))
                End If
            End If
        
        Dim parentCtrl As RoleRecordControl
          
          
          parentCtrl = DirectCast(Me.Page.FindControlRecursively("RoleRecordControl"), RoleRecordControl)				  
              
          If (Not IsNothing(parentCtrl) AndAlso IsNothing(parentCtrl.DataSource)) 
                ' Load the record if it is not loaded yet.
                parentCtrl.LoadData()
            End If
            If (IsNothing(parentCtrl) OrElse IsNothing(parentCtrl.DataSource)) 
                ' Get the error message from the application resource file.
                Throw New Exception(Page.GetResourceValue("Err:NoParentRecId", "FASTPORT"))
            End If
            
            Me.DataSource.RoleID = parentCtrl.DataSource.RoleID
              
            ' 2. Perform any custom validation.
            Me.Validate()

            
            ' 3. Set the values in the record with data from UI controls.
            ' This calls the Get() method for each of the user interface controls.
            Me.GetUIData()

            ' 4. Save in the database.
            ' We should not save the record if the data did not change. This
            ' will save a database hit and avoid triggering any database triggers.
             
            If Me.DataSource.IsAnyValueChanged Then
                ' Save record to database but do not commit yet.
                ' Auto generated ids are available after saving for use by child (dependent) records.
                Me.DataSource.Save()
              
                DirectCast(GetParentControlObject(Me, "AgreementTableControl"), AgreementTableControl).DataChanged = True
                DirectCast(GetParentControlObject(Me, "AgreementTableControl"), AgreementTableControl).ResetData = True
            End If
            
      
            ' update session or cookie by formula
                                    
      
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
            
            Me.CheckSum = ""
            ' For Master-Detail relationships, save data on the Detail table(s)
          
        End Sub

        ' To customize, override this method in AgreementTableControlRow.
        Public Overridable Sub GetUIData()
            ' The GetUIData method retrieves the updated values from the user interface 
            ' controls into a database record in preparation for saving or updating.
            ' To do this, it calls the Get methods for each of the field displayed on 
            ' the webpage.  It is better to make changes in the Get methods, rather 
            ' than making changes here.
      
            ' Call the Get methods for each of the user interface controls.
        
            GetAgreement()
            GetAgreementFile()
            GetAgreementFileName()
            GetCIX()
            GetCreatedAt()
            GetCreatedByID()
            GetCustomID()
            GetDescription()
            GetDocHasCustomFields()
            GetDocIndex()
            GetDocRank()
            GetDocSort()
            GetDocTreeParentID()
            GetEighthByCIX()
            GetEighthByOIX()
            GetEighthDefault()
            GetEighthItem()
            GetEighthTypeID()
            GetEleventhByCIX()
            GetEleventhByOIX()
            GetEleventhDefault()
            GetEleventhItem()
            GetEleventhTypeID()
            GetExecuteFromBoard()
            GetFifteenthByCIX()
            GetFifteenthByOIX()
            GetFifteenthDefault()
            GetFifteenthItem()
            GetFifteenthTypeID()
            GetFifthByCIX()
            GetFifthByOIX()
            GetFifthDefault()
            GetFifthItem()
            GetFifthTypeID()
            GetFirstByCIX()
            GetFirstByOIX()
            GetFirstDefault()
            GetFirstItem()
            GetFirstTypeID()
            GetFlowCollectionID()
            GetFourteenthByCIX()
            GetFourteenthByOIX()
            GetFourteenthDefault()
            GetFourteenthItem()
            GetFourteenthTypeID()
            GetFourthByCIX()
            GetFourthByOIX()
            GetFourthDefault()
            GetFourthItem()
            GetFourthTypeID()
            GetHide()
            GetInitialsInDocument()
            GetNinthByCIX()
            GetNinthByOIX()
            GetNinthDefault()
            GetNinthItem()
            GetNinthTypeID()
            GetOtherInstructions()
            GetRecipientInstructions()
            GetRequiredDoc()
            GetSecondByCIX()
            GetSecondByOIX()
            GetSecondDefault()
            GetSecondItem()
            GetSecondTypeID()
            GetSenderInstructions()
            GetSeventhByCIX()
            GetSeventhByOIX()
            GetSeventhDefault()
            GetSeventhItem()
            GetSeventhTypeID()
            GetShowExpirationDate()
            GetShowSignatureDate()
            GetSixthByCIX()
            GetSixthByOIX()
            GetSixthDefault()
            GetSixthItem()
            GetSixthTypeID()
            GetTenthByCIX()
            GetTenthByOIX()
            GetTenthDefault()
            GetTenthItem()
            GetTenthTypeID()
            GetThirdByCIX()
            GetThirdByOIX()
            GetThirdDefault()
            GetThirdItem()
            GetThirdTypeID()
            GetThirteenthByCIX()
            GetThirteenthByOIX()
            GetThirteenthDefault()
            GetThirteenthItem()
            GetThirteenthTypeID()
            GetTwelfthByCIX()
            GetTwelfthByOIX()
            GetTwelfthDefault()
            GetTwelfthItem()
            GetTwelfthTypeID()
            GetUpdatedAt()
            GetUpdatedByID()
            GetUseStoredSignature()
        End Sub
        
        
        Public Overridable Sub GetAgreement()
            
            ' Retrieve the value entered by the user on the Agreement ASP:TextBox, and
            ' save it into the Agreement field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.Agreement.Text, AgreementTable.Agreement)			

                      
        End Sub
                
        Public Overridable Sub GetAgreementFile()
            ' Retrieve the value entered by the user on the AgreementFile ASP:FileUpload, and
            ' save it into the AgreementFile field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
                  
            If Not Me.AgreementFile.PostedFile is Nothing then  
                If Me.AgreementFile.PostedFile.FileName.Length > 0 AndAlso Me.AgreementFile.PostedFile.ContentLength > 0 Then
                      ' Retrieve the file contents and store them in AgreementFile field.
					  Me.DataSource.Parse(MiscUtils.GetFileContent(Me.AgreementFile.PostedFile), AgreementTable.AgreementFile)
                  
                End If
            End If
        End Sub
                
        Public Overridable Sub GetAgreementFileName()
            
            ' Retrieve the value entered by the user on the AgreementFileName ASP:TextBox, and
            ' save it into the AgreementFileName field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.AgreementFileName.Text, AgreementTable.AgreementFileName)			

                      
        End Sub
                
        Public Overridable Sub GetCIX()
            
            ' Retrieve the value entered by the user on the CIX ASP:TextBox, and
            ' save it into the CIX field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.CIX.Text, AgreementTable.CIX)			

                      
        End Sub
                
        Public Overridable Sub GetCreatedAt()
            
            ' Retrieve the value entered by the user on the CreatedAt ASP:TextBox, and
            ' save it into the CreatedAt field in DataSource Agreement record.
            ' Parse will also validate the date to ensure it is of the proper format
            ' and a valid date.  The format is verified based on the current culture 
            ' settings including the order of month, day and year and the separator character.
            ' Parse throws an exception if the date is invalid.
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.CreatedAt.Text, AgreementTable.CreatedAt)			

                      
        End Sub
                
        Public Overridable Sub GetCreatedByID()
            
            ' Retrieve the value entered by the user on the CreatedByID ASP:TextBox, and
            ' save it into the CreatedByID field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.CreatedByID.Text, AgreementTable.CreatedByID)			

                      
        End Sub
                
        Public Overridable Sub GetCustomID()
         
            ' Retrieve the value entered by the user on the CustomID ASP:DropDownList, and
            ' save it into the CustomID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.CustomID), AgreementTable.CustomID)				
            
        End Sub
                
        Public Overridable Sub GetDescription()
            
            ' Retrieve the value entered by the user on the Description ASP:TextBox, and
            ' save it into the Description field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.Description.Text, AgreementTable.Description)			

                      
        End Sub
                
        Public Overridable Sub GetDocHasCustomFields()
        
        
            ' Retrieve the value entered by the user on the DocHasCustomFields ASP:CheckBox, and
            ' save it into the DocHasCustomFields field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.DocHasCustomFields = Me.DocHasCustomFields.Checked
                    
        End Sub
                
        Public Overridable Sub GetDocIndex()
            
            ' Retrieve the value entered by the user on the DocIndex ASP:TextBox, and
            ' save it into the DocIndex field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocIndex.Text, AgreementTable.DocIndex)			

                      
        End Sub
                
        Public Overridable Sub GetDocRank()
            
            ' Retrieve the value entered by the user on the DocRank ASP:TextBox, and
            ' save it into the DocRank field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocRank.Text, AgreementTable.DocRank)			

                      
        End Sub
                
        Public Overridable Sub GetDocSort()
            
            ' Retrieve the value entered by the user on the DocSort ASP:TextBox, and
            ' save it into the DocSort field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocSort.Text, AgreementTable.DocSort)			

                      
        End Sub
                
        Public Overridable Sub GetDocTreeParentID()
         
            ' Retrieve the value entered by the user on the DocTreeParentID ASP:DropDownList, and
            ' save it into the DocTreeParentID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.DocTreeParentID), AgreementTable.DocTreeParentID)				
            
        End Sub
                
        Public Overridable Sub GetEighthByCIX()
        
        
            ' Retrieve the value entered by the user on the EighthByCIX ASP:CheckBox, and
            ' save it into the EighthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.EighthByCIX = Me.EighthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetEighthByOIX()
        
        
            ' Retrieve the value entered by the user on the EighthByOIX ASP:CheckBox, and
            ' save it into the EighthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.EighthByOIX = Me.EighthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetEighthDefault()
            
            ' Retrieve the value entered by the user on the EighthDefault ASP:TextBox, and
            ' save it into the EighthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.EighthDefault.Text, AgreementTable.EighthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetEighthItem()
            
            ' Retrieve the value entered by the user on the EighthItem ASP:TextBox, and
            ' save it into the EighthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.EighthItem.Text, AgreementTable.EighthItem)			

                      
        End Sub
                
        Public Overridable Sub GetEighthTypeID()
         
            ' Retrieve the value entered by the user on the EighthTypeID ASP:DropDownList, and
            ' save it into the EighthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.EighthTypeID), AgreementTable.EighthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetEleventhByCIX()
        
        
            ' Retrieve the value entered by the user on the EleventhByCIX ASP:CheckBox, and
            ' save it into the EleventhByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.EleventhByCIX = Me.EleventhByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetEleventhByOIX()
        
        
            ' Retrieve the value entered by the user on the EleventhByOIX ASP:CheckBox, and
            ' save it into the EleventhByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.EleventhByOIX = Me.EleventhByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetEleventhDefault()
            
            ' Retrieve the value entered by the user on the EleventhDefault ASP:TextBox, and
            ' save it into the EleventhDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.EleventhDefault.Text, AgreementTable.EleventhDefault)			

                      
        End Sub
                
        Public Overridable Sub GetEleventhItem()
            
            ' Retrieve the value entered by the user on the EleventhItem ASP:TextBox, and
            ' save it into the EleventhItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.EleventhItem.Text, AgreementTable.EleventhItem)			

                      
        End Sub
                
        Public Overridable Sub GetEleventhTypeID()
         
            ' Retrieve the value entered by the user on the EleventhTypeID ASP:DropDownList, and
            ' save it into the EleventhTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.EleventhTypeID), AgreementTable.EleventhTypeID)				
            
        End Sub
                
        Public Overridable Sub GetExecuteFromBoard()
        
        
            ' Retrieve the value entered by the user on the ExecuteFromBoard ASP:CheckBox, and
            ' save it into the ExecuteFromBoard field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ExecuteFromBoard = Me.ExecuteFromBoard.Checked
                    
        End Sub
                
        Public Overridable Sub GetFifteenthByCIX()
        
        
            ' Retrieve the value entered by the user on the FifteenthByCIX ASP:CheckBox, and
            ' save it into the FifteenthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FifteenthByCIX = Me.FifteenthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFifteenthByOIX()
        
        
            ' Retrieve the value entered by the user on the FifteenthByOIX ASP:CheckBox, and
            ' save it into the FifteenthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FifteenthByOIX = Me.FifteenthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFifteenthDefault()
            
            ' Retrieve the value entered by the user on the FifteenthDefault ASP:TextBox, and
            ' save it into the FifteenthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FifteenthDefault.Text, AgreementTable.FifteenthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetFifteenthItem()
            
            ' Retrieve the value entered by the user on the FifteenthItem ASP:TextBox, and
            ' save it into the FifteenthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FifteenthItem.Text, AgreementTable.FifteenthItem)			

                      
        End Sub
                
        Public Overridable Sub GetFifteenthTypeID()
         
            ' Retrieve the value entered by the user on the FifteenthTypeID ASP:DropDownList, and
            ' save it into the FifteenthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.FifteenthTypeID), AgreementTable.FifteenthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetFifthByCIX()
        
        
            ' Retrieve the value entered by the user on the FifthByCIX ASP:CheckBox, and
            ' save it into the FifthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FifthByCIX = Me.FifthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFifthByOIX()
        
        
            ' Retrieve the value entered by the user on the FifthByOIX ASP:CheckBox, and
            ' save it into the FifthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FifthByOIX = Me.FifthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFifthDefault()
            
            ' Retrieve the value entered by the user on the FifthDefault ASP:TextBox, and
            ' save it into the FifthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FifthDefault.Text, AgreementTable.FifthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetFifthItem()
            
            ' Retrieve the value entered by the user on the FifthItem ASP:TextBox, and
            ' save it into the FifthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FifthItem.Text, AgreementTable.FifthItem)			

                      
        End Sub
                
        Public Overridable Sub GetFifthTypeID()
         
            ' Retrieve the value entered by the user on the FifthTypeID ASP:DropDownList, and
            ' save it into the FifthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.FifthTypeID), AgreementTable.FifthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetFirstByCIX()
        
        
            ' Retrieve the value entered by the user on the FirstByCIX ASP:CheckBox, and
            ' save it into the FirstByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FirstByCIX = Me.FirstByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFirstByOIX()
        
        
            ' Retrieve the value entered by the user on the FirstByOIX ASP:CheckBox, and
            ' save it into the FirstByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FirstByOIX = Me.FirstByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFirstDefault()
            
            ' Retrieve the value entered by the user on the FirstDefault ASP:TextBox, and
            ' save it into the FirstDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FirstDefault.Text, AgreementTable.FirstDefault)			

                      
        End Sub
                
        Public Overridable Sub GetFirstItem()
            
            ' Retrieve the value entered by the user on the FirstItem ASP:TextBox, and
            ' save it into the FirstItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FirstItem.Text, AgreementTable.FirstItem)			

                      
        End Sub
                
        Public Overridable Sub GetFirstTypeID()
         
            ' Retrieve the value entered by the user on the FirstTypeID ASP:DropDownList, and
            ' save it into the FirstTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.FirstTypeID), AgreementTable.FirstTypeID)				
            
        End Sub
                
        Public Overridable Sub GetFlowCollectionID()
         
            ' Retrieve the value entered by the user on the FlowCollectionID ASP:DropDownList, and
            ' save it into the FlowCollectionID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.FlowCollectionID), AgreementTable.FlowCollectionID)				
            
        End Sub
                
        Public Overridable Sub GetFourteenthByCIX()
        
        
            ' Retrieve the value entered by the user on the FourteenthByCIX ASP:CheckBox, and
            ' save it into the FourteenthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FourteenthByCIX = Me.FourteenthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFourteenthByOIX()
        
        
            ' Retrieve the value entered by the user on the FourteenthByOIX ASP:CheckBox, and
            ' save it into the FourteenthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FourteenthByOIX = Me.FourteenthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFourteenthDefault()
            
            ' Retrieve the value entered by the user on the FourteenthDefault ASP:TextBox, and
            ' save it into the FourteenthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FourteenthDefault.Text, AgreementTable.FourteenthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetFourteenthItem()
            
            ' Retrieve the value entered by the user on the FourteenthItem ASP:TextBox, and
            ' save it into the FourteenthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FourteenthItem.Text, AgreementTable.FourteenthItem)			

                      
        End Sub
                
        Public Overridable Sub GetFourteenthTypeID()
         
            ' Retrieve the value entered by the user on the FourteenthTypeID ASP:DropDownList, and
            ' save it into the FourteenthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.FourteenthTypeID), AgreementTable.FourteenthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetFourthByCIX()
        
        
            ' Retrieve the value entered by the user on the FourthByCIX ASP:CheckBox, and
            ' save it into the FourthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FourthByCIX = Me.FourthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFourthByOIX()
        
        
            ' Retrieve the value entered by the user on the FourthByOIX ASP:CheckBox, and
            ' save it into the FourthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.FourthByOIX = Me.FourthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetFourthDefault()
            
            ' Retrieve the value entered by the user on the FourthDefault ASP:TextBox, and
            ' save it into the FourthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FourthDefault.Text, AgreementTable.FourthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetFourthItem()
            
            ' Retrieve the value entered by the user on the FourthItem ASP:TextBox, and
            ' save it into the FourthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.FourthItem.Text, AgreementTable.FourthItem)			

                      
        End Sub
                
        Public Overridable Sub GetFourthTypeID()
         
            ' Retrieve the value entered by the user on the FourthTypeID ASP:DropDownList, and
            ' save it into the FourthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.FourthTypeID), AgreementTable.FourthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetHide()
        
        
            ' Retrieve the value entered by the user on the Hide ASP:CheckBox, and
            ' save it into the Hide field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.Hide = Me.Hide.Checked
                    
        End Sub
                
        Public Overridable Sub GetInitialsInDocument()
        
        
            ' Retrieve the value entered by the user on the InitialsInDocument ASP:CheckBox, and
            ' save it into the InitialsInDocument field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.InitialsInDocument = Me.InitialsInDocument.Checked
                    
        End Sub
                
        Public Overridable Sub GetNinthByCIX()
        
        
            ' Retrieve the value entered by the user on the NinthByCIX ASP:CheckBox, and
            ' save it into the NinthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.NinthByCIX = Me.NinthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetNinthByOIX()
        
        
            ' Retrieve the value entered by the user on the NinthByOIX ASP:CheckBox, and
            ' save it into the NinthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.NinthByOIX = Me.NinthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetNinthDefault()
            
            ' Retrieve the value entered by the user on the NinthDefault ASP:TextBox, and
            ' save it into the NinthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.NinthDefault.Text, AgreementTable.NinthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetNinthItem()
            
            ' Retrieve the value entered by the user on the NinthItem ASP:TextBox, and
            ' save it into the NinthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.NinthItem.Text, AgreementTable.NinthItem)			

                      
        End Sub
                
        Public Overridable Sub GetNinthTypeID()
         
            ' Retrieve the value entered by the user on the NinthTypeID ASP:DropDownList, and
            ' save it into the NinthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.NinthTypeID), AgreementTable.NinthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetOtherInstructions()
            
            ' Retrieve the value entered by the user on the OtherInstructions ASP:TextBox, and
            ' save it into the OtherInstructions field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.OtherInstructions.Text, AgreementTable.OtherInstructions)			

                      
        End Sub
                
        Public Overridable Sub GetRecipientInstructions()
            
            ' Retrieve the value entered by the user on the RecipientInstructions ASP:TextBox, and
            ' save it into the RecipientInstructions field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.RecipientInstructions.Text, AgreementTable.RecipientInstructions)			

                      
        End Sub
                
        Public Overridable Sub GetRequiredDoc()
        
        
            ' Retrieve the value entered by the user on the RequiredDoc ASP:CheckBox, and
            ' save it into the RequiredDoc field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.RequiredDoc = Me.RequiredDoc.Checked
                    
        End Sub
                
        Public Overridable Sub GetSecondByCIX()
        
        
            ' Retrieve the value entered by the user on the SecondByCIX ASP:CheckBox, and
            ' save it into the SecondByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.SecondByCIX = Me.SecondByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetSecondByOIX()
        
        
            ' Retrieve the value entered by the user on the SecondByOIX ASP:CheckBox, and
            ' save it into the SecondByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.SecondByOIX = Me.SecondByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetSecondDefault()
            
            ' Retrieve the value entered by the user on the SecondDefault ASP:TextBox, and
            ' save it into the SecondDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SecondDefault.Text, AgreementTable.SecondDefault)			

                      
        End Sub
                
        Public Overridable Sub GetSecondItem()
            
            ' Retrieve the value entered by the user on the SecondItem ASP:TextBox, and
            ' save it into the SecondItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SecondItem.Text, AgreementTable.SecondItem)			

                      
        End Sub
                
        Public Overridable Sub GetSecondTypeID()
         
            ' Retrieve the value entered by the user on the SecondTypeID ASP:DropDownList, and
            ' save it into the SecondTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.SecondTypeID), AgreementTable.SecondTypeID)				
            
        End Sub
                
        Public Overridable Sub GetSenderInstructions()
            
            ' Retrieve the value entered by the user on the SenderInstructions ASP:TextBox, and
            ' save it into the SenderInstructions field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SenderInstructions.Text, AgreementTable.SenderInstructions)			

                      
        End Sub
                
        Public Overridable Sub GetSeventhByCIX()
        
        
            ' Retrieve the value entered by the user on the SeventhByCIX ASP:CheckBox, and
            ' save it into the SeventhByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.SeventhByCIX = Me.SeventhByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetSeventhByOIX()
        
        
            ' Retrieve the value entered by the user on the SeventhByOIX ASP:CheckBox, and
            ' save it into the SeventhByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.SeventhByOIX = Me.SeventhByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetSeventhDefault()
            
            ' Retrieve the value entered by the user on the SeventhDefault ASP:TextBox, and
            ' save it into the SeventhDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SeventhDefault.Text, AgreementTable.SeventhDefault)			

                      
        End Sub
                
        Public Overridable Sub GetSeventhItem()
            
            ' Retrieve the value entered by the user on the SeventhItem ASP:TextBox, and
            ' save it into the SeventhItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SeventhItem.Text, AgreementTable.SeventhItem)			

                      
        End Sub
                
        Public Overridable Sub GetSeventhTypeID()
         
            ' Retrieve the value entered by the user on the SeventhTypeID ASP:DropDownList, and
            ' save it into the SeventhTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.SeventhTypeID), AgreementTable.SeventhTypeID)				
            
        End Sub
                
        Public Overridable Sub GetShowExpirationDate()
        
        
            ' Retrieve the value entered by the user on the ShowExpirationDate ASP:CheckBox, and
            ' save it into the ShowExpirationDate field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ShowExpirationDate = Me.ShowExpirationDate.Checked
                    
        End Sub
                
        Public Overridable Sub GetShowSignatureDate()
        
        
            ' Retrieve the value entered by the user on the ShowSignatureDate ASP:CheckBox, and
            ' save it into the ShowSignatureDate field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ShowSignatureDate = Me.ShowSignatureDate.Checked
                    
        End Sub
                
        Public Overridable Sub GetSixthByCIX()
        
        
            ' Retrieve the value entered by the user on the SixthByCIX ASP:CheckBox, and
            ' save it into the SixthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.SixthByCIX = Me.SixthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetSixthByOIX()
        
        
            ' Retrieve the value entered by the user on the SixthByOIX ASP:CheckBox, and
            ' save it into the SixthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.SixthByOIX = Me.SixthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetSixthDefault()
            
            ' Retrieve the value entered by the user on the SixthDefault ASP:TextBox, and
            ' save it into the SixthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SixthDefault.Text, AgreementTable.SixthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetSixthItem()
            
            ' Retrieve the value entered by the user on the SixthItem ASP:TextBox, and
            ' save it into the SixthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.SixthItem.Text, AgreementTable.SixthItem)			

                      
        End Sub
                
        Public Overridable Sub GetSixthTypeID()
         
            ' Retrieve the value entered by the user on the SixthTypeID ASP:DropDownList, and
            ' save it into the SixthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.SixthTypeID), AgreementTable.SixthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetTenthByCIX()
        
        
            ' Retrieve the value entered by the user on the TenthByCIX ASP:CheckBox, and
            ' save it into the TenthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.TenthByCIX = Me.TenthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetTenthByOIX()
        
        
            ' Retrieve the value entered by the user on the TenthByOIX ASP:CheckBox, and
            ' save it into the TenthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.TenthByOIX = Me.TenthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetTenthDefault()
            
            ' Retrieve the value entered by the user on the TenthDefault ASP:TextBox, and
            ' save it into the TenthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.TenthDefault.Text, AgreementTable.TenthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetTenthItem()
            
            ' Retrieve the value entered by the user on the TenthItem ASP:TextBox, and
            ' save it into the TenthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.TenthItem.Text, AgreementTable.TenthItem)			

                      
        End Sub
                
        Public Overridable Sub GetTenthTypeID()
         
            ' Retrieve the value entered by the user on the TenthTypeID ASP:DropDownList, and
            ' save it into the TenthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.TenthTypeID), AgreementTable.TenthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetThirdByCIX()
        
        
            ' Retrieve the value entered by the user on the ThirdByCIX ASP:CheckBox, and
            ' save it into the ThirdByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ThirdByCIX = Me.ThirdByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetThirdByOIX()
        
        
            ' Retrieve the value entered by the user on the ThirdByOIX ASP:CheckBox, and
            ' save it into the ThirdByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ThirdByOIX = Me.ThirdByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetThirdDefault()
            
            ' Retrieve the value entered by the user on the ThirdDefault ASP:TextBox, and
            ' save it into the ThirdDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.ThirdDefault.Text, AgreementTable.ThirdDefault)			

                      
        End Sub
                
        Public Overridable Sub GetThirdItem()
            
            ' Retrieve the value entered by the user on the ThirdItem ASP:TextBox, and
            ' save it into the ThirdItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.ThirdItem.Text, AgreementTable.ThirdItem)			

                      
        End Sub
                
        Public Overridable Sub GetThirdTypeID()
         
            ' Retrieve the value entered by the user on the ThirdTypeID ASP:DropDownList, and
            ' save it into the ThirdTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.ThirdTypeID), AgreementTable.ThirdTypeID)				
            
        End Sub
                
        Public Overridable Sub GetThirteenthByCIX()
        
        
            ' Retrieve the value entered by the user on the ThirteenthByCIX ASP:CheckBox, and
            ' save it into the ThirteenthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ThirteenthByCIX = Me.ThirteenthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetThirteenthByOIX()
        
        
            ' Retrieve the value entered by the user on the ThirteenthByOIX ASP:CheckBox, and
            ' save it into the ThirteenthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.ThirteenthByOIX = Me.ThirteenthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetThirteenthDefault()
            
            ' Retrieve the value entered by the user on the ThirteenthDefault ASP:TextBox, and
            ' save it into the ThirteenthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.ThirteenthDefault.Text, AgreementTable.ThirteenthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetThirteenthItem()
            
            ' Retrieve the value entered by the user on the ThirteenthItem ASP:TextBox, and
            ' save it into the ThirteenthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.ThirteenthItem.Text, AgreementTable.ThirteenthItem)			

                      
        End Sub
                
        Public Overridable Sub GetThirteenthTypeID()
         
            ' Retrieve the value entered by the user on the ThirteenthTypeID ASP:DropDownList, and
            ' save it into the ThirteenthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.ThirteenthTypeID), AgreementTable.ThirteenthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetTwelfthByCIX()
        
        
            ' Retrieve the value entered by the user on the TwelfthByCIX ASP:CheckBox, and
            ' save it into the TwelfthByCIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.TwelfthByCIX = Me.TwelfthByCIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetTwelfthByOIX()
        
        
            ' Retrieve the value entered by the user on the TwelfthByOIX ASP:CheckBox, and
            ' save it into the TwelfthByOIX field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.TwelfthByOIX = Me.TwelfthByOIX.Checked
                    
        End Sub
                
        Public Overridable Sub GetTwelfthDefault()
            
            ' Retrieve the value entered by the user on the TwelfthDefault ASP:TextBox, and
            ' save it into the TwelfthDefault field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.TwelfthDefault.Text, AgreementTable.TwelfthDefault)			

                      
        End Sub
                
        Public Overridable Sub GetTwelfthItem()
            
            ' Retrieve the value entered by the user on the TwelfthItem ASP:TextBox, and
            ' save it into the TwelfthItem field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.TwelfthItem.Text, AgreementTable.TwelfthItem)			

                      
        End Sub
                
        Public Overridable Sub GetTwelfthTypeID()
         
            ' Retrieve the value entered by the user on the TwelfthTypeID ASP:DropDownList, and
            ' save it into the TwelfthTypeID field in DataSource Agreement record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.TwelfthTypeID), AgreementTable.TwelfthTypeID)				
            
        End Sub
                
        Public Overridable Sub GetUpdatedAt()
            
            ' Retrieve the value entered by the user on the UpdatedAt ASP:TextBox, and
            ' save it into the UpdatedAt field in DataSource Agreement record.
            ' Parse will also validate the date to ensure it is of the proper format
            ' and a valid date.  The format is verified based on the current culture 
            ' settings including the order of month, day and year and the separator character.
            ' Parse throws an exception if the date is invalid.
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.UpdatedAt.Text, AgreementTable.UpdatedAt)			

                      
        End Sub
                
        Public Overridable Sub GetUpdatedByID()
            
            ' Retrieve the value entered by the user on the UpdatedByID ASP:TextBox, and
            ' save it into the UpdatedByID field in DataSource Agreement record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.UpdatedByID.Text, AgreementTable.UpdatedByID)			

                      
        End Sub
                
        Public Overridable Sub GetUseStoredSignature()
        
        
            ' Retrieve the value entered by the user on the UseStoredSignature ASP:CheckBox, and
            ' save it into the UseStoredSignature field in DataSource Agreement record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.UseStoredSignature = Me.UseStoredSignature.Checked
                    
        End Sub
                
      
        ' To customize, override this method in AgreementTableControlRow.
        
        Public Overridable Function CreateWhereClause() As WhereClause
        
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            Return Nothing
            
        End Function
        
    

        ' To customize, override this method in AgreementTableControlRow.
        Public Overridable Sub Validate() 
            ' Add custom validation for any control within this panel.
            ' Example.  If you have a State ASP:Textbox control
            ' If Me.State.Text <> "CA" Then
            '    Throw New Exception("State must be CA (California).")
            ' End If

            ' The Validate method is common across all controls within
            ' this panel so you can validate multiple fields, but report
            ' one error message.
            
                
        End Sub

        Public Overridable Sub Delete()
        
            If Me.IsNewRecord() Then
                Return
            End If

            Dim pkValue As KeyValue = KeyValue.XmlToKey(Me.RecordUniqueId)
          AgreementTable.DeleteRecord(pkValue)
          
            DirectCast(GetParentControlObject(Me, "AgreementTableControl"), AgreementTableControl).DataChanged = True
            DirectCast(GetParentControlObject(Me, "AgreementTableControl"), AgreementTableControl).ResetData = True
        End Sub

        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction()
                Me.RegisterPostback()

                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Me.LoadData()
                    Me.DataBind()			
                End If
                                
                						
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction()
            End Try
        End Sub
        
            
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()
        
    
            'Save pagination state to session.
          
        End Sub
        
        
    
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

        

            ' Clear pagination state from session.
        
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)
            Dim isNewRecord As String = CType(ViewState("IsNewRecord"), String)
            If Not isNewRecord Is Nothing AndAlso isNewRecord.Trim <> "" Then
                Me.IsNewRecord = Boolean.Parse(isNewRecord)
            End If
            
            Dim myCheckSum As String = CType(ViewState("CheckSum"), String)
            If Not myCheckSum Is Nothing AndAlso myCheckSum.Trim <> "" Then
                Me.CheckSum = myCheckSum
            End If
            
    
            ' Load view state for pagination control.
                 
        End Sub

        Protected Overrides Function SaveViewState() As Object
            ViewState("IsNewRecord") = Me.IsNewRecord.ToString()
            ViewState("CheckSum") = Me.CheckSum
            
    
            ' Load view state for pagination control.
                  
            Return MyBase.SaveViewState()
        End Function
        
        

        Public Overridable Function CreateWhereClause_CustomIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the Agreement table.
            ' Examples:
            ' wc.iAND(AgreementTable.Agreement, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(AgreementTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_DocTreeParentIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the DocTree table.
            ' Examples:
            ' wc.iAND(DocTreeTable.DocName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(DocTreeTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_EighthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_EleventhTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_FifteenthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_FifthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_FirstTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_FlowCollectionIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the FlowCollection table.
            ' Examples:
            ' wc.iAND(FlowCollectionTable.CollectionName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(FlowCollectionTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_FourteenthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_FourthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_NinthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_SecondTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_SeventhTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_SixthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_TenthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_ThirdTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_ThirteenthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_TwelfthTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the List table.
            ' Examples:
            ' wc.iAND(ListTable.ListName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(ListTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                
        ' Fill the CustomID list.
        Protected Overridable Sub PopulateCustomIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.CustomID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.CustomID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_CustomIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_CustomIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(AgreementTable.Agreement, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As AgreementRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = AgreementTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As AgreementRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.AgreementIDSpecified Then
                            cvalue = itemValue.AgreementID.ToString() 
                            
                        If counter < maxItems AndAlso Me.CustomID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.CustomID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.CustomID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.CustomID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(AgreementTable.Agreement)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.CustomID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.CustomID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.CustomID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.CustomID, selectedValue)Then

                ' construct a whereclause to query a record with Agreement.AgreementID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(AgreementTable.AgreementID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As AgreementRecord = AgreementTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As AgreementRecord = DirectCast(rc(0), AgreementRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.AgreementIDSpecified Then
                            cvalue = itemValue.AgreementID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.CustomID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.CustomID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.CustomID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(AgreementTable.Agreement)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.CustomID.Items.Add(newItem)
                      SetSelectedValue(Me.CustomID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the DocTreeParentID list.
        Protected Overridable Sub PopulateDocTreeParentIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.DocTreeParentID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.DocTreeParentID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_DocTreeParentIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_DocTreeParentIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(DocTreeTable.DocName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As DocTreeRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = DocTreeTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As DocTreeRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.DocTreeIDSpecified Then
                            cvalue = itemValue.DocTreeID.ToString() 
                            
                        If counter < maxItems AndAlso Me.DocTreeParentID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.DocTreeParentID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.DocTreeParentID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.DocTreeParentID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(DocTreeTable.DocName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.DocTreeParentID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.DocTreeParentID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.DocTreeParentID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.DocTreeParentID, selectedValue)Then

                ' construct a whereclause to query a record with DocTree.DocTreeID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(DocTreeTable.DocTreeID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As DocTreeRecord = DocTreeTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As DocTreeRecord = DirectCast(rc(0), DocTreeRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.DocTreeIDSpecified Then
                            cvalue = itemValue.DocTreeID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.DocTreeParentID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.DocTreeParentID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.DocTreeParentID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(DocTreeTable.DocName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.DocTreeParentID.Items.Add(newItem)
                      SetSelectedValue(Me.DocTreeParentID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the EighthTypeID list.
        Protected Overridable Sub PopulateEighthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.EighthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.EighthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_EighthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_EighthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.EighthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.EighthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.EighthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.EighthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.EighthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.EighthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.EighthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.EighthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.EighthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.EighthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.EighthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.EighthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.EighthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the EleventhTypeID list.
        Protected Overridable Sub PopulateEleventhTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.EleventhTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.EleventhTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_EleventhTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_EleventhTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.EleventhTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.EleventhTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.EleventhTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.EleventhTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.EleventhTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.EleventhTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.EleventhTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.EleventhTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.EleventhTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.EleventhTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.EleventhTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.EleventhTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.EleventhTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the FifteenthTypeID list.
        Protected Overridable Sub PopulateFifteenthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.FifteenthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.FifteenthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_FifteenthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_FifteenthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.FifteenthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FifteenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FifteenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FifteenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.FifteenthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.FifteenthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.FifteenthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.FifteenthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FifteenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FifteenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FifteenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.FifteenthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.FifteenthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the FifthTypeID list.
        Protected Overridable Sub PopulateFifthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.FifthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.FifthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_FifthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_FifthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.FifthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FifthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FifthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FifthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.FifthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.FifthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.FifthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.FifthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FifthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FifthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FifthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.FifthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.FifthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the FirstTypeID list.
        Protected Overridable Sub PopulateFirstTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.FirstTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.FirstTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_FirstTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_FirstTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.FirstTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FirstTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FirstTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FirstTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.FirstTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.FirstTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.FirstTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.FirstTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FirstTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FirstTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FirstTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.FirstTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.FirstTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the FlowCollectionID list.
        Protected Overridable Sub PopulateFlowCollectionIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.FlowCollectionID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.FlowCollectionID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_FlowCollectionIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_FlowCollectionIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(FlowCollectionTable.CollectionName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As FlowCollectionRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = FlowCollectionTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As FlowCollectionRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.FlowCollectionIDSpecified Then
                            cvalue = itemValue.FlowCollectionID.ToString() 
                            
                        If counter < maxItems AndAlso Me.FlowCollectionID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FlowCollectionID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FlowCollectionID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FlowCollectionID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(FlowCollectionTable.CollectionName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.FlowCollectionID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.FlowCollectionID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.FlowCollectionID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.FlowCollectionID, selectedValue)Then

                ' construct a whereclause to query a record with FlowCollection.FlowCollectionID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(FlowCollectionTable.FlowCollectionID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As FlowCollectionRecord = FlowCollectionTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As FlowCollectionRecord = DirectCast(rc(0), FlowCollectionRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.FlowCollectionIDSpecified Then
                            cvalue = itemValue.FlowCollectionID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FlowCollectionID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FlowCollectionID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FlowCollectionID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(FlowCollectionTable.CollectionName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.FlowCollectionID.Items.Add(newItem)
                      SetSelectedValue(Me.FlowCollectionID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the FourteenthTypeID list.
        Protected Overridable Sub PopulateFourteenthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.FourteenthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.FourteenthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_FourteenthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_FourteenthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.FourteenthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FourteenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FourteenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FourteenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.FourteenthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.FourteenthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.FourteenthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.FourteenthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FourteenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FourteenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FourteenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.FourteenthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.FourteenthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the FourthTypeID list.
        Protected Overridable Sub PopulateFourthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.FourthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.FourthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_FourthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_FourthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.FourthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FourthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FourthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FourthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.FourthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.FourthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.FourthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.FourthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.FourthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.FourthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.FourthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.FourthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.FourthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the NinthTypeID list.
        Protected Overridable Sub PopulateNinthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.NinthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.NinthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_NinthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_NinthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.NinthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.NinthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.NinthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.NinthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.NinthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.NinthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.NinthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.NinthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.NinthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.NinthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.NinthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.NinthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.NinthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the SecondTypeID list.
        Protected Overridable Sub PopulateSecondTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.SecondTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.SecondTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_SecondTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_SecondTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.SecondTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.SecondTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.SecondTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.SecondTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.SecondTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.SecondTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.SecondTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.SecondTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.SecondTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.SecondTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.SecondTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.SecondTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.SecondTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the SeventhTypeID list.
        Protected Overridable Sub PopulateSeventhTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.SeventhTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.SeventhTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_SeventhTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_SeventhTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.SeventhTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.SeventhTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.SeventhTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.SeventhTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.SeventhTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.SeventhTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.SeventhTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.SeventhTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.SeventhTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.SeventhTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.SeventhTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.SeventhTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.SeventhTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the SixthTypeID list.
        Protected Overridable Sub PopulateSixthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.SixthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.SixthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_SixthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_SixthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.SixthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.SixthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.SixthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.SixthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.SixthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.SixthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.SixthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.SixthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.SixthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.SixthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.SixthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.SixthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.SixthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the TenthTypeID list.
        Protected Overridable Sub PopulateTenthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.TenthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.TenthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_TenthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_TenthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.TenthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.TenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.TenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.TenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.TenthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.TenthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.TenthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.TenthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.TenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.TenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.TenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.TenthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.TenthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the ThirdTypeID list.
        Protected Overridable Sub PopulateThirdTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.ThirdTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.ThirdTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ThirdTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_ThirdTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.ThirdTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.ThirdTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.ThirdTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.ThirdTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.ThirdTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.ThirdTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.ThirdTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.ThirdTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.ThirdTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.ThirdTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.ThirdTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.ThirdTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.ThirdTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the ThirteenthTypeID list.
        Protected Overridable Sub PopulateThirteenthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.ThirteenthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.ThirteenthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ThirteenthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_ThirteenthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.ThirteenthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.ThirteenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.ThirteenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.ThirteenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.ThirteenthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.ThirteenthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.ThirteenthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.ThirteenthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.ThirteenthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.ThirteenthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.ThirteenthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.ThirteenthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.ThirteenthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the TwelfthTypeID list.
        Protected Overridable Sub PopulateTwelfthTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.TwelfthTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.TwelfthTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_TwelfthTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_TwelfthTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(ListTable.ListName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As ListRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = ListTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As ListRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                            
                        If counter < maxItems AndAlso Me.TwelfthTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.TwelfthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.TwelfthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.TwelfthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.TwelfthTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.TwelfthTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.TwelfthTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.TwelfthTypeID, selectedValue)Then

                ' construct a whereclause to query a record with List.ListID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(ListTable.ListID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As ListRecord = ListTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As ListRecord = DirectCast(rc(0), ListRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.ListIDSpecified Then
                            cvalue = itemValue.ListID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = AgreementTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(AgreementTable.TwelfthTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso AgreementTable.TwelfthTypeID.IsApplyDisplayAs Then
                          fvalue = AgreementTable.GetDFKA(itemValue, AgreementTable.TwelfthTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(ListTable.ListName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.TwelfthTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.TwelfthTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' event handler for ImageButton
        Public Overridable Sub AgreementRowDeleteButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            If(Not Me.Page.IsPageRefresh) Then
        
                Dim tc As AgreementTableControl = DirectCast(GetParentControlObject(Me, "AgreementTableControl"), AgreementTableControl)
                If Not (IsNothing(tc)) Then
                    If Not Me.IsNewRecord Then
                        tc.AddToDeletedRecordIds(DirectCast(Me, AgreementTableControlRow))
                    End If
                    Me.Visible = False
                    tc.SetFormulaControls()
                End If
              
            End If
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub AgreementRowEditButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
            ' The redirect URL is set on the Properties, Custom Properties or Actions.
            ' The ModifyRedirectURL call resolves the parameters before the
            ' Response.Redirect redirects the page to the URL.  
            ' Any code after the Response.Redirect call will not be executed, since the page is
            ' redirected to the URL.
            
              
                  Dim url As String = "../Shared/ConfigureEditRecord.aspx"
                
        Dim shouldRedirect As Boolean = True
        Dim TargetKey As String = Nothing
        Dim DFKA As String = TargetKey
        Dim id As String = DFKA
        Dim value As String = id
      
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            url = Me.ModifyRedirectUrl(url, "",True)
            url = Me.Page.ModifyRedirectUrl(url, "",True)
          
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                shouldRedirect = False
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
            If shouldRedirect Then
                Me.Page.ShouldSaveControlsToSession = True
                Me.Page.Response.Redirect(url)
            ElseIf Not TargetKey Is Nothing AndAlso _
                        Not shouldRedirect Then
            Me.Page.ShouldSaveControlsToSession = True
            Me.Page.CloseWindow(True)
        
            End If              
        End Sub
        
        Protected Overridable Sub CustomID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(CustomID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(CustomID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.CustomID.Items.Add(New ListItem(displayText, val))
                Me.CustomID.SelectedIndex = Me.CustomID.Items.Count - 1
                Me.Page.Session.Remove(CustomID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(CustomID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub DocTreeParentID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(DocTreeParentID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(DocTreeParentID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.DocTreeParentID.Items.Add(New ListItem(displayText, val))
                Me.DocTreeParentID.SelectedIndex = Me.DocTreeParentID.Items.Count - 1
                Me.Page.Session.Remove(DocTreeParentID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(DocTreeParentID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub EighthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(EighthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(EighthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.EighthTypeID.Items.Add(New ListItem(displayText, val))
                Me.EighthTypeID.SelectedIndex = Me.EighthTypeID.Items.Count - 1
                Me.Page.Session.Remove(EighthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(EighthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub EleventhTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(EleventhTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(EleventhTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.EleventhTypeID.Items.Add(New ListItem(displayText, val))
                Me.EleventhTypeID.SelectedIndex = Me.EleventhTypeID.Items.Count - 1
                Me.Page.Session.Remove(EleventhTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(EleventhTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub FifteenthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(FifteenthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(FifteenthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.FifteenthTypeID.Items.Add(New ListItem(displayText, val))
                Me.FifteenthTypeID.SelectedIndex = Me.FifteenthTypeID.Items.Count - 1
                Me.Page.Session.Remove(FifteenthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(FifteenthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub FifthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(FifthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(FifthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.FifthTypeID.Items.Add(New ListItem(displayText, val))
                Me.FifthTypeID.SelectedIndex = Me.FifthTypeID.Items.Count - 1
                Me.Page.Session.Remove(FifthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(FifthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub FirstTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(FirstTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(FirstTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.FirstTypeID.Items.Add(New ListItem(displayText, val))
                Me.FirstTypeID.SelectedIndex = Me.FirstTypeID.Items.Count - 1
                Me.Page.Session.Remove(FirstTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(FirstTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub FlowCollectionID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(FlowCollectionID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(FlowCollectionID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.FlowCollectionID.Items.Add(New ListItem(displayText, val))
                Me.FlowCollectionID.SelectedIndex = Me.FlowCollectionID.Items.Count - 1
                Me.Page.Session.Remove(FlowCollectionID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(FlowCollectionID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub FourteenthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(FourteenthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(FourteenthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.FourteenthTypeID.Items.Add(New ListItem(displayText, val))
                Me.FourteenthTypeID.SelectedIndex = Me.FourteenthTypeID.Items.Count - 1
                Me.Page.Session.Remove(FourteenthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(FourteenthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub FourthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(FourthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(FourthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.FourthTypeID.Items.Add(New ListItem(displayText, val))
                Me.FourthTypeID.SelectedIndex = Me.FourthTypeID.Items.Count - 1
                Me.Page.Session.Remove(FourthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(FourthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub NinthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(NinthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(NinthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.NinthTypeID.Items.Add(New ListItem(displayText, val))
                Me.NinthTypeID.SelectedIndex = Me.NinthTypeID.Items.Count - 1
                Me.Page.Session.Remove(NinthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(NinthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub SecondTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(SecondTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(SecondTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.SecondTypeID.Items.Add(New ListItem(displayText, val))
                Me.SecondTypeID.SelectedIndex = Me.SecondTypeID.Items.Count - 1
                Me.Page.Session.Remove(SecondTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(SecondTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub SeventhTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(SeventhTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(SeventhTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.SeventhTypeID.Items.Add(New ListItem(displayText, val))
                Me.SeventhTypeID.SelectedIndex = Me.SeventhTypeID.Items.Count - 1
                Me.Page.Session.Remove(SeventhTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(SeventhTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub SixthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(SixthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(SixthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.SixthTypeID.Items.Add(New ListItem(displayText, val))
                Me.SixthTypeID.SelectedIndex = Me.SixthTypeID.Items.Count - 1
                Me.Page.Session.Remove(SixthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(SixthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub TenthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(TenthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(TenthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.TenthTypeID.Items.Add(New ListItem(displayText, val))
                Me.TenthTypeID.SelectedIndex = Me.TenthTypeID.Items.Count - 1
                Me.Page.Session.Remove(TenthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(TenthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub ThirdTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(ThirdTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(ThirdTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.ThirdTypeID.Items.Add(New ListItem(displayText, val))
                Me.ThirdTypeID.SelectedIndex = Me.ThirdTypeID.Items.Count - 1
                Me.Page.Session.Remove(ThirdTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(ThirdTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub ThirteenthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(ThirteenthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(ThirteenthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.ThirteenthTypeID.Items.Add(New ListItem(displayText, val))
                Me.ThirteenthTypeID.SelectedIndex = Me.ThirteenthTypeID.Items.Count - 1
                Me.Page.Session.Remove(ThirteenthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(ThirteenthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub TwelfthTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(TwelfthTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(TwelfthTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.TwelfthTypeID.Items.Add(New ListItem(displayText, val))
                Me.TwelfthTypeID.SelectedIndex = Me.TwelfthTypeID.Items.Count - 1
                Me.Page.Session.Remove(TwelfthTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(TwelfthTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub DocHasCustomFields_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub EighthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub EighthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub EleventhByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub EleventhByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ExecuteFromBoard_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FifteenthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FifteenthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FifthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FifthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FirstByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FirstByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FourteenthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FourteenthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FourthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub FourthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub Hide_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub InitialsInDocument_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub NinthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub NinthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub RequiredDoc_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub SecondByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub SecondByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub SeventhByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub SeventhByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ShowExpirationDate_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ShowSignatureDate_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub SixthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub SixthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub TenthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub TenthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ThirdByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ThirdByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ThirteenthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub ThirteenthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub TwelfthByCIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub TwelfthByOIX_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub UseStoredSignature_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub Agreement_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub AgreementFileName_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub CIX_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub CreatedAt_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub CreatedByID_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub Description_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocIndex_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocRank_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocSort_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub EighthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub EighthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub EleventhDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub EleventhItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FifteenthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FifteenthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FifthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FifthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FirstDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FirstItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FourteenthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FourteenthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FourthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub FourthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub NinthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub NinthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub OtherInstructions_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub RecipientInstructions_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SecondDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SecondItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SenderInstructions_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SeventhDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SeventhItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SixthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub SixthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub TenthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub TenthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub ThirdDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub ThirdItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub ThirteenthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub ThirteenthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub TwelfthDefault_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub TwelfthItem_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub UpdatedAt_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub UpdatedByID_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
   
        Private _PreviousUIData As New Hashtable
        Public Overridable Property PreviousUIData() As Hashtable
            Get
                Return _PreviousUIData
            End Get
            Set(ByVal value As Hashtable)
                _PreviousUIData = value
            End Set
        End Property   
   
        Private _IsNewRecord As Boolean = True
        Public Overridable Property IsNewRecord() As Boolean
            Get
                Return Me._IsNewRecord
            End Get
            Set(ByVal value As Boolean)
                Me._IsNewRecord = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Overridable Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal Value As Boolean)
                Me._DataChanged = Value
            End Set
        End Property

        Private _ResetData As Boolean = False
        Public Overridable Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal Value As Boolean)
                Me._ResetData = Value
            End Set
        End Property
        
        Public Property RecordUniqueId() As String
            Get
                Return CType(Me.ViewState("BaseAgreementTableControlRow_Rec"), String)
            End Get
            Set(ByVal value As String)
                Me.ViewState("BaseAgreementTableControlRow_Rec") = value
            End Set
        End Property
        
        Private _DataSource As AgreementRecord
        Public Property DataSource() As AgreementRecord     
            Get
                Return Me._DataSource
            End Get
            
            Set(ByVal value As AgreementRecord)
            
                Me._DataSource = value
            End Set
        End Property

        

        Private _checkSum As String
        Public Overridable Property CheckSum() As String
            Get
                Return Me._checkSum
            End Get
            Set(ByVal value As String)
                Me._checkSum = value
            End Set
        End Property
        
        Private _TotalPages As Integer
        Public Property TotalPages() As Integer
            Get
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property
        
        Private _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property
    
        Private _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property
        
        

#Region "Helper Properties"
        
        Public ReadOnly Property Agreement() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "Agreement"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property AgreementFile() As System.Web.UI.WebControls.FileUpload
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementFile"), System.Web.UI.WebControls.FileUpload)
            End Get
        End Property
            
        Public ReadOnly Property AgreementFileLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementFileLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property AgreementFileName() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementFileName"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property AgreementFileNameLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementFileNameLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property AgreementLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property AgreementRecordRowSelection() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementRecordRowSelection"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
        
        Public ReadOnly Property AgreementRowDeleteButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementRowDeleteButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property AgreementRowEditButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementRowEditButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property CIX() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CIX"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property CIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CreatedAt() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedAt"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property CreatedAtLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedAtLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CreatedByID() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedByID"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property CreatedByIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedByIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CustomID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CustomID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property CustomIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CustomIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property Description() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "Description"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DescriptionLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DescriptionLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocHasCustomFields() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocHasCustomFields"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property DocHasCustomFieldsLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocHasCustomFieldsLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocIndex() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocIndex"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocIndexLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocIndexLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocRank() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocRank"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocRankLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocRankLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocSort() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocSort"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocSortLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocSortLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeParentID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeParentID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property DocTreeParentIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeParentIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EighthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property EighthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EighthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property EighthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EighthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property EighthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EighthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property EighthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EighthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property EighthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EighthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EleventhByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property EleventhByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EleventhByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property EleventhByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EleventhDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property EleventhDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EleventhItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property EleventhItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property EleventhTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property EleventhTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "EleventhTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ExecuteFromBoard() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ExecuteFromBoard"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ExecuteFromBoardLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ExecuteFromBoardLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifteenthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FifteenthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifteenthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FifteenthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifteenthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FifteenthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifteenthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FifteenthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifteenthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property FifteenthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifteenthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FifthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FifthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FifthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FifthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FifthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property FifthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FifthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FirstByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FirstByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FirstByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FirstByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FirstDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FirstDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FirstItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FirstItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FirstTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property FirstTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FirstTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FlowCollectionID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FlowCollectionID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property FlowCollectionIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FlowCollectionIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourteenthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FourteenthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourteenthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FourteenthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourteenthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FourteenthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourteenthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FourteenthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourteenthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property FourteenthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourteenthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FourthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FourthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FourthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property FourthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property FourthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property FourthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FourthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property Hide() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "Hide"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property HideLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "HideLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property InitialsInDocument() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "InitialsInDocument"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property InitialsInDocumentLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "InitialsInDocumentLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property NinthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property NinthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property NinthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property NinthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property NinthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property NinthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property NinthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property NinthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property NinthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property NinthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "NinthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property OtherInstructions() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "OtherInstructions"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property OtherInstructionsLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "OtherInstructionsLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RecipientInstructions() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RecipientInstructions"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property RecipientInstructionsLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RecipientInstructionsLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RequiredDoc() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RequiredDoc"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property RequiredDocLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RequiredDocLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SecondByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property SecondByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SecondByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property SecondByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SecondDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SecondDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SecondItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SecondItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SecondTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property SecondTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SecondTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SenderInstructions() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SenderInstructions"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SenderInstructionsLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SenderInstructionsLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SeventhByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property SeventhByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SeventhByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property SeventhByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SeventhDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SeventhDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SeventhItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SeventhItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SeventhTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property SeventhTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SeventhTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ShowExpirationDate() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ShowExpirationDate"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ShowExpirationDateLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ShowExpirationDateLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ShowSignatureDate() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ShowSignatureDate"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ShowSignatureDateLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ShowSignatureDateLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SixthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property SixthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SixthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property SixthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SixthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SixthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SixthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property SixthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property SixthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property SixthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "SixthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TenthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property TenthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TenthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property TenthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TenthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property TenthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TenthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property TenthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TenthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property TenthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TenthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirdByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirdByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirdByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirdByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirdDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirdDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirdItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirdItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirdTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property ThirdTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirdTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirteenthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirteenthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirteenthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirteenthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirteenthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirteenthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirteenthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property ThirteenthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ThirteenthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property ThirteenthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ThirteenthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TwelfthByCIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthByCIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property TwelfthByCIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthByCIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TwelfthByOIX() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthByOIX"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property TwelfthByOIXLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthByOIXLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TwelfthDefault() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthDefault"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property TwelfthDefaultLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthDefaultLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TwelfthItem() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthItem"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property TwelfthItemLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthItemLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property TwelfthTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property TwelfthTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "TwelfthTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property UpdatedAt() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedAt"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property UpdatedAtLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedAtLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property UpdatedByID() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedByID"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property UpdatedByIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedByIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property UseStoredSignature() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UseStoredSignature"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property UseStoredSignatureLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UseStoredSignatureLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"

        Public Overrides Overloads Function ModifyRedirectUrl(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function

        Public Overrides Overloads Function EvaluateExpressions(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            
            Dim rec As AgreementRecord = Nothing
             
        
            Try
                rec = Me.GetRecord()
            Catch ex As Exception
                ' Do nothing
            End Try

            If rec Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                ' Localization.
                
            Throw New Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "FASTPORT"))
                    
            End If
            Return EvaluateExpressions(url, arg, rec, bEncrypt)
        End Function

         
        Public Overridable Function GetRecord() As AgreementRecord
            If Not Me.DataSource Is Nothing Then
                Return Me.DataSource
            End If
            
            If Not Me.RecordUniqueId Is Nothing Then
                
                Return AgreementTable.GetRecord(Me.RecordUniqueId, True)
                
            End If
            
            ' Localization.
            
            Return Nothing
                
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

End Class

  

' Base class for the AgreementTableControl control on the EditRole page.
' Do not modify this class. Instead override any method in AgreementTableControl.
Public Class BaseAgreementTableControl
        Inherits FASTPORT.UI.BaseApplicationTableControl

        

        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
  
      
                  
           ' Setup the filter and search events.
        
      
      
            ' Control Initializations.
            ' Initialize the table's current sort order.
            
            If Me.InSession(Me, "Order_By") Then
                Me.CurrentSortOrder = OrderBy.FromXmlString(Me.GetFromSession(Me, "Order_By", Nothing))
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
            
    End If

    
    
            ' Setup default pagination settings.
        
            Me.PageSize = CInt(Me.GetFromSession(Me, "Page_Size", "10"))
            Me.PageIndex = CInt(Me.GetFromSession(Me, "Page_Index", "0"))
            
        
            
            Me.ClearControlsFromSession()
        End Sub

        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
            SaveControlsToSession_Ajax()
        
              ' Show confirmation message on Click
              Me.AgreementDeleteButton.Attributes.Add("onClick", "return (confirm('" & (CType(Me.Page,BaseApplicationPage)).GetResourceValue("DeleteConfirm", "FASTPORT") & "'));")
      
            ' Setup the pagination events.
            
              AddHandler Me.AgreementPagination.FirstPage.Click, AddressOf AgreementPagination_FirstPage_Click
              
              AddHandler Me.AgreementPagination.LastPage.Click, AddressOf AgreementPagination_LastPage_Click
              
              AddHandler Me.AgreementPagination.NextPage.Click, AddressOf AgreementPagination_NextPage_Click
              
              AddHandler Me.AgreementPagination.PageSizeButton.Click, AddressOf AgreementPagination_PageSizeButton_Click
            
              AddHandler Me.AgreementPagination.PreviousPage.Click, AddressOf AgreementPagination_PreviousPage_Click
                          
        
            ' Setup the sorting events.
          
              AddHandler Me.AgreementFileNameSortLabel.Click, AddressOf AgreementFileNameSortLabel_Click
            
              AddHandler Me.AgreementSortLabel.Click, AddressOf AgreementSortLabel_Click
            
              AddHandler Me.CIXSortLabel.Click, AddressOf CIXSortLabel_Click
            
              AddHandler Me.CreatedAtSortLabel.Click, AddressOf CreatedAtSortLabel_Click
            
              AddHandler Me.CreatedByIDSortLabel.Click, AddressOf CreatedByIDSortLabel_Click
            
              AddHandler Me.CustomIDSortLabel.Click, AddressOf CustomIDSortLabel_Click
            
              AddHandler Me.DocRankSortLabel.Click, AddressOf DocRankSortLabel_Click
            
              AddHandler Me.DocTreeParentIDSortLabel.Click, AddressOf DocTreeParentIDSortLabel_Click
            
              AddHandler Me.FlowCollectionIDSortLabel.Click, AddressOf FlowCollectionIDSortLabel_Click
            
              AddHandler Me.UpdatedAtSortLabel.Click, AddressOf UpdatedAtSortLabel_Click
            
            ' Setup the button events.
          
              AddHandler Me.AgreementAddButton.Click, AddressOf AgreementAddButton_Click
              
              AddHandler Me.AgreementDeleteButton.Click, AddressOf AgreementDeleteButton_Click
              
            AddHandler Me.AgreementButtonsButton.Button.Click, AddressOf AgreementButtonsButton_Click
        
            AddHandler Me.AgreementFiltersButton.Button.Click, AddressOf AgreementFiltersButton_Click
            
        
          ' Setup events for others
            
        End Sub
        
        
        Public Overridable Sub LoadData()        
        
            ' Read data from database. Returns an array of records that can be assigned
            ' to the DataSource table control property.
            Try	
                Dim joinFilter As CompoundFilter = CreateCompoundJoinFilter()
                
                ' The WHERE clause will be empty when displaying all records in table.
                Dim wc As WhereClause = CreateWhereClause()
                If wc IsNot Nothing AndAlso Not wc.RunQuery Then
                    ' Initialize an empty array of records
                    Dim alist As New ArrayList(0)
                    Me.DataSource = DirectCast(alist.ToArray(GetType(AgreementRecord)), AgreementRecord())
                    ' Add records to the list if needed.
                    Me.AddNewRecords()
                    Me._TotalRecords = 0
                    Me._TotalPages = 0
                    Return
                End If

                ' Call OrderBy to determine the order - either use the order defined
                ' on the Query Wizard, or specified by user (by clicking on column heading)
                Dim orderBy As OrderBy = CreateOrderBy()
                
                ' Get the pagesize from the pagesize control.
                Me.GetPageSize()
                               
                If Me.DisplayLastPage Then
                    Dim totalRecords As Integer = If(Me._TotalRecords < 0, AgreementTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()), Me._TotalRecords)
                     
                      Dim totalPages As Integer = CInt(Math.Ceiling(totalRecords / Me.PageSize))
                    
                    Me.PageIndex = totalPages - 1
                End If                               
                
                ' Make sure PageIndex (current page) and PageSize are within bounds.
                If Me.PageIndex < 0 Then
                    Me.PageIndex = 0
                End If
                If Me.PageSize < 1 Then
                    Me.PageSize = 1
                End If
                
                ' Retrieve the records and set the table DataSource.
                ' Only PageSize records are fetched starting at PageIndex (zero based).
                If Me.AddNewRecord > 0 Then
                ' Make sure to preserve the previously entered data on new rows.
                    Dim postdata As New ArrayList
                    For Each rc As AgreementTableControlRow In Me.GetRecordControls()
                        If Not rc.IsNewRecord Then
                            rc.DataSource = rc.GetRecord()
                            rc.GetUIData()
                            postdata.Add(rc.DataSource)
                            UIData.Add(rc.PreservedUIData())							
                        End If
                    Next
                    Me.DataSource = DirectCast(postdata.ToArray(GetType(AgreementRecord)), AgreementRecord())
                Else  ' Get the records from the database	
                        Me.DataSource = AgreementTable.GetRecords(joinFilter, wc, orderBy, Me.PageIndex, Me.PageSize)
                      
                End If
                
                ' if the datasource contains no records contained in database, then load the last page.
                If (DbUtils.GetCreatedRecords(Me.DataSource).Length = 0 AndAlso Not Me.DisplayLastPage) Then
                      Me.DisplayLastPage = True
                      LoadData()
                Else
                
                    ' Add any new rows desired by the user.
                    Me.AddNewRecords()
                
                ' Turn off the ToggleAll checkbox
                Me.AgreementToggleAll.Checked = False
            

                    ' Initialize the page and grand totals. now
                
                End If
    
            Catch ex As Exception
                ' Report the error message to the end user
                Dim msg As String = ex.Message
                If ex.InnerException IsNot Nothing Then
                    msg = msg & " InnerException: " & ex.InnerException.Message
                End If
                Throw New Exception(msg, ex.InnerException)
            End Try
        End Sub
        
        
        
    
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record for each row in the table.  To do this, it calls the
            ' DataBind for each of the rows.
            ' DataBind also populates any filters above the table, and sets the pagination
            ' control to the correct number of records and the current page number.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
                Return
            End If
            
            'LoadData for DataSource for chart and report if they exist
          
          ' Improve performance by prefetching display as records.
          Me.PreFetchForeignKeyValues()
             
            ' Setup the pagination controls.
            BindPaginationControls()

      
        
          ' Bind the repeater with the list of records to expand the UI.
          Dim rep As System.Web.UI.WebControls.Repeater = CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementTableControlRepeater"), System.Web.UI.WebControls.Repeater)
          If rep Is Nothing Then Return
          rep.DataSource = DataSource()
          rep.DataBind()

          Dim index As Integer = 0
          For Each repItem As System.Web.UI.WebControls.RepeaterItem In rep.Items
          ' Loop through all rows in the table, set its DataSource and call DataBind().
          Dim recControl As AgreementTableControlRow = DirectCast(repItem.FindControl("AgreementTableControlRow"), AgreementTableControlRow)
          recControl.DataSource = Me.DataSource(index)
          If Me.UIData.Count > index Then
          recControl.PreviousUIData = Me.UIData(index)
          End If
          recControl.DataBind()
            recControl.Visible = Not Me.InDeletedRecordIds(recControl)
          
          index += 1
          Next
        
    
           
                
            ' Call the Set methods for each controls on the panel
        
                
                
                
                SetAgreementFileNameSortLabel()
                
                
                SetAgreementSortLabel()
                
                
                SetCIXSortLabel()
                SetCreatedAtSortLabel()
                SetCreatedByIDSortLabel()
                SetCustomIDSortLabel()
                SetDocRankSortLabel()
                SetDocTreeParentIDSortLabel()
                SetFlowCollectionIDSortLabel()
                SetUpdatedAtSortLabel()
            ' setting the state of expand or collapse alternative rows
      
    
            ' Load data for each record and table UI control.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
                
      
            ' this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls()
      End Sub
      
        Public Overridable Sub SetFormulaControls()
            ' this method calls Set methods for the control that has special formula
        
        

    End Sub

    
          Public Sub PreFetchForeignKeyValues()
          If (IsNothing(Me.DataSource))
            Return
          End If
          
            Me.Page.PregetDfkaRecords(AgreementTable.CustomID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.DocTreeParentID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.EighthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.EleventhTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.FifteenthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.FifthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.FirstTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.FlowCollectionID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.FourteenthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.FourthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.NinthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.SecondTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.SeventhTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.SixthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.TenthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.ThirdTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.ThirteenthTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(AgreementTable.TwelfthTypeID, Me.DataSource)
          
          End Sub
        
      
        Public Overridable Sub RegisterPostback()
        
        
        End Sub

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e as FormulaEvaluator) As String
            If e Is Nothing
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()
            
            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If
            
            If includeDS
                
            End If
            
            ' All variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If
            
            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function			

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function




        Public Overridable Sub ResetControl()
                    
            Me.CurrentSortOrder.Reset()
            If (Me.InSession(Me, "Order_By")) Then
                Me.CurrentSortOrder = OrderBy.FromXmlString(Me.GetFromSession(Me, "Order_By", Nothing))
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
                
            End If
                
            Me.PageIndex = 0
        End Sub

        Protected Overridable Sub BindPaginationControls()
            ' Setup the pagination controls.

            ' Bind the pagination labels.
        
            If DbUtils.GetCreatedRecords(Me.DataSource).Length > 0 Then                      
                    
                Me.AgreementPagination.CurrentPage.Text = (Me.PageIndex + 1).ToString()
            Else
                Me.AgreementPagination.CurrentPage.Text = "0"
            End If
            Me.AgreementPagination.PageSize.Text = Me.PageSize.ToString()

            ' Bind the buttons for AgreementTableControl pagination.
        
            Me.AgreementPagination.FirstPage.Enabled = Not (Me.PageIndex = 0)
            If Me._TotalPages < 0 Then      ' if the total pages is not determined yet, enable last and next buttons
                Me.AgreementPagination.LastPage.Enabled = True
            ElseIf Me._TotalPages = 0          ' if the total pages is determined and it is 0, enable last and next buttons
                Me.AgreementPagination.LastPage.Enabled = False            
            Else                               ' if the total pages is the last page, disable last and next buttons
                Me.AgreementPagination.LastPage.Enabled = Not (Me.PageIndex = Me.TotalPages - 1)
            End If
          
            If Me._TotalPages < 0 Then      ' if the total pages is not determined yet, enable last and next buttons
                Me.AgreementPagination.NextPage.Enabled = True
            ElseIf Me._TotalPages = 0          ' if the total pages is determined and it is 0, enable last and next buttons
                Me.AgreementPagination.NextPage.Enabled = False            
            Else                               ' if the total pages is the last page, disable last and next buttons
                Me.AgreementPagination.NextPage.Enabled = Not (Me.PageIndex = Me.TotalPages - 1)
            End If
          
            Me.AgreementPagination.PreviousPage.Enabled = Not (Me.PageIndex = 0)


        End Sub

        Public Overridable Sub SaveData()
            ' Save the data from the entire table.  Calls each row's Save Data
            ' to save their data.  This function is called by the Click handler of the
            ' Save button.  The button handler should Start/Commit/End a transaction.
            
            Dim recCtl As AgreementTableControlRow
            For Each recCtl In Me.GetRecordControls()
        
                If Me.InDeletedRecordIds(recCtl) Then
                    ' Delete any pending deletes. 
                    recCtl.Delete()
                Else
                    If recCtl.Visible Then
                        recCtl.SaveData()
                    End If
                End If
          
            Next
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
          
            ' Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            For Each recCtl In Me.GetRecordControls()
                recCtl.IsNewRecord = False
            Next
    
      
            ' Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            Me.DeletedRecordIds = Nothing
      
        End Sub

        Public Overridable Function CreateCompoundJoinFilter() As CompoundFilter
            Dim jFilter As CompoundFilter = New CompoundFilter()
        
            Return jFilter

        End Function

        
          Public Overridable Function CreateOrderBy() As OrderBy
          ' The CurrentSortOrder is initialized to the sort order on the
          ' Query Wizard.  It may be modified by the Click handler for any of
          ' the column heading to sort or reverse sort by that column.
          ' You can add your own sort order, or modify it on the Query Wizard.
          Return Me.CurrentSortOrder
          End Function
      
        Public Overridable Function CreateWhereClause() As WhereClause
            'This CreateWhereClause is used for loading the data.
            AgreementTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
            
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            ' Compose the WHERE clause consiting of:
            ' 1. Static clause defined at design time.
            ' 2. User selected search criteria.
            ' 3. User selected filter criteria.

              
      Dim selectedRecordKeyValue as KeyValue = New KeyValue()
    
              Dim roleRecordControlObj As FASTPORT.UI.Controls.EditRole.RoleRecordControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "RoleRecordControl"), FASTPORT.UI.Controls.EditRole.RoleRecordControl)
              
                If (Not IsNothing(roleRecordControlObj) AndAlso Not IsNothing(roleRecordControlObj.GetRecord()) AndAlso roleRecordControlObj.GetRecord().IsCreated AndAlso Not IsNothing(roleRecordControlObj.GetRecord().RoleID))
                    wc.iAND(AgreementTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, roleRecordControlObj.GetRecord().RoleID.ToString())
                    selectedRecordKeyValue.AddElement(AgreementTable.RoleID.InternalName, roleRecordControlObj.GetRecord().RoleID.ToString())
                Else
                    wc.RunQuery = False
                    Return wc
                End If
              
      HttpContext.Current.Session("AgreementTableControlWhereClause") = selectedRecordKeyValue.ToXmlString()
    
            Dim themeButtonAgreementFiltersButton As IThemeButtonWithArrow = DirectCast(MiscUtils.FindControlRecursively(Me, "AgreementFiltersButton"), IThemeButtonWithArrow)
            If ( IsNothing(themeButtonAgreementFiltersButton) ) Then
              	themeButtonAgreementFiltersButton = DirectCast(MiscUtils.FindControlRecursively(Me, "_AgreementFiltersButton"), IThemeButtonWithArrow)
            End If

            If ( IsNothing(Me.DataSource) AndAlso Not IsNothing(themeButtonAgreementFiltersButton) AndAlso Not IsNothing(themeButtonAgreementFiltersButton.ArrowImage)) Then
                If (hasFiltersAgreementTableControl) Then
                   themeButtonAgreementFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonCheckmark.png"
                Else
                   themeButtonAgreementFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonExpandArrow.png"
                End If
            End If
           
    Return wc
    End Function

    
        Public Overridable Function CreateWhereClause(ByVal searchText as String, ByVal fromSearchControl as String, ByVal AutoTypeAheadSearch as String, ByVal AutoTypeAheadWordSeparators as String) As WhereClause
            ' This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            AgreementTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
        
          Dim hasFiltersAgreementTableControl As Boolean = False
        
          Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
        
          Dim hasFiltersDocTreeTableControl As Boolean = False
        
          Dim hasFiltersRoleRecordControl As Boolean = False
        
      ' Compose the WHERE clause consiting of:
      ' 1. Static clause defined at design time.
      ' 2. User selected search criteria.
      ' 3. User selected filter criteria.

      Dim appRelativeVirtualPath As String = CType(HttpContext.Current.Session("AppRelativeVirtualPath"), String)
      
            Dim selectedRecordInRoleRecordControl as String = DirectCast(HttpContext.Current.Session("AgreementTableControlWhereClause"), String)
            
            If Not selectedRecordInRoleRecordControl Is Nothing AndAlso KeyValue.IsXmlKey(selectedRecordInRoleRecordControl) Then
                Dim selectedRecordKeyValue as KeyValue = KeyValue.XmlToKey(selectedRecordInRoleRecordControl)
                
       If Not IsNothing(selectedRecordKeyValue) AndAlso selectedRecordKeyValue.ContainsColumn(AgreementTable.RoleID) Then
            wc.iAND(AgreementTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(AgreementTable.RoleID).ToString())
       End If
      
            End If
          
            ' Adds clauses if values are selected in Filter controls which are configured in the page.
          
            Dim themeButtonAgreementFiltersButton As IThemeButtonWithArrow = DirectCast(MiscUtils.FindControlRecursively(Me, "AgreementFiltersButton"), IThemeButtonWithArrow)

    
            If ( IsNothing(Me.DataSource) AndAlso Not IsNothing(themeButtonAgreementFiltersButton) AndAlso Not IsNothing(themeButtonAgreementFiltersButton.ArrowImage)) Then
                If (hasFiltersAgreementTableControl) Then
                   themeButtonAgreementFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonCheckmark.png"
                Else
                   themeButtonAgreementFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonExpandArrow.png"
                End If
            End If
    
      
            Return wc
        End Function
          
          
        Public Overridable Function FormatSuggestions(ByVal prefixText As String, ByVal resultItem As String, _
                                                 ByVal columnLength As Integer, ByVal AutoTypeAheadDisplayFoundText As String, _
                                                 ByVal autoTypeAheadSearch As String, ByVal AutoTypeAheadWordSeparators As String, _
                                                 ByVal resultList As ArrayList) As Boolean
                                                 
            'Formats the resultItem and adds it to the list of suggestions.
            Dim index As Integer = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture))
            Dim itemToAdd As String = ""
            Dim isFound As Boolean = False
            Dim isAdded As Boolean = False
            ' Get the index where prfixt is at the beginning of resultItem. If not found then, index of word which begins with prefixText.
            If InvariantLCase(autoTypeAheadSearch).equals("wordsstartingwithsearchstring") And Not index = 0 Then
                ' Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                If regex1.IsMatch(resultItem) Then
                    index = regex1.Match(resultItem).Index
                    isFound = True
                End If
                ' If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                If not resultItem(index).ToString() = " " Then
                    ' Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    Dim regex As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    If regex.IsMatch(resultItem) Then
                        index = regex.Match(resultItem).Index
                        isFound = True
                    End If
                 End If
            End If
            
            ' If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            ' beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            If index = 0 Or isFound Or InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") then
                If InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atbeginningofmatchedstring") Then
                    ' Expression to find beginning of the word which contains prefixText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    '  Find the beginning of the word which contains prefexText
                    If (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") AndAlso regex1.IsMatch(resultItem)) Then
                        index = regex1.Match(resultItem).Index
                        isFound = True
                    End If
                    ' Display string from the index till end of the string if sub string from index till end is less than columnLength value.
                    If Len(resultItem) - index <= columnLength Then
                        If index = 0 Then 
                            itemToAdd = resultItem 
                        Else
                            itemToAdd = "..." & resultItem.Substring(index, Len(resultItem) - index) 
                        End If
                    Else
                        If index = 0 Then
                            itemToAdd = resultItem.Substring(index, (columnLength - 3)) & "..."
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index , columnLength - 6) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("inmiddleofmatchedstring") Then
                    Dim subStringBeginIndex As Integer = CType(columnLength/2, Integer)
                    If Len(resultItem) <= columnLength Then
                        itemToAdd = resultItem
                    Else
                        ' Sanity check at end of the string
                        If index + Len(prefixText) = columnLength Then
                            itemToAdd =  "..." & resultItem.Substring(index-columnLength,index)
                        ElseIf Len(resultItem) - index < subStringBeginIndex Then 
                            ' Display string from the end till columnLength value if, index is closer to the end of the string.
                            itemToAdd =  "..." & resultItem.Substring(Len(resultItem)-columnLength,Len(resultItem))
                        ElseIf index <= subStringBeginIndex Then 
                            ' Sanity chet at beginning of the string
                            itemToAdd =  resultItem.Substring(0, columnLength) & "..."
                        Else
                            ' Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd =  "..." & resultItem.Substring(index - subStringBeginIndex, columnLength) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atendofmatchedstring") Then
                     ' Expression to find ending of the word which contains prefexText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    ' Find the ending of the word which contains prefexText
                    If regex1.IsMatch(resultItem, index + 1) Then
                        index = regex1.Match(resultItem, index + 1).Index
                    Else
                        ' If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length
                    End If
                    If index > Len(resultItem) Then
                        index = Len(resultItem)
                    End If
                    ' If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    If  index <= columnLength Then
                        if index = Len(resultItem) Then   'Make decision to append "..."
                            itemToAdd = resultItem.Substring(0,index)
                        Else
                            itemToAdd = resultItem.Substring(0,index) & "..."
                        End If
                    Else
                        If index = Len(resultItem) Then
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 3), (columnLength - 3))
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 6), columnLength - 6) & "..." 
                        End If
                    End If
                End If
                
                ' Remove newline character from itemToAdd
                Dim prefixTextIndex As Integer = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase)
                ' If itemToAdd contains any newline after the search text then show text only till newline
                Dim regex2 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                Dim newLineIndexAfterPrefix As Integer = -1
                If regex2.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexAfterPrefix > -1) Then
                    If itemToAdd.EndsWith("...") Then
                        itemToAdd = (itemToAdd.Substring(0, newLineIndexAfterPrefix) + "...")
                    Else
                        itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix)
                    End If
                End If
                ' If itemToAdd contains any newline before search text then show text which comes after newline
                Dim regex3 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", (System.Text.RegularExpressions.RegexOptions.IgnoreCase Or System.Text.RegularExpressions.RegexOptions.RightToLeft))
                Dim newLineIndexBeforePrefix As Integer = -1
                If regex3.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexBeforePrefix > -1) Then
                    If itemToAdd.StartsWith("...") Then
                        itemToAdd = ("..." + itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length)))
                    Else
                        itemToAdd = itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length))
                    End If
                End If

                If Not itemToAdd is nothing AndAlso Not resultList.Contains(itemToAdd) Then
                    
                    resultList.Add(itemToAdd)
          				
                    isAdded = true
                End If
            End If
            Return isAdded
        End Function
        
    
        Protected Overridable Sub GetPageSize()
        
            If Me.AgreementPagination.PageSize.Text.Trim <> "" Then
                Try
                    'Me.PageSize = Integer.Parse(Me.AgreementPagination.PageSize.Text)
                Catch ex As Exception
                End Try
            End If
        End Sub

        Protected Overridable Sub AddNewRecords()
            
            Dim newRecordList As ArrayList = New ArrayList()
          
    Dim newUIDataList As System.Collections.Generic.List(Of Hashtable) = New System.Collections.Generic.List(Of Hashtable)()

    ' Loop though all the record controls and if the record control
    ' does not have a unique record id set, then create a record
    ' and add to the list.
    If Not Me.ResetData Then
    Dim rep As System.Web.UI.WebControls.Repeater = CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementTableControlRepeater"), System.Web.UI.WebControls.Repeater)
    If rep Is Nothing Then Return

    Dim repItem As System.Web.UI.WebControls.RepeaterItem
    For Each repItem In rep.Items
    ' Loop through all rows in the table, set its DataSource and call DataBind().
    
    Dim recControl As AgreementTableControlRow = DirectCast(repItem.FindControl("AgreementTableControlRow"), AgreementTableControlRow)

                    If recControl.Visible AndAlso recControl.IsNewRecord() Then
                    
                        Dim rec As AgreementRecord = New AgreementRecord()
        
                        If recControl.Agreement.Text <> "" Then
                            rec.Parse(recControl.Agreement.Text, AgreementTable.Agreement)
                        End If
                        If recControl.AgreementFileName.Text <> "" Then
                            rec.Parse(recControl.AgreementFileName.Text, AgreementTable.AgreementFileName)
                        End If
                        If recControl.CIX.Text <> "" Then
                            rec.Parse(recControl.CIX.Text, AgreementTable.CIX)
                        End If
                        If recControl.CreatedAt.Text <> "" Then
                            rec.Parse(recControl.CreatedAt.Text, AgreementTable.CreatedAt)
                        End If
                        If recControl.CreatedByID.Text <> "" Then
                            rec.Parse(recControl.CreatedByID.Text, AgreementTable.CreatedByID)
                        End If
                        If MiscUtils.IsValueSelected(recControl.CustomID) Then
                            rec.Parse(recControl.CustomID.SelectedItem.Value, AgreementTable.CustomID)
                        End If
                        If recControl.Description.Text <> "" Then
                            rec.Parse(recControl.Description.Text, AgreementTable.Description)
                        End If
                        rec.DocHasCustomFields = recControl.DocHasCustomFields.Checked
                
                        If recControl.DocIndex.Text <> "" Then
                            rec.Parse(recControl.DocIndex.Text, AgreementTable.DocIndex)
                        End If
                        If recControl.DocRank.Text <> "" Then
                            rec.Parse(recControl.DocRank.Text, AgreementTable.DocRank)
                        End If
                        If recControl.DocSort.Text <> "" Then
                            rec.Parse(recControl.DocSort.Text, AgreementTable.DocSort)
                        End If
                        If MiscUtils.IsValueSelected(recControl.DocTreeParentID) Then
                            rec.Parse(recControl.DocTreeParentID.SelectedItem.Value, AgreementTable.DocTreeParentID)
                        End If
                        rec.EighthByCIX = recControl.EighthByCIX.Checked
                
                        rec.EighthByOIX = recControl.EighthByOIX.Checked
                
                        If recControl.EighthDefault.Text <> "" Then
                            rec.Parse(recControl.EighthDefault.Text, AgreementTable.EighthDefault)
                        End If
                        If recControl.EighthItem.Text <> "" Then
                            rec.Parse(recControl.EighthItem.Text, AgreementTable.EighthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.EighthTypeID) Then
                            rec.Parse(recControl.EighthTypeID.SelectedItem.Value, AgreementTable.EighthTypeID)
                        End If
                        rec.EleventhByCIX = recControl.EleventhByCIX.Checked
                
                        rec.EleventhByOIX = recControl.EleventhByOIX.Checked
                
                        If recControl.EleventhDefault.Text <> "" Then
                            rec.Parse(recControl.EleventhDefault.Text, AgreementTable.EleventhDefault)
                        End If
                        If recControl.EleventhItem.Text <> "" Then
                            rec.Parse(recControl.EleventhItem.Text, AgreementTable.EleventhItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.EleventhTypeID) Then
                            rec.Parse(recControl.EleventhTypeID.SelectedItem.Value, AgreementTable.EleventhTypeID)
                        End If
                        rec.ExecuteFromBoard = recControl.ExecuteFromBoard.Checked
                
                        rec.FifteenthByCIX = recControl.FifteenthByCIX.Checked
                
                        rec.FifteenthByOIX = recControl.FifteenthByOIX.Checked
                
                        If recControl.FifteenthDefault.Text <> "" Then
                            rec.Parse(recControl.FifteenthDefault.Text, AgreementTable.FifteenthDefault)
                        End If
                        If recControl.FifteenthItem.Text <> "" Then
                            rec.Parse(recControl.FifteenthItem.Text, AgreementTable.FifteenthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.FifteenthTypeID) Then
                            rec.Parse(recControl.FifteenthTypeID.SelectedItem.Value, AgreementTable.FifteenthTypeID)
                        End If
                        rec.FifthByCIX = recControl.FifthByCIX.Checked
                
                        rec.FifthByOIX = recControl.FifthByOIX.Checked
                
                        If recControl.FifthDefault.Text <> "" Then
                            rec.Parse(recControl.FifthDefault.Text, AgreementTable.FifthDefault)
                        End If
                        If recControl.FifthItem.Text <> "" Then
                            rec.Parse(recControl.FifthItem.Text, AgreementTable.FifthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.FifthTypeID) Then
                            rec.Parse(recControl.FifthTypeID.SelectedItem.Value, AgreementTable.FifthTypeID)
                        End If
                        rec.FirstByCIX = recControl.FirstByCIX.Checked
                
                        rec.FirstByOIX = recControl.FirstByOIX.Checked
                
                        If recControl.FirstDefault.Text <> "" Then
                            rec.Parse(recControl.FirstDefault.Text, AgreementTable.FirstDefault)
                        End If
                        If recControl.FirstItem.Text <> "" Then
                            rec.Parse(recControl.FirstItem.Text, AgreementTable.FirstItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.FirstTypeID) Then
                            rec.Parse(recControl.FirstTypeID.SelectedItem.Value, AgreementTable.FirstTypeID)
                        End If
                        If MiscUtils.IsValueSelected(recControl.FlowCollectionID) Then
                            rec.Parse(recControl.FlowCollectionID.SelectedItem.Value, AgreementTable.FlowCollectionID)
                        End If
                        rec.FourteenthByCIX = recControl.FourteenthByCIX.Checked
                
                        rec.FourteenthByOIX = recControl.FourteenthByOIX.Checked
                
                        If recControl.FourteenthDefault.Text <> "" Then
                            rec.Parse(recControl.FourteenthDefault.Text, AgreementTable.FourteenthDefault)
                        End If
                        If recControl.FourteenthItem.Text <> "" Then
                            rec.Parse(recControl.FourteenthItem.Text, AgreementTable.FourteenthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.FourteenthTypeID) Then
                            rec.Parse(recControl.FourteenthTypeID.SelectedItem.Value, AgreementTable.FourteenthTypeID)
                        End If
                        rec.FourthByCIX = recControl.FourthByCIX.Checked
                
                        rec.FourthByOIX = recControl.FourthByOIX.Checked
                
                        If recControl.FourthDefault.Text <> "" Then
                            rec.Parse(recControl.FourthDefault.Text, AgreementTable.FourthDefault)
                        End If
                        If recControl.FourthItem.Text <> "" Then
                            rec.Parse(recControl.FourthItem.Text, AgreementTable.FourthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.FourthTypeID) Then
                            rec.Parse(recControl.FourthTypeID.SelectedItem.Value, AgreementTable.FourthTypeID)
                        End If
                        rec.Hide = recControl.Hide.Checked
                
                        rec.InitialsInDocument = recControl.InitialsInDocument.Checked
                
                        rec.NinthByCIX = recControl.NinthByCIX.Checked
                
                        rec.NinthByOIX = recControl.NinthByOIX.Checked
                
                        If recControl.NinthDefault.Text <> "" Then
                            rec.Parse(recControl.NinthDefault.Text, AgreementTable.NinthDefault)
                        End If
                        If recControl.NinthItem.Text <> "" Then
                            rec.Parse(recControl.NinthItem.Text, AgreementTable.NinthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.NinthTypeID) Then
                            rec.Parse(recControl.NinthTypeID.SelectedItem.Value, AgreementTable.NinthTypeID)
                        End If
                        If recControl.OtherInstructions.Text <> "" Then
                            rec.Parse(recControl.OtherInstructions.Text, AgreementTable.OtherInstructions)
                        End If
                        If recControl.RecipientInstructions.Text <> "" Then
                            rec.Parse(recControl.RecipientInstructions.Text, AgreementTable.RecipientInstructions)
                        End If
                        rec.RequiredDoc = recControl.RequiredDoc.Checked
                
                        rec.SecondByCIX = recControl.SecondByCIX.Checked
                
                        rec.SecondByOIX = recControl.SecondByOIX.Checked
                
                        If recControl.SecondDefault.Text <> "" Then
                            rec.Parse(recControl.SecondDefault.Text, AgreementTable.SecondDefault)
                        End If
                        If recControl.SecondItem.Text <> "" Then
                            rec.Parse(recControl.SecondItem.Text, AgreementTable.SecondItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.SecondTypeID) Then
                            rec.Parse(recControl.SecondTypeID.SelectedItem.Value, AgreementTable.SecondTypeID)
                        End If
                        If recControl.SenderInstructions.Text <> "" Then
                            rec.Parse(recControl.SenderInstructions.Text, AgreementTable.SenderInstructions)
                        End If
                        rec.SeventhByCIX = recControl.SeventhByCIX.Checked
                
                        rec.SeventhByOIX = recControl.SeventhByOIX.Checked
                
                        If recControl.SeventhDefault.Text <> "" Then
                            rec.Parse(recControl.SeventhDefault.Text, AgreementTable.SeventhDefault)
                        End If
                        If recControl.SeventhItem.Text <> "" Then
                            rec.Parse(recControl.SeventhItem.Text, AgreementTable.SeventhItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.SeventhTypeID) Then
                            rec.Parse(recControl.SeventhTypeID.SelectedItem.Value, AgreementTable.SeventhTypeID)
                        End If
                        rec.ShowExpirationDate = recControl.ShowExpirationDate.Checked
                
                        rec.ShowSignatureDate = recControl.ShowSignatureDate.Checked
                
                        rec.SixthByCIX = recControl.SixthByCIX.Checked
                
                        rec.SixthByOIX = recControl.SixthByOIX.Checked
                
                        If recControl.SixthDefault.Text <> "" Then
                            rec.Parse(recControl.SixthDefault.Text, AgreementTable.SixthDefault)
                        End If
                        If recControl.SixthItem.Text <> "" Then
                            rec.Parse(recControl.SixthItem.Text, AgreementTable.SixthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.SixthTypeID) Then
                            rec.Parse(recControl.SixthTypeID.SelectedItem.Value, AgreementTable.SixthTypeID)
                        End If
                        rec.TenthByCIX = recControl.TenthByCIX.Checked
                
                        rec.TenthByOIX = recControl.TenthByOIX.Checked
                
                        If recControl.TenthDefault.Text <> "" Then
                            rec.Parse(recControl.TenthDefault.Text, AgreementTable.TenthDefault)
                        End If
                        If recControl.TenthItem.Text <> "" Then
                            rec.Parse(recControl.TenthItem.Text, AgreementTable.TenthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.TenthTypeID) Then
                            rec.Parse(recControl.TenthTypeID.SelectedItem.Value, AgreementTable.TenthTypeID)
                        End If
                        rec.ThirdByCIX = recControl.ThirdByCIX.Checked
                
                        rec.ThirdByOIX = recControl.ThirdByOIX.Checked
                
                        If recControl.ThirdDefault.Text <> "" Then
                            rec.Parse(recControl.ThirdDefault.Text, AgreementTable.ThirdDefault)
                        End If
                        If recControl.ThirdItem.Text <> "" Then
                            rec.Parse(recControl.ThirdItem.Text, AgreementTable.ThirdItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.ThirdTypeID) Then
                            rec.Parse(recControl.ThirdTypeID.SelectedItem.Value, AgreementTable.ThirdTypeID)
                        End If
                        rec.ThirteenthByCIX = recControl.ThirteenthByCIX.Checked
                
                        rec.ThirteenthByOIX = recControl.ThirteenthByOIX.Checked
                
                        If recControl.ThirteenthDefault.Text <> "" Then
                            rec.Parse(recControl.ThirteenthDefault.Text, AgreementTable.ThirteenthDefault)
                        End If
                        If recControl.ThirteenthItem.Text <> "" Then
                            rec.Parse(recControl.ThirteenthItem.Text, AgreementTable.ThirteenthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.ThirteenthTypeID) Then
                            rec.Parse(recControl.ThirteenthTypeID.SelectedItem.Value, AgreementTable.ThirteenthTypeID)
                        End If
                        rec.TwelfthByCIX = recControl.TwelfthByCIX.Checked
                
                        rec.TwelfthByOIX = recControl.TwelfthByOIX.Checked
                
                        If recControl.TwelfthDefault.Text <> "" Then
                            rec.Parse(recControl.TwelfthDefault.Text, AgreementTable.TwelfthDefault)
                        End If
                        If recControl.TwelfthItem.Text <> "" Then
                            rec.Parse(recControl.TwelfthItem.Text, AgreementTable.TwelfthItem)
                        End If
                        If MiscUtils.IsValueSelected(recControl.TwelfthTypeID) Then
                            rec.Parse(recControl.TwelfthTypeID.SelectedItem.Value, AgreementTable.TwelfthTypeID)
                        End If
                        If recControl.UpdatedAt.Text <> "" Then
                            rec.Parse(recControl.UpdatedAt.Text, AgreementTable.UpdatedAt)
                        End If
                        If recControl.UpdatedByID.Text <> "" Then
                            rec.Parse(recControl.UpdatedByID.Text, AgreementTable.UpdatedByID)
                        End If
                        rec.UseStoredSignature = recControl.UseStoredSignature.Checked
                
                        newUIDataList.Add(recControl.PreservedUIData())	  
                        newRecordList.Add(rec)
                    End If
                Next
            End If
            
    
            ' Add any new record to the list.
            Dim index As Integer = 0
            For index = 1 To Me.AddNewRecord
            
                newRecordList.Insert(0, New AgreementRecord())
                newUIDataList.Insert(0, New Hashtable())				
              
            Next
            Me.AddNewRecord = 0

            ' Finally, add any new records to the DataSource.
            If newRecordList.Count > 0 Then
            
                Dim finalList As ArrayList = New ArrayList(Me.DataSource)
                finalList.InsertRange(0, newRecordList)

                Me.DataSource = DirectCast(finalList.ToArray(GetType(AgreementRecord)), AgreementRecord())
              
            End If
            
            ' Add the existing UI data to this hash table
            If newUIDataList.Count > 0 Then
                Me.UIData.InsertRange(0, newUIDataList)
            End If
            
        End Sub

        
        Public Sub AddToDeletedRecordIds(ByVal rec As AgreementTableControlRow)
            If rec.IsNewRecord() Then
                Return
            End If

            If Not Me.DeletedRecordIds Is Nothing AndAlso Me.DeletedRecordIds.Trim <> "" Then
                Me.DeletedRecordIds &= ","
            End If

            Me.DeletedRecordIds &= "[" & rec.RecordUniqueId & "]"
        End Sub

        Protected Overridable Function InDeletedRecordIds(ByVal rec As AgreementTableControlRow) As Boolean
            If Me.DeletedRecordIds Is Nothing OrElse Me.DeletedRecordIds.Trim = "" Then
                Return False
            End If

            Return Me.DeletedRecordIds.IndexOf("[" & rec.RecordUniqueId & "]") >= 0
        End Function

        Private _DeletedRecordIds As String
        Public Property DeletedRecordIds() As String
            Get
                Return Me._DeletedRecordIds
            End Get
            Set(ByVal value As String)
                Me._DeletedRecordIds = value
            End Set
        End Property
        
      
        ' Create Set, WhereClause, and Populate Methods
        
        Public Overridable Sub SetAgreementFileNameSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetAgreementSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCIXSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedAtSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedByIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCustomIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocRankSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocTreeParentIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFlowCollectionIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetUpdatedAtSortLabel()
                  
                  End Sub
                

    
    
        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction
                Me.RegisterPostback()
                
                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Dim added As Boolean = Me.AddNewRecord > 0
                    Me.LoadData()
                    Me.DataBind()
                    
                    If added Then
                        Me.SetFocusToAddedRow()
                    End If
                    
                End If
                
               
                				
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction
            End Try
        End Sub
        
        'this function sets focus to the first editable element in the new added row in the editable table	
        Protected Overridable Sub SetFocusToAddedRow()
            Dim rep As System.Web.UI.WebControls.Repeater = CType(Me.FindControl("AgreementTableControlRepeater"), System.Web.UI.WebControls.Repeater)
            If rep Is Nothing OrElse rep.Items.Count = 0 Then Return
            Dim repItem As System.Web.UI.WebControls.RepeaterItem
            For Each repItem In rep.Items  
                'Load scripts to table rows
                Me.Page.LoadFocusScripts(repItem)
                Dim recControl As AgreementTableControlRow = DirectCast(repItem.FindControl("AgreementTableControlRow"), AgreementTableControlRow)
                If recControl.IsNewRecord Then
                    For Each field As Control In recControl.Controls
                        If field.Visible AndAlso Me.Page.IsControlEditable(field, False) Then
                            'set focus on the first editable field in the new row
                            field.Focus()
                            Dim updPan As UpdatePanel = DirectCast(Me.Page.FindControlRecursively("UpdatePanel1"), UpdatePanel)
                            If Not updPan Is Nothing Then updPan.Update()
                            Return
                        End If
                    Next
                    Return
                End If
            Next
        End Sub
        
        
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()

            ' Save filter controls to values to session.
        
        
            'Save pagination state to session.
        
            
            
            ' Save table control properties to the session.
            If Not Me.CurrentSortOrder Is Nothing Then
            Me.SaveToSession(Me, "Order_By", Me.CurrentSortOrder.ToXmlString())
            End If
            
            Me.SaveToSession(Me, "Page_Index", Me.PageIndex.ToString())
            Me.SaveToSession(Me, "Page_Size", Me.PageSize.ToString())
        
            Me.SaveToSession(Me, "DeletedRecordIds", Me.DeletedRecordIds)  
        
        End Sub
        
        Protected  Sub SaveControlsToSession_Ajax()
            ' Save filter controls to values to session.
          
            HttpContext.Current.Session("AppRelativeVirtualPath") = Me.Page.AppRelativeVirtualPath
         
        End Sub
        
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

            ' Clear filter controls values from the session.
        
    
            ' Clear pagination state from session.
        


    ' Clear table properties from the session.
    Me.RemoveFromSession(Me, "Order_By")
    Me.RemoveFromSession(Me, "Page_Index")
    Me.RemoveFromSession(Me, "Page_Size")
    
            Me.RemoveFromSession(Me, "DeletedRecordIds")  
            
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)

            Dim orderByStr As String = CType(ViewState("AgreementTableControl_OrderBy"), String)
            
            If orderByStr IsNot Nothing AndAlso orderByStr.Trim <> "" Then
                Me.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr)
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
            End If
            
    Dim pageIndex As String = CType(ViewState("Page_Index"), String)
    If pageIndex IsNot Nothing Then
    Me.PageIndex = CInt(pageIndex)
    End If

    Dim pageSize As String = CType(ViewState("Page_Size"), String)
    If Not pageSize Is Nothing Then
    Me.PageSize = CInt(pageSize)
    End If

    
    
            ' Load view state for pagination control.
        
            Me.DeletedRecordIds = CType(Me.ViewState("DeletedRecordIds"), String)
        
        End Sub

        Protected Overrides Function SaveViewState() As Object
            
            If Me.CurrentSortOrder IsNot Nothing Then
                Me.ViewState("AgreementTableControl_OrderBy") = Me.CurrentSortOrder.ToXmlString()
            End If
                      
            Me.ViewState("Page_Index") = Me.PageIndex
            Me.ViewState("Page_Size") = Me.PageSize
            
            Me.ViewState("DeletedRecordIds") = Me.DeletedRecordIds
        
    
            ' Load view state for pagination control.
          
    
            Return MyBase.SaveViewState()
        End Function

        ' Generate the event handling functions for pagination events.
        
        ' event handler for ImageButton
        Public Overridable Sub AgreementPagination_FirstPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.PageIndex = 0
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub AgreementPagination_LastPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.DisplayLastPage = True
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub AgreementPagination_NextPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.PageIndex += 1
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for LinkButton
        Public Overridable Sub AgreementPagination_PageSizeButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            Me.DataChanged = True
      
            Me.PageSize = Integer.Parse(Me.AgreementPagination.PageSize.Text)
      
            Me.PageIndex = Integer.Parse(Me.AgreementPagination.CurrentPage.Text) - 1
          
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
        ' event handler for ImageButton
        Public Overridable Sub AgreementPagination_PreviousPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            If Me.PageIndex > 0 Then
                Me.PageIndex -= 1
                Me.DataChanged = True
            End If
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        

        ' Generate the event handling functions for sorting events.
        
        Public Overridable Sub AgreementFileNameSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by AgreementFileName when clicked.
              
            ' Get previous sorting state for AgreementFileName.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.AgreementFileName)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for AgreementFileName.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.AgreementFileName, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by AgreementFileName, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub AgreementSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by Agreement when clicked.
              
            ' Get previous sorting state for Agreement.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.Agreement)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for Agreement.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.Agreement, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by Agreement, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CIXSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CIX when clicked.
              
            ' Get previous sorting state for CIX.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.CIX)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CIX.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.CIX, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CIX, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CreatedAtSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CreatedAt when clicked.
              
            ' Get previous sorting state for CreatedAt.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.CreatedAt)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CreatedAt.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.CreatedAt, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CreatedAt, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CreatedByIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CreatedByID when clicked.
              
            ' Get previous sorting state for CreatedByID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.CreatedByID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CreatedByID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.CreatedByID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CreatedByID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CustomIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CustomID when clicked.
              
            ' Get previous sorting state for CustomID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.CustomID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CustomID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.CustomID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CustomID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub DocRankSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by DocRank when clicked.
              
            ' Get previous sorting state for DocRank.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.DocRank)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for DocRank.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.DocRank, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by DocRank, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub DocTreeParentIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by DocTreeParentID when clicked.
              
            ' Get previous sorting state for DocTreeParentID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.DocTreeParentID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for DocTreeParentID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.DocTreeParentID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by DocTreeParentID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub FlowCollectionIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by FlowCollectionID when clicked.
              
            ' Get previous sorting state for FlowCollectionID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.FlowCollectionID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for FlowCollectionID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.FlowCollectionID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by FlowCollectionID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub UpdatedAtSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by UpdatedAt when clicked.
              
            ' Get previous sorting state for UpdatedAt.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(AgreementTable.UpdatedAt)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for UpdatedAt.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(AgreementTable.UpdatedAt, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by UpdatedAt, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            

        ' Generate the event handling functions for button events.
        
        ' event handler for ImageButton
        Public Overridable Sub AgreementAddButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            Me.AddNewRecord = 1
            Me.DataChanged = True
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub AgreementDeleteButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            If(Not Me.Page.IsPageRefresh) Then
        
                Me.DeleteSelectedRecords(True)
                Me.SetFormulaControls()
                
          
            End If
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for Button with Layout
        Public Overridable Sub AgreementButtonsButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            'This method is initially empty to implement custom click handler.
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
        ' event handler for Button with Layout
        Public Overridable Sub AgreementFiltersButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            'This method is initially empty to implement custom click handler.
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
      

        ' Generate the event handling functions for filter and search events.
        
      
        ' Generate the event handling functions for others
        
      
        Private _UIData As New System.Collections.Generic.List(Of Hashtable)
        Public Property UIData() As System.Collections.Generic.List(Of Hashtable)
            Get
                Return Me._UIData
            End Get
            Set(ByVal value As System.Collections.Generic.List(Of Hashtable))
                Me._UIData = value
            End Set
        End Property
        
        ' pagination properties
        Protected _PageSize As Integer
        Public Property PageSize() As Integer
            Get
                Return Me._PageSize
            End Get
            Set(ByVal value As Integer)
                Me._PageSize = value
            End Set
        End Property

        Protected _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property

        Protected _TotalRecords As Integer = -1
        Public Property TotalRecords() As Integer
            Get
                If _TotalRecords < 0 
                    _TotalRecords = AgreementTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause())
                End If
                Return Me._TotalRecords
            End Get
            Set(ByVal value As Integer)
                If Me.PageSize > 0 Then
                
                    Me.TotalPages = CInt(Math.Ceiling(value / Me.PageSize))
                  
                End If
                Me._TotalRecords = value
            End Set
        End Property

        
    
        Protected _TotalPages As Integer = -1
        Public Property TotalPages() As Integer
            Get
                If _TotalPages < 0 Then
                
                    Me.TotalPages = CInt(Math.Ceiling(TotalRecords / Me.PageSize))
                  
                End If                
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property

        Protected _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal value As Boolean)
                Me._DataChanged = value
            End Set
        End Property
        
        Private _ResetData As Boolean = False
        Public Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal value As Boolean)
                Me._ResetData = value
            End Set
        End Property

        Private _AddNewRecord As Integer = 0
        Public Property AddNewRecord() As Integer
            Get
                Return Me._AddNewRecord
            End Get
            Set(ByVal value As Integer)
                Me._AddNewRecord = value
            End Set
        End Property

        
        Private _CurrentSortOrder As OrderBy = Nothing
        Public Property CurrentSortOrder() As OrderBy
            Get
                Return Me._CurrentSortOrder
            End Get
            Set(ByVal value As BaseClasses.Data.OrderBy)
                Me._CurrentSortOrder = value
            End Set
        End Property
        
        Private _DataSource() As AgreementRecord = Nothing
        Public Property DataSource() As AgreementRecord ()
            Get
                Return Me._DataSource
            End Get
            Set(ByVal value() As AgreementRecord)
                Me._DataSource = value
            End Set
        End Property
       
#Region "Helper Properties"
        
        Public ReadOnly Property AgreementAddButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementAddButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property AgreementButtonsButton() As FASTPORT.UI.IThemeButtonWithArrow
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementButtonsButton"), FASTPORT.UI.IThemeButtonWithArrow)
          End Get
          End Property
        
        Public ReadOnly Property AgreementDeleteButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementDeleteButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property AgreementFileNameSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementFileNameSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property AgreementFiltersButton() As FASTPORT.UI.IThemeButtonWithArrow
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementFiltersButton"), FASTPORT.UI.IThemeButtonWithArrow)
          End Get
          End Property
        
        Public ReadOnly Property AgreementPagination() As FASTPORT.UI.IPaginationModern
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementPagination"), FASTPORT.UI.IPaginationModern)
          End Get
          End Property
        
        Public ReadOnly Property AgreementSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property AgreementToggleAll() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AgreementToggleAll"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
        
        Public ReadOnly Property CIXSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CIXSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CreatedAtSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedAtSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CreatedByIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedByIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CustomIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CustomIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property DocRankSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocRankSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeParentIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeParentIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property FlowCollectionIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FlowCollectionIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property UpdatedAtSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedAtSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"
        
        Public Overrides Overloads Function ModifyRedirectUrl(url As String, arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function
      
        Public Overrides Overloads Function EvaluateExpressions(url As String, arg As String, ByVal bEncrypt As Boolean) As String
            Dim needToProcess As Boolean = AreAnyUrlParametersForMe(url, arg)
            If (needToProcess) Then
                Dim recCtl As AgreementTableControlRow = Me.GetSelectedRecordControl()
                If recCtl Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                    ' Localization.
                    Throw New Exception(Page.GetResourceValue("Err:NoRecSelected", "FASTPORT"))
                End If
                Dim rec As AgreementRecord = Nothing     
                If recCtl IsNot Nothing Then
                    rec = recCtl.GetRecord()
                End If
                Return EvaluateExpressions(url, arg, rec, bEncrypt)
            End If
            Return url
        End Function
          
        Public Overridable Function GetSelectedRecordIndex() As Integer
            Dim counter As Integer = 0
            Dim recControl As AgreementTableControlRow
            For Each recControl In Me.GetRecordControls()
                If recControl.AgreementRecordRowSelection.Checked Then
                    Return counter
                End If
                counter += 1
            Next
            Return -1
        End Function
        
        Public Overridable Function GetSelectedRecordControl() As AgreementTableControlRow
            Dim selectedList() As AgreementTableControlRow = Me.GetSelectedRecordControls()
            If selectedList.Length = 0 Then
                Return Nothing
            End If
            Return selectedList(0)
          
        End Function

        Public Overridable Function GetSelectedRecordControls() As AgreementTableControlRow()
        
            Dim selectedList As ArrayList = New ArrayList(25)
            Dim recControl As AgreementTableControlRow
            For Each recControl In Me.GetRecordControls()
                If recControl.AgreementRecordRowSelection IsNot Nothing AndAlso recControl.AgreementRecordRowSelection.Checked Then
                    selectedList.Add(recControl)
                End If
            Next
            Return DirectCast(selectedList.ToArray(GetType(AgreementTableControlRow)), AgreementTableControlRow())
          
        End Function

        Public Overridable Sub DeleteSelectedRecords(ByVal deferDeletion As Boolean)
            Dim recList() As AgreementTableControlRow = Me.GetSelectedRecordControls()
            If recList.Length = 0 Then
                ' Localization.
                Throw New Exception(Page.GetResourceValue("Err:NoRecSelected", "FASTPORT"))
            End If
            
            Dim recCtl As AgreementTableControlRow
            For Each recCtl In recList
                If deferDeletion Then
                    If Not recCtl.IsNewRecord Then
                
                        Me.AddToDeletedRecordIds(recCtl)
                  
                    End If
                    recCtl.Visible = False
                
                    recCtl.AgreementRecordRowSelection.Checked = False
                
                Else
                
                    recCtl.Delete()
                    
                    ' Setting the DataChanged to True results in the page being refreshed with
                    ' the most recent data from the database.  This happens in PreRender event
                    ' based on the current sort, search and filter criteria.
                    Me.DataChanged = True
                    Me.ResetData = True
                  
                End If
            Next
        End Sub

        Public Function GetRecordControls() As AgreementTableControlRow()
            Dim recList As ArrayList = New ArrayList()
            Dim rep As System.Web.UI.WebControls.Repeater = CType(Me.FindControl("AgreementTableControlRepeater"), System.Web.UI.WebControls.Repeater)
            If rep Is Nothing Then Return Nothing
            Dim repItem As System.Web.UI.WebControls.RepeaterItem

            For Each repItem In rep.Items
            
                Dim recControl As AgreementTableControlRow = DirectCast(repItem.FindControl("AgreementTableControlRow"), AgreementTableControlRow)
                recList.Add(recControl)
              
            Next

            Return DirectCast(recList.ToArray(GetType(AgreementTableControlRow)), AgreementTableControlRow())
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

    

End Class

  
' Base class for the CarrierAdContactsTableControlRow control on the EditRole page.
' Do not modify this class. Instead override any method in CarrierAdContactsTableControlRow.
Public Class BaseCarrierAdContactsTableControlRow
        Inherits FASTPORT.UI.BaseApplicationRecordControl

        '  To customize, override this method in CarrierAdContactsTableControlRow.
        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
          
            Me.ClearControlsFromSession()
        End Sub

        '  To customize, override this method in CarrierAdContactsTableControlRow.
        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
            'Call LoadFocusScripts from repeater so that onfocus attribute could be added to elements
            Me.Page.LoadFocusScripts(Me)
        
              ' Show confirmation message on Click
              Me.CarrierAdContactsRowDeleteButton.Attributes.Add("onClick", "return (confirm('" & (CType(Me.Page,BaseApplicationPage)).GetResourceValue("DeleteRecordConfirm", "FASTPORT") & "'));")
                  
        
              ' Register the event handlers.
          
              AddHandler Me.CarrierAdContactsRowDeleteButton.Click, AddressOf CarrierAdContactsRowDeleteButton_Click
              
              AddHandler Me.CarrierAdContactsRowEditButton.Click, AddressOf CarrierAdContactsRowEditButton_Click
              
              AddHandler Me.AdID.SelectedIndexChanged, AddressOf AdID_SelectedIndexChanged
            
              AddHandler Me.ContactTypeID.SelectedIndexChanged, AddressOf ContactTypeID_SelectedIndexChanged
            
              AddHandler Me.PartyID.SelectedIndexChanged, AddressOf PartyID_SelectedIndexChanged
            
    
        End Sub

        
        Public Overridable Sub LoadData()        
                
            ' Load the data from the database into the DataSource CarrierAdContacts record.
            ' It is better to make changes to functions called by LoadData such as
            ' CreateWhereClause, rather than making changes here.
    
            ' The RecordUniqueId is set the first time a record is loaded, and is
            ' used during a PostBack to load the record.
          
            If Me.RecordUniqueId IsNot Nothing AndAlso Me.RecordUniqueId.Trim <> "" Then
                Me.DataSource = CarrierAdContactsTable.GetRecord(Me.RecordUniqueId, True)
          
                Return
            End If
        
            ' Since this is a row in the table, the data for this row is loaded by the 
            ' LoadData method of the BaseCarrierAdContactsTableControl when the data for the entire
            ' table is loaded.
            
            Me.DataSource = New CarrierAdContactsRecord()
          
    
    
        End Sub

        ' Populate the UI controls using the DataSource.  To customize, override this method in CarrierAdContactsTableControlRow.
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record.  To do this, it calls the Set methods for 
            ' each of the field displayed on the webpage.  It is better to make 
            ' changes in the Set methods, rather than making changes here.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
    
                Return
            End If
            
    
            'LoadData for DataSource for chart and report if they exist
          
            ' Store the checksum. The checksum is used to
            ' ensure the record was not changed by another user.
            If Not Me.DataSource.GetCheckSumValue() Is Nothing
                Me.CheckSum = Me.DataSource.GetCheckSumValue().Value
            End If
            
      
      
            ' Call the Set methods for each controls on the panel
        
                SetAdID()
                SetAdIDLabel()
                
                
                
                SetContactTypeID()
                SetContactTypeIDLabel()
                SetPartyID()
                SetPartyIDLabel()
      
      
            Me.IsNewRecord = True
            
            If Me.DataSource.IsCreated Then
                Me.IsNewRecord = False
                
                Me.RecordUniqueId = Me.DataSource.GetID.ToXmlString()
            End If
          
            ' Now load data for each record and table child UI controls.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
            Dim shouldResetControl As Boolean = False
                  
        End Sub
        
        
        Public Overridable Sub SetAdID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.AdID.ID) Then
                If Me.PreviousUIData(Me.AdID.ID) Is Nothing
                    Me.PopulateAdIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateAdIDDropDownList(Me.PreviousUIData(Me.AdID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the AdID DropDownList on the webpage with value from the
            ' CarrierAdContacts database record.
            
            ' Me.DataSource is the CarrierAdContacts record retrieved from the database.
            ' Me.AdID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetAdID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.AdIDSpecified Then
                            
                ' If the AdID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateAdIDDropDownList(Me.DataSource.AdID.ToString(), 100)
                
            Else
                
                ' AdID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateAdIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateAdIDDropDownList(CarrierAdContactsTable.AdID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetContactTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ContactTypeID.ID) Then
                If Me.PreviousUIData(Me.ContactTypeID.ID) Is Nothing
                    Me.PopulateContactTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateContactTypeIDDropDownList(Me.PreviousUIData(Me.ContactTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the ContactTypeID DropDownList on the webpage with value from the
            ' CarrierAdContacts database record.
            
            ' Me.DataSource is the CarrierAdContacts record retrieved from the database.
            ' Me.ContactTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetContactTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ContactTypeIDSpecified Then
                            
                ' If the ContactTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateContactTypeIDDropDownList(Me.DataSource.ContactTypeID.ToString(), 100)
                
            Else
                
                ' ContactTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateContactTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateContactTypeIDDropDownList(CarrierAdContactsTable.ContactTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetPartyID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.PartyID.ID) Then
                If Me.PreviousUIData(Me.PartyID.ID) Is Nothing
                    Me.PopulatePartyIDDropDownList(Nothing, 100)
                Else
                    Me.PopulatePartyIDDropDownList(Me.PreviousUIData(Me.PartyID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the PartyID DropDownList on the webpage with value from the
            ' CarrierAdContacts database record.
            
            ' Me.DataSource is the CarrierAdContacts record retrieved from the database.
            ' Me.PartyID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetPartyID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.PartyIDSpecified Then
                            
                ' If the PartyID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulatePartyIDDropDownList(Me.DataSource.PartyID.ToString(), 100)
                
            Else
                
                ' PartyID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulatePartyIDDropDownList(Nothing, 100)
                Else
                    Me.PopulatePartyIDDropDownList(CarrierAdContactsTable.PartyID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetAdIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetContactTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetPartyIDLabel()
                  
                  End Sub
                

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e As FormulaEvaluator) As String
            If e Is Nothing Then
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()

            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If

            If includeDS
                
            End IF
            
            
            ' Other variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            If dataSourceForEvaluate Is Nothing Then

                e.DataSource = Me.DataSource

            Else
                e.DataSource = dataSourceForEvaluate
            End If

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If

            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function      
        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function


        Public Overridable Sub RegisterPostback()
        
        
        End Sub

      
        
        ' To customize, override this method in CarrierAdContactsTableControlRow.
        Public Overridable Sub SaveData()
            ' Saves the associated record in the database.
            ' SaveData calls Validate and Get methods - so it may be more appropriate to
            ' customize those methods.

            ' 1. Load the existing record from the database. Since we save the entire record, this ensures 
            ' that fields that are not displayed are also properly initialized.
            Me.LoadData()
        
            ' The checksum is used to ensure the record was not changed by another user.
            If (Not Me.DataSource Is Nothing) AndAlso (Not Me.DataSource.GetCheckSumValue Is Nothing) Then
                If Not Me.CheckSum Is Nothing AndAlso Me.CheckSum <> Me.DataSource.GetCheckSumValue.Value Then
                    Throw New Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "FASTPORT"))
                End If
            End If
        
        Dim parentCtrl As RoleRecordControl
          
          
          parentCtrl = DirectCast(Me.Page.FindControlRecursively("RoleRecordControl"), RoleRecordControl)				  
              
          If (Not IsNothing(parentCtrl) AndAlso IsNothing(parentCtrl.DataSource)) 
                ' Load the record if it is not loaded yet.
                parentCtrl.LoadData()
            End If
            If (IsNothing(parentCtrl) OrElse IsNothing(parentCtrl.DataSource)) 
                ' Get the error message from the application resource file.
                Throw New Exception(Page.GetResourceValue("Err:NoParentRecId", "FASTPORT"))
            End If
            
            Me.DataSource.RoleID = parentCtrl.DataSource.RoleID
              
            ' 2. Perform any custom validation.
            Me.Validate()

            
            ' 3. Set the values in the record with data from UI controls.
            ' This calls the Get() method for each of the user interface controls.
            Me.GetUIData()

            ' 4. Save in the database.
            ' We should not save the record if the data did not change. This
            ' will save a database hit and avoid triggering any database triggers.
             
            If Me.DataSource.IsAnyValueChanged Then
                ' Save record to database but do not commit yet.
                ' Auto generated ids are available after saving for use by child (dependent) records.
                Me.DataSource.Save()
              
                DirectCast(GetParentControlObject(Me, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl).DataChanged = True
                DirectCast(GetParentControlObject(Me, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl).ResetData = True
            End If
            
      
            ' update session or cookie by formula
                                    
      
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
            
            Me.CheckSum = ""
            ' For Master-Detail relationships, save data on the Detail table(s)
          
        End Sub

        ' To customize, override this method in CarrierAdContactsTableControlRow.
        Public Overridable Sub GetUIData()
            ' The GetUIData method retrieves the updated values from the user interface 
            ' controls into a database record in preparation for saving or updating.
            ' To do this, it calls the Get methods for each of the field displayed on 
            ' the webpage.  It is better to make changes in the Get methods, rather 
            ' than making changes here.
      
            ' Call the Get methods for each of the user interface controls.
        
            GetAdID()
            GetContactTypeID()
            GetPartyID()
        End Sub
        
        
        Public Overridable Sub GetAdID()
         
            ' Retrieve the value entered by the user on the AdID ASP:DropDownList, and
            ' save it into the AdID field in DataSource CarrierAdContacts record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.AdID), CarrierAdContactsTable.AdID)				
            
        End Sub
                
        Public Overridable Sub GetContactTypeID()
         
            ' Retrieve the value entered by the user on the ContactTypeID ASP:DropDownList, and
            ' save it into the ContactTypeID field in DataSource CarrierAdContacts record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.ContactTypeID), CarrierAdContactsTable.ContactTypeID)				
            
        End Sub
                
        Public Overridable Sub GetPartyID()
         
            ' Retrieve the value entered by the user on the PartyID ASP:DropDownList, and
            ' save it into the PartyID field in DataSource CarrierAdContacts record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.PartyID), CarrierAdContactsTable.PartyID)				
            
        End Sub
                
      
        ' To customize, override this method in CarrierAdContactsTableControlRow.
        
        Public Overridable Function CreateWhereClause() As WhereClause
        
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            Return Nothing
            
        End Function
        
    

        ' To customize, override this method in CarrierAdContactsTableControlRow.
        Public Overridable Sub Validate() 
            ' Add custom validation for any control within this panel.
            ' Example.  If you have a State ASP:Textbox control
            ' If Me.State.Text <> "CA" Then
            '    Throw New Exception("State must be CA (California).")
            ' End If

            ' The Validate method is common across all controls within
            ' this panel so you can validate multiple fields, but report
            ' one error message.
            
                
        End Sub

        Public Overridable Sub Delete()
        
            If Me.IsNewRecord() Then
                Return
            End If

            Dim pkValue As KeyValue = KeyValue.XmlToKey(Me.RecordUniqueId)
          CarrierAdContactsTable.DeleteRecord(pkValue)
          
            DirectCast(GetParentControlObject(Me, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl).DataChanged = True
            DirectCast(GetParentControlObject(Me, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl).ResetData = True
        End Sub

        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction()
                Me.RegisterPostback()

                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Me.LoadData()
                    Me.DataBind()			
                End If
                                
                						
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction()
            End Try
        End Sub
        
            
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()
        
    
            'Save pagination state to session.
          
        End Sub
        
        
    
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

        

            ' Clear pagination state from session.
        
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)
            Dim isNewRecord As String = CType(ViewState("IsNewRecord"), String)
            If Not isNewRecord Is Nothing AndAlso isNewRecord.Trim <> "" Then
                Me.IsNewRecord = Boolean.Parse(isNewRecord)
            End If
            
            Dim myCheckSum As String = CType(ViewState("CheckSum"), String)
            If Not myCheckSum Is Nothing AndAlso myCheckSum.Trim <> "" Then
                Me.CheckSum = myCheckSum
            End If
            
    
            ' Load view state for pagination control.
                 
        End Sub

        Protected Overrides Function SaveViewState() As Object
            ViewState("IsNewRecord") = Me.IsNewRecord.ToString()
            ViewState("CheckSum") = Me.CheckSum
            
    
            ' Load view state for pagination control.
                  
            Return MyBase.SaveViewState()
        End Function
        
        

        Public Overridable Function CreateWhereClause_AdIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the CarrierAd table.
            ' Examples:
            ' wc.iAND(CarrierAdTable.AdName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(CarrierAdTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_ContactTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the Tree table.
            ' Examples:
            ' wc.iAND(TreeTable.ItemName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(TreeTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_PartyIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the Party table.
            ' Examples:
            ' wc.iAND(PartyTable.Title, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(PartyTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                
        ' Fill the AdID list.
        Protected Overridable Sub PopulateAdIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.AdID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.AdID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_AdIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_AdIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(CarrierAdTable.AdName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As CarrierAdRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = CarrierAdTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As CarrierAdRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.AdIDSpecified Then
                            cvalue = itemValue.AdID.ToString() 
                            
                        If counter < maxItems AndAlso Me.AdID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = CarrierAdContactsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(CarrierAdContactsTable.AdID)
                          If _isExpandableNonCompositeForeignKey AndAlso CarrierAdContactsTable.AdID.IsApplyDisplayAs Then
                          fvalue = CarrierAdContactsTable.GetDFKA(itemValue, CarrierAdContactsTable.AdID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(CarrierAdTable.AdName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.AdID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.AdID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.AdID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.AdID, selectedValue)Then

                ' construct a whereclause to query a record with CarrierAd.AdID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(CarrierAdTable.AdID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As CarrierAdRecord = CarrierAdTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As CarrierAdRecord = DirectCast(rc(0), CarrierAdRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.AdIDSpecified Then
                            cvalue = itemValue.AdID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = CarrierAdContactsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(CarrierAdContactsTable.AdID)
                          If _isExpandableNonCompositeForeignKey AndAlso CarrierAdContactsTable.AdID.IsApplyDisplayAs Then
                          fvalue = CarrierAdContactsTable.GetDFKA(itemValue, CarrierAdContactsTable.AdID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(CarrierAdTable.AdName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.AdID.Items.Add(newItem)
                      SetSelectedValue(Me.AdID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the ContactTypeID list.
        Protected Overridable Sub PopulateContactTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.ContactTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.ContactTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ContactTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_ContactTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(TreeTable.ItemName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As TreeRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = TreeTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As TreeRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.TreeIDSpecified Then
                            cvalue = itemValue.TreeID.ToString() 
                            
                        If counter < maxItems AndAlso Me.ContactTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = CarrierAdContactsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(CarrierAdContactsTable.ContactTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso CarrierAdContactsTable.ContactTypeID.IsApplyDisplayAs Then
                          fvalue = CarrierAdContactsTable.GetDFKA(itemValue, CarrierAdContactsTable.ContactTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(TreeTable.ItemName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.ContactTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.ContactTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.ContactTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.ContactTypeID, selectedValue)Then

                ' construct a whereclause to query a record with Tree.TreeID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(TreeTable.TreeID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As TreeRecord = TreeTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As TreeRecord = DirectCast(rc(0), TreeRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.TreeIDSpecified Then
                            cvalue = itemValue.TreeID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = CarrierAdContactsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(CarrierAdContactsTable.ContactTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso CarrierAdContactsTable.ContactTypeID.IsApplyDisplayAs Then
                          fvalue = CarrierAdContactsTable.GetDFKA(itemValue, CarrierAdContactsTable.ContactTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(TreeTable.ItemName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.ContactTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.ContactTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the PartyID list.
        Protected Overridable Sub PopulatePartyIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.PartyID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.PartyID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_PartyIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_PartyIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(PartyTable.Title, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As PartyRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = PartyTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As PartyRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.PartyIDSpecified Then
                            cvalue = itemValue.PartyID.ToString() 
                            
                        If counter < maxItems AndAlso Me.PartyID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = CarrierAdContactsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(CarrierAdContactsTable.PartyID)
                          If _isExpandableNonCompositeForeignKey AndAlso CarrierAdContactsTable.PartyID.IsApplyDisplayAs Then
                          fvalue = CarrierAdContactsTable.GetDFKA(itemValue, CarrierAdContactsTable.PartyID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(PartyTable.Title)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.PartyID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.PartyID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.PartyID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.PartyID, selectedValue)Then

                ' construct a whereclause to query a record with Party.PartyID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(PartyTable.PartyID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As PartyRecord = PartyTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As PartyRecord = DirectCast(rc(0), PartyRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.PartyIDSpecified Then
                            cvalue = itemValue.PartyID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = CarrierAdContactsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(CarrierAdContactsTable.PartyID)
                          If _isExpandableNonCompositeForeignKey AndAlso CarrierAdContactsTable.PartyID.IsApplyDisplayAs Then
                          fvalue = CarrierAdContactsTable.GetDFKA(itemValue, CarrierAdContactsTable.PartyID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(PartyTable.Title)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.PartyID.Items.Add(newItem)
                      SetSelectedValue(Me.PartyID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsRowDeleteButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            If(Not Me.Page.IsPageRefresh) Then
        
                Dim tc As CarrierAdContactsTableControl = DirectCast(GetParentControlObject(Me, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl)
                If Not (IsNothing(tc)) Then
                    If Not Me.IsNewRecord Then
                        tc.AddToDeletedRecordIds(DirectCast(Me, CarrierAdContactsTableControlRow))
                    End If
                    Me.Visible = False
                    tc.SetFormulaControls()
                End If
              
            End If
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsRowEditButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
            ' The redirect URL is set on the Properties, Custom Properties or Actions.
            ' The ModifyRedirectURL call resolves the parameters before the
            ' Response.Redirect redirects the page to the URL.  
            ' Any code after the Response.Redirect call will not be executed, since the page is
            ' redirected to the URL.
            
              
                  Dim url As String = "../Shared/ConfigureEditRecord.aspx"
                
        Dim shouldRedirect As Boolean = True
        Dim TargetKey As String = Nothing
        Dim DFKA As String = TargetKey
        Dim id As String = DFKA
        Dim value As String = id
      
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            url = Me.ModifyRedirectUrl(url, "",True)
            url = Me.Page.ModifyRedirectUrl(url, "",True)
          
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                shouldRedirect = False
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
            If shouldRedirect Then
                Me.Page.ShouldSaveControlsToSession = True
                Me.Page.Response.Redirect(url)
            ElseIf Not TargetKey Is Nothing AndAlso _
                        Not shouldRedirect Then
            Me.Page.ShouldSaveControlsToSession = True
            Me.Page.CloseWindow(True)
        
            End If              
        End Sub
        
        Protected Overridable Sub AdID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(AdID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(AdID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.AdID.Items.Add(New ListItem(displayText, val))
                Me.AdID.SelectedIndex = Me.AdID.Items.Count - 1
                Me.Page.Session.Remove(AdID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(AdID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub ContactTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(ContactTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(ContactTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.ContactTypeID.Items.Add(New ListItem(displayText, val))
                Me.ContactTypeID.SelectedIndex = Me.ContactTypeID.Items.Count - 1
                Me.Page.Session.Remove(ContactTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(ContactTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub PartyID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(PartyID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(PartyID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.PartyID.Items.Add(New ListItem(displayText, val))
                Me.PartyID.SelectedIndex = Me.PartyID.Items.Count - 1
                Me.Page.Session.Remove(PartyID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(PartyID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
   
        Private _PreviousUIData As New Hashtable
        Public Overridable Property PreviousUIData() As Hashtable
            Get
                Return _PreviousUIData
            End Get
            Set(ByVal value As Hashtable)
                _PreviousUIData = value
            End Set
        End Property   
   
        Private _IsNewRecord As Boolean = True
        Public Overridable Property IsNewRecord() As Boolean
            Get
                Return Me._IsNewRecord
            End Get
            Set(ByVal value As Boolean)
                Me._IsNewRecord = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Overridable Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal Value As Boolean)
                Me._DataChanged = Value
            End Set
        End Property

        Private _ResetData As Boolean = False
        Public Overridable Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal Value As Boolean)
                Me._ResetData = Value
            End Set
        End Property
        
        Public Property RecordUniqueId() As String
            Get
                Return CType(Me.ViewState("BaseCarrierAdContactsTableControlRow_Rec"), String)
            End Get
            Set(ByVal value As String)
                Me.ViewState("BaseCarrierAdContactsTableControlRow_Rec") = value
            End Set
        End Property
        
        Private _DataSource As CarrierAdContactsRecord
        Public Property DataSource() As CarrierAdContactsRecord     
            Get
                Return Me._DataSource
            End Get
            
            Set(ByVal value As CarrierAdContactsRecord)
            
                Me._DataSource = value
            End Set
        End Property

        

        Private _checkSum As String
        Public Overridable Property CheckSum() As String
            Get
                Return Me._checkSum
            End Get
            Set(ByVal value As String)
                Me._checkSum = value
            End Set
        End Property
        
        Private _TotalPages As Integer
        Public Property TotalPages() As Integer
            Get
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property
        
        Private _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property
    
        Private _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property
        
        

#Region "Helper Properties"
        
        Public ReadOnly Property AdID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AdID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property AdIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AdIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CarrierAdContactsRecordRowSelection() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsRecordRowSelection"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
        
        Public ReadOnly Property CarrierAdContactsRowDeleteButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsRowDeleteButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property CarrierAdContactsRowEditButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsRowEditButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property ContactTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ContactTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property ContactTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ContactTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property PartyID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "PartyID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property PartyIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "PartyIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"

        Public Overrides Overloads Function ModifyRedirectUrl(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function

        Public Overrides Overloads Function EvaluateExpressions(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            
            Dim rec As CarrierAdContactsRecord = Nothing
             
        
            Try
                rec = Me.GetRecord()
            Catch ex As Exception
                ' Do nothing
            End Try

            If rec Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                ' Localization.
                
            Throw New Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "FASTPORT"))
                    
            End If
            Return EvaluateExpressions(url, arg, rec, bEncrypt)
        End Function

         
        Public Overridable Function GetRecord() As CarrierAdContactsRecord
            If Not Me.DataSource Is Nothing Then
                Return Me.DataSource
            End If
            
            If Not Me.RecordUniqueId Is Nothing Then
                
                Return CarrierAdContactsTable.GetRecord(Me.RecordUniqueId, True)
                
            End If
            
            ' Localization.
            
            Return Nothing
                
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

End Class

  

' Base class for the CarrierAdContactsTableControl control on the EditRole page.
' Do not modify this class. Instead override any method in CarrierAdContactsTableControl.
Public Class BaseCarrierAdContactsTableControl
        Inherits FASTPORT.UI.BaseApplicationTableControl

        

        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
  
      
                  
           ' Setup the filter and search events.
        
      
      
            ' Control Initializations.
            ' Initialize the table's current sort order.
            
            If Me.InSession(Me, "Order_By") Then
                Me.CurrentSortOrder = OrderBy.FromXmlString(Me.GetFromSession(Me, "Order_By", Nothing))
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
            
    End If

    
    
            ' Setup default pagination settings.
        
            Me.PageSize = CInt(Me.GetFromSession(Me, "Page_Size", "10"))
            Me.PageIndex = CInt(Me.GetFromSession(Me, "Page_Index", "0"))
            
        
            
            Me.ClearControlsFromSession()
        End Sub

        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
            SaveControlsToSession_Ajax()
        
              ' Show confirmation message on Click
              Me.CarrierAdContactsDeleteButton.Attributes.Add("onClick", "return (confirm('" & (CType(Me.Page,BaseApplicationPage)).GetResourceValue("DeleteConfirm", "FASTPORT") & "'));")
      
            ' Setup the pagination events.
            
              AddHandler Me.CarrierAdContactsPagination.FirstPage.Click, AddressOf CarrierAdContactsPagination_FirstPage_Click
              
              AddHandler Me.CarrierAdContactsPagination.LastPage.Click, AddressOf CarrierAdContactsPagination_LastPage_Click
              
              AddHandler Me.CarrierAdContactsPagination.NextPage.Click, AddressOf CarrierAdContactsPagination_NextPage_Click
              
              AddHandler Me.CarrierAdContactsPagination.PageSizeButton.Click, AddressOf CarrierAdContactsPagination_PageSizeButton_Click
            
              AddHandler Me.CarrierAdContactsPagination.PreviousPage.Click, AddressOf CarrierAdContactsPagination_PreviousPage_Click
                          
        
            ' Setup the sorting events.
          
              AddHandler Me.AdIDSortLabel.Click, AddressOf AdIDSortLabel_Click
            
              AddHandler Me.ContactTypeIDSortLabel.Click, AddressOf ContactTypeIDSortLabel_Click
            
              AddHandler Me.PartyIDSortLabel.Click, AddressOf PartyIDSortLabel_Click
            
            ' Setup the button events.
          
              AddHandler Me.CarrierAdContactsAddButton.Click, AddressOf CarrierAdContactsAddButton_Click
              
              AddHandler Me.CarrierAdContactsDeleteButton.Click, AddressOf CarrierAdContactsDeleteButton_Click
              
            AddHandler Me.CarrierAdContactsButtonsButton.Button.Click, AddressOf CarrierAdContactsButtonsButton_Click
        
            AddHandler Me.CarrierAdContactsFiltersButton.Button.Click, AddressOf CarrierAdContactsFiltersButton_Click
            
        
          ' Setup events for others
            
        End Sub
        
        
        Public Overridable Sub LoadData()        
        
            ' Read data from database. Returns an array of records that can be assigned
            ' to the DataSource table control property.
            Try	
                Dim joinFilter As CompoundFilter = CreateCompoundJoinFilter()
                
                ' The WHERE clause will be empty when displaying all records in table.
                Dim wc As WhereClause = CreateWhereClause()
                If wc IsNot Nothing AndAlso Not wc.RunQuery Then
                    ' Initialize an empty array of records
                    Dim alist As New ArrayList(0)
                    Me.DataSource = DirectCast(alist.ToArray(GetType(CarrierAdContactsRecord)), CarrierAdContactsRecord())
                    ' Add records to the list if needed.
                    Me.AddNewRecords()
                    Me._TotalRecords = 0
                    Me._TotalPages = 0
                    Return
                End If

                ' Call OrderBy to determine the order - either use the order defined
                ' on the Query Wizard, or specified by user (by clicking on column heading)
                Dim orderBy As OrderBy = CreateOrderBy()
                
                ' Get the pagesize from the pagesize control.
                Me.GetPageSize()
                               
                If Me.DisplayLastPage Then
                    Dim totalRecords As Integer = If(Me._TotalRecords < 0, CarrierAdContactsTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()), Me._TotalRecords)
                     
                      Dim totalPages As Integer = CInt(Math.Ceiling(totalRecords / Me.PageSize))
                    
                    Me.PageIndex = totalPages - 1
                End If                               
                
                ' Make sure PageIndex (current page) and PageSize are within bounds.
                If Me.PageIndex < 0 Then
                    Me.PageIndex = 0
                End If
                If Me.PageSize < 1 Then
                    Me.PageSize = 1
                End If
                
                ' Retrieve the records and set the table DataSource.
                ' Only PageSize records are fetched starting at PageIndex (zero based).
                If Me.AddNewRecord > 0 Then
                ' Make sure to preserve the previously entered data on new rows.
                    Dim postdata As New ArrayList
                    For Each rc As CarrierAdContactsTableControlRow In Me.GetRecordControls()
                        If Not rc.IsNewRecord Then
                            rc.DataSource = rc.GetRecord()
                            rc.GetUIData()
                            postdata.Add(rc.DataSource)
                            UIData.Add(rc.PreservedUIData())							
                        End If
                    Next
                    Me.DataSource = DirectCast(postdata.ToArray(GetType(CarrierAdContactsRecord)), CarrierAdContactsRecord())
                Else  ' Get the records from the database	
                        Me.DataSource = CarrierAdContactsTable.GetRecords(joinFilter, wc, orderBy, Me.PageIndex, Me.PageSize)
                      
                End If
                
                ' if the datasource contains no records contained in database, then load the last page.
                If (DbUtils.GetCreatedRecords(Me.DataSource).Length = 0 AndAlso Not Me.DisplayLastPage) Then
                      Me.DisplayLastPage = True
                      LoadData()
                Else
                
                    ' Add any new rows desired by the user.
                    Me.AddNewRecords()
                
                ' Turn off the ToggleAll checkbox
                Me.CarrierAdContactsToggleAll.Checked = False
            

                    ' Initialize the page and grand totals. now
                
                End If
    
            Catch ex As Exception
                ' Report the error message to the end user
                Dim msg As String = ex.Message
                If ex.InnerException IsNot Nothing Then
                    msg = msg & " InnerException: " & ex.InnerException.Message
                End If
                Throw New Exception(msg, ex.InnerException)
            End Try
        End Sub
        
        
        
    
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record for each row in the table.  To do this, it calls the
            ' DataBind for each of the rows.
            ' DataBind also populates any filters above the table, and sets the pagination
            ' control to the correct number of records and the current page number.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
                Return
            End If
            
            'LoadData for DataSource for chart and report if they exist
          
          ' Improve performance by prefetching display as records.
          Me.PreFetchForeignKeyValues()
             
            ' Setup the pagination controls.
            BindPaginationControls()

      
        
          ' Bind the repeater with the list of records to expand the UI.
          Dim rep As System.Web.UI.WebControls.Repeater = CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsTableControlRepeater"), System.Web.UI.WebControls.Repeater)
          If rep Is Nothing Then Return
          rep.DataSource = DataSource()
          rep.DataBind()

          Dim index As Integer = 0
          For Each repItem As System.Web.UI.WebControls.RepeaterItem In rep.Items
          ' Loop through all rows in the table, set its DataSource and call DataBind().
          Dim recControl As CarrierAdContactsTableControlRow = DirectCast(repItem.FindControl("CarrierAdContactsTableControlRow"), CarrierAdContactsTableControlRow)
          recControl.DataSource = Me.DataSource(index)
          If Me.UIData.Count > index Then
          recControl.PreviousUIData = Me.UIData(index)
          End If
          recControl.DataBind()
            recControl.Visible = Not Me.InDeletedRecordIds(recControl)
          
          index += 1
          Next
        
    
           
                
            ' Call the Set methods for each controls on the panel
        
                SetAdIDSortLabel()
                
                
                
                
                
                
                
                SetContactTypeIDSortLabel()
                SetPartyIDSortLabel()
            ' setting the state of expand or collapse alternative rows
      
    
            ' Load data for each record and table UI control.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
                
      
            ' this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls()
      End Sub
      
        Public Overridable Sub SetFormulaControls()
            ' this method calls Set methods for the control that has special formula
        
        

    End Sub

    
          Public Sub PreFetchForeignKeyValues()
          If (IsNothing(Me.DataSource))
            Return
          End If
          
            Me.Page.PregetDfkaRecords(CarrierAdContactsTable.AdID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(CarrierAdContactsTable.ContactTypeID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(CarrierAdContactsTable.PartyID, Me.DataSource)
          
          End Sub
        
      
        Public Overridable Sub RegisterPostback()
        
        
        End Sub

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e as FormulaEvaluator) As String
            If e Is Nothing
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()
            
            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If
            
            If includeDS
                
            End If
            
            ' All variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If
            
            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function			

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function




        Public Overridable Sub ResetControl()
                    
            Me.CurrentSortOrder.Reset()
            If (Me.InSession(Me, "Order_By")) Then
                Me.CurrentSortOrder = OrderBy.FromXmlString(Me.GetFromSession(Me, "Order_By", Nothing))
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
                
            End If
                
            Me.PageIndex = 0
        End Sub

        Protected Overridable Sub BindPaginationControls()
            ' Setup the pagination controls.

            ' Bind the pagination labels.
        
            If DbUtils.GetCreatedRecords(Me.DataSource).Length > 0 Then                      
                    
                Me.CarrierAdContactsPagination.CurrentPage.Text = (Me.PageIndex + 1).ToString()
            Else
                Me.CarrierAdContactsPagination.CurrentPage.Text = "0"
            End If
            Me.CarrierAdContactsPagination.PageSize.Text = Me.PageSize.ToString()

            ' Bind the buttons for CarrierAdContactsTableControl pagination.
        
            Me.CarrierAdContactsPagination.FirstPage.Enabled = Not (Me.PageIndex = 0)
            If Me._TotalPages < 0 Then      ' if the total pages is not determined yet, enable last and next buttons
                Me.CarrierAdContactsPagination.LastPage.Enabled = True
            ElseIf Me._TotalPages = 0          ' if the total pages is determined and it is 0, enable last and next buttons
                Me.CarrierAdContactsPagination.LastPage.Enabled = False            
            Else                               ' if the total pages is the last page, disable last and next buttons
                Me.CarrierAdContactsPagination.LastPage.Enabled = Not (Me.PageIndex = Me.TotalPages - 1)
            End If
          
            If Me._TotalPages < 0 Then      ' if the total pages is not determined yet, enable last and next buttons
                Me.CarrierAdContactsPagination.NextPage.Enabled = True
            ElseIf Me._TotalPages = 0          ' if the total pages is determined and it is 0, enable last and next buttons
                Me.CarrierAdContactsPagination.NextPage.Enabled = False            
            Else                               ' if the total pages is the last page, disable last and next buttons
                Me.CarrierAdContactsPagination.NextPage.Enabled = Not (Me.PageIndex = Me.TotalPages - 1)
            End If
          
            Me.CarrierAdContactsPagination.PreviousPage.Enabled = Not (Me.PageIndex = 0)


        End Sub

        Public Overridable Sub SaveData()
            ' Save the data from the entire table.  Calls each row's Save Data
            ' to save their data.  This function is called by the Click handler of the
            ' Save button.  The button handler should Start/Commit/End a transaction.
            
            Dim recCtl As CarrierAdContactsTableControlRow
            For Each recCtl In Me.GetRecordControls()
        
                If Me.InDeletedRecordIds(recCtl) Then
                    ' Delete any pending deletes. 
                    recCtl.Delete()
                Else
                    If recCtl.Visible Then
                        recCtl.SaveData()
                    End If
                End If
          
            Next
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
          
            ' Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            For Each recCtl In Me.GetRecordControls()
                recCtl.IsNewRecord = False
            Next
    
      
            ' Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            Me.DeletedRecordIds = Nothing
      
        End Sub

        Public Overridable Function CreateCompoundJoinFilter() As CompoundFilter
            Dim jFilter As CompoundFilter = New CompoundFilter()
        
            Return jFilter

        End Function

        
          Public Overridable Function CreateOrderBy() As OrderBy
          ' The CurrentSortOrder is initialized to the sort order on the
          ' Query Wizard.  It may be modified by the Click handler for any of
          ' the column heading to sort or reverse sort by that column.
          ' You can add your own sort order, or modify it on the Query Wizard.
          Return Me.CurrentSortOrder
          End Function
      
        Public Overridable Function CreateWhereClause() As WhereClause
            'This CreateWhereClause is used for loading the data.
            CarrierAdContactsTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
            
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            ' Compose the WHERE clause consiting of:
            ' 1. Static clause defined at design time.
            ' 2. User selected search criteria.
            ' 3. User selected filter criteria.

              
      Dim selectedRecordKeyValue as KeyValue = New KeyValue()
    
              Dim roleRecordControlObj As FASTPORT.UI.Controls.EditRole.RoleRecordControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "RoleRecordControl"), FASTPORT.UI.Controls.EditRole.RoleRecordControl)
              
                If (Not IsNothing(roleRecordControlObj) AndAlso Not IsNothing(roleRecordControlObj.GetRecord()) AndAlso roleRecordControlObj.GetRecord().IsCreated AndAlso Not IsNothing(roleRecordControlObj.GetRecord().RoleID))
                    wc.iAND(CarrierAdContactsTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, roleRecordControlObj.GetRecord().RoleID.ToString())
                    selectedRecordKeyValue.AddElement(CarrierAdContactsTable.RoleID.InternalName, roleRecordControlObj.GetRecord().RoleID.ToString())
                Else
                    wc.RunQuery = False
                    Return wc
                End If
              
      HttpContext.Current.Session("CarrierAdContactsTableControlWhereClause") = selectedRecordKeyValue.ToXmlString()
    
            Dim themeButtonCarrierAdContactsFiltersButton As IThemeButtonWithArrow = DirectCast(MiscUtils.FindControlRecursively(Me, "CarrierAdContactsFiltersButton"), IThemeButtonWithArrow)
            If ( IsNothing(themeButtonCarrierAdContactsFiltersButton) ) Then
              	themeButtonCarrierAdContactsFiltersButton = DirectCast(MiscUtils.FindControlRecursively(Me, "_CarrierAdContactsFiltersButton"), IThemeButtonWithArrow)
            End If

            If ( IsNothing(Me.DataSource) AndAlso Not IsNothing(themeButtonCarrierAdContactsFiltersButton) AndAlso Not IsNothing(themeButtonCarrierAdContactsFiltersButton.ArrowImage)) Then
                If (hasFiltersCarrierAdContactsTableControl) Then
                   themeButtonCarrierAdContactsFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonCheckmark.png"
                Else
                   themeButtonCarrierAdContactsFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonExpandArrow.png"
                End If
            End If
           
    Return wc
    End Function

    
        Public Overridable Function CreateWhereClause(ByVal searchText as String, ByVal fromSearchControl as String, ByVal AutoTypeAheadSearch as String, ByVal AutoTypeAheadWordSeparators as String) As WhereClause
            ' This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            CarrierAdContactsTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
        
          Dim hasFiltersAgreementTableControl As Boolean = False
        
          Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
        
          Dim hasFiltersDocTreeTableControl As Boolean = False
        
          Dim hasFiltersRoleRecordControl As Boolean = False
        
      ' Compose the WHERE clause consiting of:
      ' 1. Static clause defined at design time.
      ' 2. User selected search criteria.
      ' 3. User selected filter criteria.

      Dim appRelativeVirtualPath As String = CType(HttpContext.Current.Session("AppRelativeVirtualPath"), String)
      
            Dim selectedRecordInRoleRecordControl as String = DirectCast(HttpContext.Current.Session("CarrierAdContactsTableControlWhereClause"), String)
            
            If Not selectedRecordInRoleRecordControl Is Nothing AndAlso KeyValue.IsXmlKey(selectedRecordInRoleRecordControl) Then
                Dim selectedRecordKeyValue as KeyValue = KeyValue.XmlToKey(selectedRecordInRoleRecordControl)
                
       If Not IsNothing(selectedRecordKeyValue) AndAlso selectedRecordKeyValue.ContainsColumn(CarrierAdContactsTable.RoleID) Then
            wc.iAND(CarrierAdContactsTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(CarrierAdContactsTable.RoleID).ToString())
       End If
      
            End If
          
            ' Adds clauses if values are selected in Filter controls which are configured in the page.
          
            Dim themeButtonCarrierAdContactsFiltersButton As IThemeButtonWithArrow = DirectCast(MiscUtils.FindControlRecursively(Me, "CarrierAdContactsFiltersButton"), IThemeButtonWithArrow)

    
            If ( IsNothing(Me.DataSource) AndAlso Not IsNothing(themeButtonCarrierAdContactsFiltersButton) AndAlso Not IsNothing(themeButtonCarrierAdContactsFiltersButton.ArrowImage)) Then
                If (hasFiltersCarrierAdContactsTableControl) Then
                   themeButtonCarrierAdContactsFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonCheckmark.png"
                Else
                   themeButtonCarrierAdContactsFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonExpandArrow.png"
                End If
            End If
    
      
            Return wc
        End Function
          
          
        Public Overridable Function FormatSuggestions(ByVal prefixText As String, ByVal resultItem As String, _
                                                 ByVal columnLength As Integer, ByVal AutoTypeAheadDisplayFoundText As String, _
                                                 ByVal autoTypeAheadSearch As String, ByVal AutoTypeAheadWordSeparators As String, _
                                                 ByVal resultList As ArrayList) As Boolean
                                                 
            'Formats the resultItem and adds it to the list of suggestions.
            Dim index As Integer = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture))
            Dim itemToAdd As String = ""
            Dim isFound As Boolean = False
            Dim isAdded As Boolean = False
            ' Get the index where prfixt is at the beginning of resultItem. If not found then, index of word which begins with prefixText.
            If InvariantLCase(autoTypeAheadSearch).equals("wordsstartingwithsearchstring") And Not index = 0 Then
                ' Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                If regex1.IsMatch(resultItem) Then
                    index = regex1.Match(resultItem).Index
                    isFound = True
                End If
                ' If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                If not resultItem(index).ToString() = " " Then
                    ' Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    Dim regex As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    If regex.IsMatch(resultItem) Then
                        index = regex.Match(resultItem).Index
                        isFound = True
                    End If
                 End If
            End If
            
            ' If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            ' beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            If index = 0 Or isFound Or InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") then
                If InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atbeginningofmatchedstring") Then
                    ' Expression to find beginning of the word which contains prefixText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    '  Find the beginning of the word which contains prefexText
                    If (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") AndAlso regex1.IsMatch(resultItem)) Then
                        index = regex1.Match(resultItem).Index
                        isFound = True
                    End If
                    ' Display string from the index till end of the string if sub string from index till end is less than columnLength value.
                    If Len(resultItem) - index <= columnLength Then
                        If index = 0 Then 
                            itemToAdd = resultItem 
                        Else
                            itemToAdd = "..." & resultItem.Substring(index, Len(resultItem) - index) 
                        End If
                    Else
                        If index = 0 Then
                            itemToAdd = resultItem.Substring(index, (columnLength - 3)) & "..."
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index , columnLength - 6) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("inmiddleofmatchedstring") Then
                    Dim subStringBeginIndex As Integer = CType(columnLength/2, Integer)
                    If Len(resultItem) <= columnLength Then
                        itemToAdd = resultItem
                    Else
                        ' Sanity check at end of the string
                        If index + Len(prefixText) = columnLength Then
                            itemToAdd =  "..." & resultItem.Substring(index-columnLength,index)
                        ElseIf Len(resultItem) - index < subStringBeginIndex Then 
                            ' Display string from the end till columnLength value if, index is closer to the end of the string.
                            itemToAdd =  "..." & resultItem.Substring(Len(resultItem)-columnLength,Len(resultItem))
                        ElseIf index <= subStringBeginIndex Then 
                            ' Sanity chet at beginning of the string
                            itemToAdd =  resultItem.Substring(0, columnLength) & "..."
                        Else
                            ' Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd =  "..." & resultItem.Substring(index - subStringBeginIndex, columnLength) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atendofmatchedstring") Then
                     ' Expression to find ending of the word which contains prefexText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    ' Find the ending of the word which contains prefexText
                    If regex1.IsMatch(resultItem, index + 1) Then
                        index = regex1.Match(resultItem, index + 1).Index
                    Else
                        ' If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length
                    End If
                    If index > Len(resultItem) Then
                        index = Len(resultItem)
                    End If
                    ' If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    If  index <= columnLength Then
                        if index = Len(resultItem) Then   'Make decision to append "..."
                            itemToAdd = resultItem.Substring(0,index)
                        Else
                            itemToAdd = resultItem.Substring(0,index) & "..."
                        End If
                    Else
                        If index = Len(resultItem) Then
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 3), (columnLength - 3))
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 6), columnLength - 6) & "..." 
                        End If
                    End If
                End If
                
                ' Remove newline character from itemToAdd
                Dim prefixTextIndex As Integer = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase)
                ' If itemToAdd contains any newline after the search text then show text only till newline
                Dim regex2 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                Dim newLineIndexAfterPrefix As Integer = -1
                If regex2.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexAfterPrefix > -1) Then
                    If itemToAdd.EndsWith("...") Then
                        itemToAdd = (itemToAdd.Substring(0, newLineIndexAfterPrefix) + "...")
                    Else
                        itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix)
                    End If
                End If
                ' If itemToAdd contains any newline before search text then show text which comes after newline
                Dim regex3 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", (System.Text.RegularExpressions.RegexOptions.IgnoreCase Or System.Text.RegularExpressions.RegexOptions.RightToLeft))
                Dim newLineIndexBeforePrefix As Integer = -1
                If regex3.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexBeforePrefix > -1) Then
                    If itemToAdd.StartsWith("...") Then
                        itemToAdd = ("..." + itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length)))
                    Else
                        itemToAdd = itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length))
                    End If
                End If

                If Not itemToAdd is nothing AndAlso Not resultList.Contains(itemToAdd) Then
                    
                    resultList.Add(itemToAdd)
          				
                    isAdded = true
                End If
            End If
            Return isAdded
        End Function
        
    
        Protected Overridable Sub GetPageSize()
        
            If Me.CarrierAdContactsPagination.PageSize.Text.Trim <> "" Then
                Try
                    'Me.PageSize = Integer.Parse(Me.CarrierAdContactsPagination.PageSize.Text)
                Catch ex As Exception
                End Try
            End If
        End Sub

        Protected Overridable Sub AddNewRecords()
            
            Dim newRecordList As ArrayList = New ArrayList()
          
    Dim newUIDataList As System.Collections.Generic.List(Of Hashtable) = New System.Collections.Generic.List(Of Hashtable)()

    ' Loop though all the record controls and if the record control
    ' does not have a unique record id set, then create a record
    ' and add to the list.
    If Not Me.ResetData Then
    Dim rep As System.Web.UI.WebControls.Repeater = CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsTableControlRepeater"), System.Web.UI.WebControls.Repeater)
    If rep Is Nothing Then Return

    Dim repItem As System.Web.UI.WebControls.RepeaterItem
    For Each repItem In rep.Items
    ' Loop through all rows in the table, set its DataSource and call DataBind().
    
    Dim recControl As CarrierAdContactsTableControlRow = DirectCast(repItem.FindControl("CarrierAdContactsTableControlRow"), CarrierAdContactsTableControlRow)

                    If recControl.Visible AndAlso recControl.IsNewRecord() Then
                    
                        Dim rec As CarrierAdContactsRecord = New CarrierAdContactsRecord()
        
                        If MiscUtils.IsValueSelected(recControl.AdID) Then
                            rec.Parse(recControl.AdID.SelectedItem.Value, CarrierAdContactsTable.AdID)
                        End If
                        If MiscUtils.IsValueSelected(recControl.ContactTypeID) Then
                            rec.Parse(recControl.ContactTypeID.SelectedItem.Value, CarrierAdContactsTable.ContactTypeID)
                        End If
                        If MiscUtils.IsValueSelected(recControl.PartyID) Then
                            rec.Parse(recControl.PartyID.SelectedItem.Value, CarrierAdContactsTable.PartyID)
                        End If
                        newUIDataList.Add(recControl.PreservedUIData())	  
                        newRecordList.Add(rec)
                    End If
                Next
            End If
            
    
            ' Add any new record to the list.
            Dim index As Integer = 0
            For index = 1 To Me.AddNewRecord
            
                newRecordList.Insert(0, New CarrierAdContactsRecord())
                newUIDataList.Insert(0, New Hashtable())				
              
            Next
            Me.AddNewRecord = 0

            ' Finally, add any new records to the DataSource.
            If newRecordList.Count > 0 Then
            
                Dim finalList As ArrayList = New ArrayList(Me.DataSource)
                finalList.InsertRange(0, newRecordList)

                Me.DataSource = DirectCast(finalList.ToArray(GetType(CarrierAdContactsRecord)), CarrierAdContactsRecord())
              
            End If
            
            ' Add the existing UI data to this hash table
            If newUIDataList.Count > 0 Then
                Me.UIData.InsertRange(0, newUIDataList)
            End If
            
        End Sub

        
        Public Sub AddToDeletedRecordIds(ByVal rec As CarrierAdContactsTableControlRow)
            If rec.IsNewRecord() Then
                Return
            End If

            If Not Me.DeletedRecordIds Is Nothing AndAlso Me.DeletedRecordIds.Trim <> "" Then
                Me.DeletedRecordIds &= ","
            End If

            Me.DeletedRecordIds &= "[" & rec.RecordUniqueId & "]"
        End Sub

        Protected Overridable Function InDeletedRecordIds(ByVal rec As CarrierAdContactsTableControlRow) As Boolean
            If Me.DeletedRecordIds Is Nothing OrElse Me.DeletedRecordIds.Trim = "" Then
                Return False
            End If

            Return Me.DeletedRecordIds.IndexOf("[" & rec.RecordUniqueId & "]") >= 0
        End Function

        Private _DeletedRecordIds As String
        Public Property DeletedRecordIds() As String
            Get
                Return Me._DeletedRecordIds
            End Get
            Set(ByVal value As String)
                Me._DeletedRecordIds = value
            End Set
        End Property
        
      
        ' Create Set, WhereClause, and Populate Methods
        
        Public Overridable Sub SetAdIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetContactTypeIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetPartyIDSortLabel()
                  
                  End Sub
                

    
    
        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction
                Me.RegisterPostback()
                
                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Dim added As Boolean = Me.AddNewRecord > 0
                    Me.LoadData()
                    Me.DataBind()
                    
                    If added Then
                        Me.SetFocusToAddedRow()
                    End If
                    
                End If
                
               
                				
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction
            End Try
        End Sub
        
        'this function sets focus to the first editable element in the new added row in the editable table	
        Protected Overridable Sub SetFocusToAddedRow()
            Dim rep As System.Web.UI.WebControls.Repeater = CType(Me.FindControl("CarrierAdContactsTableControlRepeater"), System.Web.UI.WebControls.Repeater)
            If rep Is Nothing OrElse rep.Items.Count = 0 Then Return
            Dim repItem As System.Web.UI.WebControls.RepeaterItem
            For Each repItem In rep.Items  
                'Load scripts to table rows
                Me.Page.LoadFocusScripts(repItem)
                Dim recControl As CarrierAdContactsTableControlRow = DirectCast(repItem.FindControl("CarrierAdContactsTableControlRow"), CarrierAdContactsTableControlRow)
                If recControl.IsNewRecord Then
                    For Each field As Control In recControl.Controls
                        If field.Visible AndAlso Me.Page.IsControlEditable(field, False) Then
                            'set focus on the first editable field in the new row
                            field.Focus()
                            Dim updPan As UpdatePanel = DirectCast(Me.Page.FindControlRecursively("UpdatePanel1"), UpdatePanel)
                            If Not updPan Is Nothing Then updPan.Update()
                            Return
                        End If
                    Next
                    Return
                End If
            Next
        End Sub
        
        
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()

            ' Save filter controls to values to session.
        
        
            'Save pagination state to session.
        
            
            
            ' Save table control properties to the session.
            If Not Me.CurrentSortOrder Is Nothing Then
            Me.SaveToSession(Me, "Order_By", Me.CurrentSortOrder.ToXmlString())
            End If
            
            Me.SaveToSession(Me, "Page_Index", Me.PageIndex.ToString())
            Me.SaveToSession(Me, "Page_Size", Me.PageSize.ToString())
        
            Me.SaveToSession(Me, "DeletedRecordIds", Me.DeletedRecordIds)  
        
        End Sub
        
        Protected  Sub SaveControlsToSession_Ajax()
            ' Save filter controls to values to session.
          
            HttpContext.Current.Session("AppRelativeVirtualPath") = Me.Page.AppRelativeVirtualPath
         
        End Sub
        
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

            ' Clear filter controls values from the session.
        
    
            ' Clear pagination state from session.
        


    ' Clear table properties from the session.
    Me.RemoveFromSession(Me, "Order_By")
    Me.RemoveFromSession(Me, "Page_Index")
    Me.RemoveFromSession(Me, "Page_Size")
    
            Me.RemoveFromSession(Me, "DeletedRecordIds")  
            
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)

            Dim orderByStr As String = CType(ViewState("CarrierAdContactsTableControl_OrderBy"), String)
            
            If orderByStr IsNot Nothing AndAlso orderByStr.Trim <> "" Then
                Me.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr)
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
            End If
            
    Dim pageIndex As String = CType(ViewState("Page_Index"), String)
    If pageIndex IsNot Nothing Then
    Me.PageIndex = CInt(pageIndex)
    End If

    Dim pageSize As String = CType(ViewState("Page_Size"), String)
    If Not pageSize Is Nothing Then
    Me.PageSize = CInt(pageSize)
    End If

    
    
            ' Load view state for pagination control.
        
            Me.DeletedRecordIds = CType(Me.ViewState("DeletedRecordIds"), String)
        
        End Sub

        Protected Overrides Function SaveViewState() As Object
            
            If Me.CurrentSortOrder IsNot Nothing Then
                Me.ViewState("CarrierAdContactsTableControl_OrderBy") = Me.CurrentSortOrder.ToXmlString()
            End If
                      
            Me.ViewState("Page_Index") = Me.PageIndex
            Me.ViewState("Page_Size") = Me.PageSize
            
            Me.ViewState("DeletedRecordIds") = Me.DeletedRecordIds
        
    
            ' Load view state for pagination control.
          
    
            Return MyBase.SaveViewState()
        End Function

        ' Generate the event handling functions for pagination events.
        
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsPagination_FirstPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.PageIndex = 0
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsPagination_LastPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.DisplayLastPage = True
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsPagination_NextPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.PageIndex += 1
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for LinkButton
        Public Overridable Sub CarrierAdContactsPagination_PageSizeButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            Me.DataChanged = True
      
            Me.PageSize = Integer.Parse(Me.CarrierAdContactsPagination.PageSize.Text)
      
            Me.PageIndex = Integer.Parse(Me.CarrierAdContactsPagination.CurrentPage.Text) - 1
          
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsPagination_PreviousPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            If Me.PageIndex > 0 Then
                Me.PageIndex -= 1
                Me.DataChanged = True
            End If
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        

        ' Generate the event handling functions for sorting events.
        
        Public Overridable Sub AdIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by AdID when clicked.
              
            ' Get previous sorting state for AdID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(CarrierAdContactsTable.AdID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for AdID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(CarrierAdContactsTable.AdID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by AdID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub ContactTypeIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by ContactTypeID when clicked.
              
            ' Get previous sorting state for ContactTypeID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(CarrierAdContactsTable.ContactTypeID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for ContactTypeID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(CarrierAdContactsTable.ContactTypeID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by ContactTypeID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub PartyIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by PartyID when clicked.
              
            ' Get previous sorting state for PartyID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(CarrierAdContactsTable.PartyID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for PartyID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(CarrierAdContactsTable.PartyID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by PartyID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            

        ' Generate the event handling functions for button events.
        
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsAddButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            Me.AddNewRecord = 1
            Me.DataChanged = True
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub CarrierAdContactsDeleteButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            If(Not Me.Page.IsPageRefresh) Then
        
                Me.DeleteSelectedRecords(True)
                Me.SetFormulaControls()
                
          
            End If
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for Button with Layout
        Public Overridable Sub CarrierAdContactsButtonsButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            'This method is initially empty to implement custom click handler.
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
        ' event handler for Button with Layout
        Public Overridable Sub CarrierAdContactsFiltersButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            'This method is initially empty to implement custom click handler.
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
      

        ' Generate the event handling functions for filter and search events.
        
      
        ' Generate the event handling functions for others
        
      
        Private _UIData As New System.Collections.Generic.List(Of Hashtable)
        Public Property UIData() As System.Collections.Generic.List(Of Hashtable)
            Get
                Return Me._UIData
            End Get
            Set(ByVal value As System.Collections.Generic.List(Of Hashtable))
                Me._UIData = value
            End Set
        End Property
        
        ' pagination properties
        Protected _PageSize As Integer
        Public Property PageSize() As Integer
            Get
                Return Me._PageSize
            End Get
            Set(ByVal value As Integer)
                Me._PageSize = value
            End Set
        End Property

        Protected _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property

        Protected _TotalRecords As Integer = -1
        Public Property TotalRecords() As Integer
            Get
                If _TotalRecords < 0 
                    _TotalRecords = CarrierAdContactsTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause())
                End If
                Return Me._TotalRecords
            End Get
            Set(ByVal value As Integer)
                If Me.PageSize > 0 Then
                
                    Me.TotalPages = CInt(Math.Ceiling(value / Me.PageSize))
                  
                End If
                Me._TotalRecords = value
            End Set
        End Property

        
    
        Protected _TotalPages As Integer = -1
        Public Property TotalPages() As Integer
            Get
                If _TotalPages < 0 Then
                
                    Me.TotalPages = CInt(Math.Ceiling(TotalRecords / Me.PageSize))
                  
                End If                
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property

        Protected _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal value As Boolean)
                Me._DataChanged = value
            End Set
        End Property
        
        Private _ResetData As Boolean = False
        Public Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal value As Boolean)
                Me._ResetData = value
            End Set
        End Property

        Private _AddNewRecord As Integer = 0
        Public Property AddNewRecord() As Integer
            Get
                Return Me._AddNewRecord
            End Get
            Set(ByVal value As Integer)
                Me._AddNewRecord = value
            End Set
        End Property

        
        Private _CurrentSortOrder As OrderBy = Nothing
        Public Property CurrentSortOrder() As OrderBy
            Get
                Return Me._CurrentSortOrder
            End Get
            Set(ByVal value As BaseClasses.Data.OrderBy)
                Me._CurrentSortOrder = value
            End Set
        End Property
        
        Private _DataSource() As CarrierAdContactsRecord = Nothing
        Public Property DataSource() As CarrierAdContactsRecord ()
            Get
                Return Me._DataSource
            End Get
            Set(ByVal value() As CarrierAdContactsRecord)
                Me._DataSource = value
            End Set
        End Property
       
#Region "Helper Properties"
        
        Public ReadOnly Property AdIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AdIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CarrierAdContactsAddButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsAddButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property CarrierAdContactsButtonsButton() As FASTPORT.UI.IThemeButtonWithArrow
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsButtonsButton"), FASTPORT.UI.IThemeButtonWithArrow)
          End Get
          End Property
        
        Public ReadOnly Property CarrierAdContactsDeleteButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsDeleteButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property CarrierAdContactsFiltersButton() As FASTPORT.UI.IThemeButtonWithArrow
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsFiltersButton"), FASTPORT.UI.IThemeButtonWithArrow)
          End Get
          End Property
        
        Public ReadOnly Property CarrierAdContactsPagination() As FASTPORT.UI.IPaginationModern
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsPagination"), FASTPORT.UI.IPaginationModern)
          End Get
          End Property
        
        Public ReadOnly Property CarrierAdContactsToggleAll() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CarrierAdContactsToggleAll"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
        
        Public ReadOnly Property ContactTypeIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ContactTypeIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property PartyIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "PartyIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"
        
        Public Overrides Overloads Function ModifyRedirectUrl(url As String, arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function
      
        Public Overrides Overloads Function EvaluateExpressions(url As String, arg As String, ByVal bEncrypt As Boolean) As String
            Dim needToProcess As Boolean = AreAnyUrlParametersForMe(url, arg)
            If (needToProcess) Then
                Dim recCtl As CarrierAdContactsTableControlRow = Me.GetSelectedRecordControl()
                If recCtl Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                    ' Localization.
                    Throw New Exception(Page.GetResourceValue("Err:NoRecSelected", "FASTPORT"))
                End If
                Dim rec As CarrierAdContactsRecord = Nothing     
                If recCtl IsNot Nothing Then
                    rec = recCtl.GetRecord()
                End If
                Return EvaluateExpressions(url, arg, rec, bEncrypt)
            End If
            Return url
        End Function
          
        Public Overridable Function GetSelectedRecordIndex() As Integer
            Dim counter As Integer = 0
            Dim recControl As CarrierAdContactsTableControlRow
            For Each recControl In Me.GetRecordControls()
                If recControl.CarrierAdContactsRecordRowSelection.Checked Then
                    Return counter
                End If
                counter += 1
            Next
            Return -1
        End Function
        
        Public Overridable Function GetSelectedRecordControl() As CarrierAdContactsTableControlRow
            Dim selectedList() As CarrierAdContactsTableControlRow = Me.GetSelectedRecordControls()
            If selectedList.Length = 0 Then
                Return Nothing
            End If
            Return selectedList(0)
          
        End Function

        Public Overridable Function GetSelectedRecordControls() As CarrierAdContactsTableControlRow()
        
            Dim selectedList As ArrayList = New ArrayList(25)
            Dim recControl As CarrierAdContactsTableControlRow
            For Each recControl In Me.GetRecordControls()
                If recControl.CarrierAdContactsRecordRowSelection IsNot Nothing AndAlso recControl.CarrierAdContactsRecordRowSelection.Checked Then
                    selectedList.Add(recControl)
                End If
            Next
            Return DirectCast(selectedList.ToArray(GetType(CarrierAdContactsTableControlRow)), CarrierAdContactsTableControlRow())
          
        End Function

        Public Overridable Sub DeleteSelectedRecords(ByVal deferDeletion As Boolean)
            Dim recList() As CarrierAdContactsTableControlRow = Me.GetSelectedRecordControls()
            If recList.Length = 0 Then
                ' Localization.
                Throw New Exception(Page.GetResourceValue("Err:NoRecSelected", "FASTPORT"))
            End If
            
            Dim recCtl As CarrierAdContactsTableControlRow
            For Each recCtl In recList
                If deferDeletion Then
                    If Not recCtl.IsNewRecord Then
                
                        Me.AddToDeletedRecordIds(recCtl)
                  
                    End If
                    recCtl.Visible = False
                
                    recCtl.CarrierAdContactsRecordRowSelection.Checked = False
                
                Else
                
                    recCtl.Delete()
                    
                    ' Setting the DataChanged to True results in the page being refreshed with
                    ' the most recent data from the database.  This happens in PreRender event
                    ' based on the current sort, search and filter criteria.
                    Me.DataChanged = True
                    Me.ResetData = True
                  
                End If
            Next
        End Sub

        Public Function GetRecordControls() As CarrierAdContactsTableControlRow()
            Dim recList As ArrayList = New ArrayList()
            Dim rep As System.Web.UI.WebControls.Repeater = CType(Me.FindControl("CarrierAdContactsTableControlRepeater"), System.Web.UI.WebControls.Repeater)
            If rep Is Nothing Then Return Nothing
            Dim repItem As System.Web.UI.WebControls.RepeaterItem

            For Each repItem In rep.Items
            
                Dim recControl As CarrierAdContactsTableControlRow = DirectCast(repItem.FindControl("CarrierAdContactsTableControlRow"), CarrierAdContactsTableControlRow)
                recList.Add(recControl)
              
            Next

            Return DirectCast(recList.ToArray(GetType(CarrierAdContactsTableControlRow)), CarrierAdContactsTableControlRow())
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

    

End Class

  
' Base class for the DocTreeTableControlRow control on the EditRole page.
' Do not modify this class. Instead override any method in DocTreeTableControlRow.
Public Class BaseDocTreeTableControlRow
        Inherits FASTPORT.UI.BaseApplicationRecordControl

        '  To customize, override this method in DocTreeTableControlRow.
        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
          
            Me.ClearControlsFromSession()
        End Sub

        '  To customize, override this method in DocTreeTableControlRow.
        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
            'Call LoadFocusScripts from repeater so that onfocus attribute could be added to elements
            Me.Page.LoadFocusScripts(Me)
        
              ' Show confirmation message on Click
              Me.DocTreeRowDeleteButton.Attributes.Add("onClick", "return (confirm('" & (CType(Me.Page,BaseApplicationPage)).GetResourceValue("DeleteRecordConfirm", "FASTPORT") & "'));")
                  
        
              ' Register the event handlers.
          
              AddHandler Me.DocTreeRowDeleteButton.Click, AddressOf DocTreeRowDeleteButton_Click
              
              AddHandler Me.DocTreeRowEditButton.Click, AddressOf DocTreeRowEditButton_Click
              
              AddHandler Me.DocTreeParentID1.SelectedIndexChanged, AddressOf DocTreeParentID1_SelectedIndexChanged
            
              AddHandler Me.DocTypeID.SelectedIndexChanged, AddressOf DocTypeID_SelectedIndexChanged
            
              AddHandler Me.AlwaysShow.CheckedChanged, AddressOf AlwaysShow_CheckedChanged
            
              AddHandler Me.Folder.CheckedChanged, AddressOf Folder_CheckedChanged
            
              AddHandler Me.Hide1.CheckedChanged, AddressOf Hide1_CheckedChanged
            
              AddHandler Me.OnApp.CheckedChanged, AddressOf OnApp_CheckedChanged
            
              AddHandler Me.OneActiveCopy.CheckedChanged, AddressOf OneActiveCopy_CheckedChanged
            
              AddHandler Me.PrivateFolder.CheckedChanged, AddressOf PrivateFolder_CheckedChanged
            
              AddHandler Me.RecordDocDetails.CheckedChanged, AddressOf RecordDocDetails_CheckedChanged
            
              AddHandler Me.CIX1.TextChanged, AddressOf CIX1_TextChanged
            
              AddHandler Me.CreatedAt1.TextChanged, AddressOf CreatedAt1_TextChanged
            
              AddHandler Me.CreatedByID1.TextChanged, AddressOf CreatedByID1_TextChanged
            
              AddHandler Me.DocDescription.TextChanged, AddressOf DocDescription_TextChanged
            
              AddHandler Me.DocIndex1.TextChanged, AddressOf DocIndex1_TextChanged
            
              AddHandler Me.DocName.TextChanged, AddressOf DocName_TextChanged
            
              AddHandler Me.DocSort1.TextChanged, AddressOf DocSort1_TextChanged
            
              AddHandler Me.ItemRank.TextChanged, AddressOf ItemRank_TextChanged
            
              AddHandler Me.UpdatedAt1.TextChanged, AddressOf UpdatedAt1_TextChanged
            
              AddHandler Me.UpdatedByID1.TextChanged, AddressOf UpdatedByID1_TextChanged
            
    
        End Sub

        
        Public Overridable Sub LoadData()        
                
            ' Load the data from the database into the DataSource DocTree record.
            ' It is better to make changes to functions called by LoadData such as
            ' CreateWhereClause, rather than making changes here.
    
            ' The RecordUniqueId is set the first time a record is loaded, and is
            ' used during a PostBack to load the record.
          
            If Me.RecordUniqueId IsNot Nothing AndAlso Me.RecordUniqueId.Trim <> "" Then
                Me.DataSource = DocTreeTable.GetRecord(Me.RecordUniqueId, True)
          
                Return
            End If
        
            ' Since this is a row in the table, the data for this row is loaded by the 
            ' LoadData method of the BaseDocTreeTableControl when the data for the entire
            ' table is loaded.
            
            Me.DataSource = New DocTreeRecord()
          
    
    
        End Sub

        ' Populate the UI controls using the DataSource.  To customize, override this method in DocTreeTableControlRow.
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record.  To do this, it calls the Set methods for 
            ' each of the field displayed on the webpage.  It is better to make 
            ' changes in the Set methods, rather than making changes here.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
    
                Return
            End If
            
    
            'LoadData for DataSource for chart and report if they exist
          
            ' Store the checksum. The checksum is used to
            ' ensure the record was not changed by another user.
            If Not Me.DataSource.GetCheckSumValue() Is Nothing
                Me.CheckSum = Me.DataSource.GetCheckSumValue().Value
            End If
            
      
      
            ' Call the Set methods for each controls on the panel
        
                SetAlwaysShow()
                SetAlwaysShowLabel()
                SetCIX1()
                SetCIXLabel1()
                SetCreatedAt1()
                SetCreatedAtLabel1()
                SetCreatedByID1()
                SetCreatedByIDLabel1()
                SetDocDescription()
                SetDocDescriptionLabel()
                SetDocIndex1()
                SetDocIndexLabel1()
                SetDocName()
                SetDocNameLabel()
                SetDocSort1()
                SetDocSortLabel1()
                SetDocTreeParentID1()
                SetDocTreeParentIDLabel1()
                
                
                
                SetDocTypeID()
                SetDocTypeIDLabel()
                SetFolder()
                SetFolderLabel()
                SetHide1()
                SetHideLabel1()
                SetItemRank()
                SetItemRankLabel()
                SetOnApp()
                SetOnAppLabel()
                SetOneActiveCopy()
                SetOneActiveCopyLabel()
                SetPrivateFolder()
                SetPrivateFolderLabel()
                SetRecordDocDetails()
                SetRecordDocDetailsLabel()
                SetUpdatedAt1()
                SetUpdatedAtLabel1()
                SetUpdatedByID1()
                SetUpdatedByIDLabel1()
      
      
            Me.IsNewRecord = True
            
            If Me.DataSource.IsCreated Then
                Me.IsNewRecord = False
                
                Me.RecordUniqueId = Me.DataSource.GetID.ToXmlString()
            End If
          
            ' Now load data for each record and table child UI controls.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
            Dim shouldResetControl As Boolean = False
                  
        End Sub
        
        
        Public Overridable Sub SetAlwaysShow()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.AlwaysShow.ID) Then
                Me.AlwaysShow.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.AlwaysShow.ID))
                Return
            End If		
            
        
            ' Set the AlwaysShow CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.AlwaysShow is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetAlwaysShow()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.AlwaysShowSpecified Then
                									
                ' If the AlwaysShow is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.AlwaysShow.Checked = Me.DataSource.AlwaysShow
            Else
            
                ' AlwaysShow is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.AlwaysShow.Checked = DocTreeTable.AlwaysShow.ParseValue(DocTreeTable.AlwaysShow.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetCIX1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CIX1.ID) Then
            
                Me.CIX1.Text = Me.PreviousUIData(Me.CIX1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the CIX TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.CIX1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCIX1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CIXSpecified Then
                				
                ' If the CIX is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.CIX)
                              
                Me.CIX1.Text = formattedValue
                
            Else 
            
                ' CIX is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.CIX1.Text = DocTreeTable.CIX.Format(DocTreeTable.CIX.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetCreatedAt1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CreatedAt1.ID) Then
            
                Me.CreatedAt1.Text = Me.PreviousUIData(Me.CreatedAt1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the CreatedAt TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.CreatedAt1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCreatedAt1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CreatedAtSpecified Then
                				
                ' If the CreatedAt is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.CreatedAt, "g")
                              
                Me.CreatedAt1.Text = formattedValue
                
            Else 
            
                ' CreatedAt is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.CreatedAt1.Text = DocTreeTable.CreatedAt.Format(DocTreeTable.CreatedAt.DefaultValue, "g")
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetCreatedByID1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.CreatedByID1.ID) Then
            
                Me.CreatedByID1.Text = Me.PreviousUIData(Me.CreatedByID1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the CreatedByID TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.CreatedByID1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetCreatedByID1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.CreatedByIDSpecified Then
                				
                ' If the CreatedByID is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.CreatedByID)
                              
                Me.CreatedByID1.Text = formattedValue
                
            Else 
            
                ' CreatedByID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.CreatedByID1.Text = DocTreeTable.CreatedByID.Format(DocTreeTable.CreatedByID.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocDescription()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocDescription.ID) Then
            
                Me.DocDescription.Text = Me.PreviousUIData(Me.DocDescription.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocDescription TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.DocDescription is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocDescription()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocDescriptionSpecified Then
                				
                ' If the DocDescription is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.DocDescription)
                              
                Me.DocDescription.Text = formattedValue
                
            Else 
            
                ' DocDescription is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocDescription.Text = DocTreeTable.DocDescription.Format(DocTreeTable.DocDescription.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocIndex1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocIndex1.ID) Then
            
                Me.DocIndex1.Text = Me.PreviousUIData(Me.DocIndex1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocIndex TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.DocIndex1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocIndex1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocIndexSpecified Then
                				
                ' If the DocIndex is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.DocIndex)
                              
                Me.DocIndex1.Text = formattedValue
                
            Else 
            
                ' DocIndex is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocIndex1.Text = DocTreeTable.DocIndex.Format(DocTreeTable.DocIndex.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocName()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocName.ID) Then
            
                Me.DocName.Text = Me.PreviousUIData(Me.DocName.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocName TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.DocName is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocName()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocNameSpecified Then
                				
                ' If the DocName is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.DocName)
                              
                Me.DocName.Text = formattedValue
                
            Else 
            
                ' DocName is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocName.Text = DocTreeTable.DocName.Format(DocTreeTable.DocName.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocSort1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocSort1.ID) Then
            
                Me.DocSort1.Text = Me.PreviousUIData(Me.DocSort1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the DocSort TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.DocSort1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocSort1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocSortSpecified Then
                				
                ' If the DocSort is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.DocSort)
                              
                Me.DocSort1.Text = formattedValue
                
            Else 
            
                ' DocSort is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.DocSort1.Text = DocTreeTable.DocSort.Format(DocTreeTable.DocSort.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetDocTreeParentID1()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocTreeParentID1.ID) Then
                If Me.PreviousUIData(Me.DocTreeParentID1.ID) Is Nothing
                    Me.PopulateDocTreeParentID1DropDownList(Nothing, 100)
                Else
                    Me.PopulateDocTreeParentID1DropDownList(Me.PreviousUIData(Me.DocTreeParentID1.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the DocTreeParentID DropDownList on the webpage with value from the
            ' DocTree database record.
            
            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.DocTreeParentID1 is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocTreeParentID1()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocTreeParentIDSpecified Then
                            
                ' If the DocTreeParentID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateDocTreeParentID1DropDownList(Me.DataSource.DocTreeParentID.ToString(), 100)
                
            Else
                
                ' DocTreeParentID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateDocTreeParentID1DropDownList(Nothing, 100)
                Else
                    Me.PopulateDocTreeParentID1DropDownList(DocTreeTable.DocTreeParentID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetDocTypeID()
            							
            ' If selection was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.DocTypeID.ID) Then
                If Me.PreviousUIData(Me.DocTypeID.ID) Is Nothing
                    Me.PopulateDocTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateDocTypeIDDropDownList(Me.PreviousUIData(Me.DocTypeID.ID).ToString(), 100)
                End If
                Return
            End If
            
        
            ' Set the DocTypeID DropDownList on the webpage with value from the
            ' DocTree database record.
            
            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.DocTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetDocTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.DocTypeIDSpecified Then
                            
                ' If the DocTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateDocTypeIDDropDownList(Me.DataSource.DocTypeID.ToString(), 100)
                
            Else
                
                ' DocTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateDocTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateDocTypeIDDropDownList(DocTreeTable.DocTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetFolder()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.Folder.ID) Then
                Me.Folder.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.Folder.ID))
                Return
            End If		
            
        
            ' Set the Folder CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.Folder is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetFolder()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.FolderSpecified Then
                									
                ' If the Folder is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.Folder.Checked = Me.DataSource.Folder
            Else
            
                ' Folder is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.Folder.Checked = DocTreeTable.Folder.ParseValue(DocTreeTable.Folder.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetHide1()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.Hide1.ID) Then
                Me.Hide1.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.Hide1.ID))
                Return
            End If		
            
        
            ' Set the Hide CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.Hide1 is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetHide1()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.HideSpecified Then
                									
                ' If the Hide is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.Hide1.Checked = Me.DataSource.Hide
            Else
            
                ' Hide is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.Hide1.Checked = DocTreeTable.Hide.ParseValue(DocTreeTable.Hide.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetItemRank()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.ItemRank.ID) Then
            
                Me.ItemRank.Text = Me.PreviousUIData(Me.ItemRank.ID).ToString()
              
                Return
            End If
            
        
            ' Set the ItemRank TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.ItemRank is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetItemRank()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.ItemRankSpecified Then
                				
                ' If the ItemRank is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.ItemRank)
                              
                Me.ItemRank.Text = formattedValue
                
            Else 
            
                ' ItemRank is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.ItemRank.Text = DocTreeTable.ItemRank.Format(DocTreeTable.ItemRank.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetOnApp()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.OnApp.ID) Then
                Me.OnApp.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.OnApp.ID))
                Return
            End If		
            
        
            ' Set the OnApp CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.OnApp is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetOnApp()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.OnAppSpecified Then
                									
                ' If the OnApp is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.OnApp.Checked = Me.DataSource.OnApp
            Else
            
                ' OnApp is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.OnApp.Checked = DocTreeTable.OnApp.ParseValue(DocTreeTable.OnApp.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetOneActiveCopy()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.OneActiveCopy.ID) Then
                Me.OneActiveCopy.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.OneActiveCopy.ID))
                Return
            End If		
            
        
            ' Set the OneActiveCopy CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.OneActiveCopy is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetOneActiveCopy()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.OneActiveCopySpecified Then
                									
                ' If the OneActiveCopy is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.OneActiveCopy.Checked = Me.DataSource.OneActiveCopy
            Else
            
                ' OneActiveCopy is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.OneActiveCopy.Checked = DocTreeTable.OneActiveCopy.ParseValue(DocTreeTable.OneActiveCopy.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetPrivateFolder()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.PrivateFolder.ID) Then
                Me.PrivateFolder.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.PrivateFolder.ID))
                Return
            End If		
            
        
            ' Set the PrivateFolder CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.PrivateFolder is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetPrivateFolder()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.PrivateFolderSpecified Then
                									
                ' If the PrivateFolder is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.PrivateFolder.Checked = Me.DataSource.PrivateFolder
            Else
            
                ' PrivateFolder is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.PrivateFolder.Checked = DocTreeTable.PrivateFolder.ParseValue(DocTreeTable.PrivateFolder.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetRecordDocDetails()
            							
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.RecordDocDetails.ID) Then
                Me.RecordDocDetails.Checked = Convert.ToBoolean(Me.PreviousUIData(Me.RecordDocDetails.ID))
                Return
            End If		
            
        
            ' Set the RecordDocDetails CheckBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.RecordDocDetails is the ASP:CheckBox on the webpage.

            ' You can modify this method directly, or replace it with a call to
            ' MyBase.SetRecordDocDetails()
            ' and add your own code before or after the call to the MyBase function.

                    
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RecordDocDetailsSpecified Then
                									
                ' If the RecordDocDetails is non-NULL, then format the value.
                ' The Format method will use the Display Format
                Me.RecordDocDetails.Checked = Me.DataSource.RecordDocDetails
            Else
            
                ' RecordDocDetails is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Not Me.DataSource.IsCreated Then
                    Me.RecordDocDetails.Checked = DocTreeTable.RecordDocDetails.ParseValue(DocTreeTable.RecordDocDetails.DefaultValue).ToBoolean()
                End If
                    				
            End If
                
        End Sub
                
        Public Overridable Sub SetUpdatedAt1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.UpdatedAt1.ID) Then
            
                Me.UpdatedAt1.Text = Me.PreviousUIData(Me.UpdatedAt1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the UpdatedAt TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.UpdatedAt1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetUpdatedAt1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.UpdatedAtSpecified Then
                				
                ' If the UpdatedAt is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.UpdatedAt, "g")
                              
                Me.UpdatedAt1.Text = formattedValue
                
            Else 
            
                ' UpdatedAt is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.UpdatedAt1.Text = DocTreeTable.UpdatedAt.Format(DocTreeTable.UpdatedAt.DefaultValue, "g")
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetUpdatedByID1()
            					
            ' If data was retrieved from UI previously, restore it
            If Me.PreviousUIData.ContainsKey(Me.UpdatedByID1.ID) Then
            
                Me.UpdatedByID1.Text = Me.PreviousUIData(Me.UpdatedByID1.ID).ToString()
              
                Return
            End If
            
        
            ' Set the UpdatedByID TextBox on the webpage with value from the
            ' DocTree database record.

            ' Me.DataSource is the DocTree record retrieved from the database.
            ' Me.UpdatedByID1 is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetUpdatedByID1()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.UpdatedByIDSpecified Then
                				
                ' If the UpdatedByID is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(DocTreeTable.UpdatedByID)
                              
                Me.UpdatedByID1.Text = formattedValue
                
            Else 
            
                ' UpdatedByID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.UpdatedByID1.Text = DocTreeTable.UpdatedByID.Format(DocTreeTable.UpdatedByID.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetAlwaysShowLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCIXLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedAtLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedByIDLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetDocDescriptionLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocIndexLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetDocNameLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocSortLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetDocTreeParentIDLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetDocTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFolderLabel()
                  
                  End Sub
                
        Public Overridable Sub SetHideLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetItemRankLabel()
                  
                  End Sub
                
        Public Overridable Sub SetOnAppLabel()
                  
                  End Sub
                
        Public Overridable Sub SetOneActiveCopyLabel()
                  
                  End Sub
                
        Public Overridable Sub SetPrivateFolderLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRecordDocDetailsLabel()
                  
                  End Sub
                
        Public Overridable Sub SetUpdatedAtLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetUpdatedByIDLabel1()
                  
                  End Sub
                

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e As FormulaEvaluator) As String
            If e Is Nothing Then
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()

            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If

            If includeDS
                
            End IF
            
            
            ' Other variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            If dataSourceForEvaluate Is Nothing Then

                e.DataSource = Me.DataSource

            Else
                e.DataSource = dataSourceForEvaluate
            End If

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If

            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function      
        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function


        Public Overridable Sub RegisterPostback()
        
        
        End Sub

      
        
        ' To customize, override this method in DocTreeTableControlRow.
        Public Overridable Sub SaveData()
            ' Saves the associated record in the database.
            ' SaveData calls Validate and Get methods - so it may be more appropriate to
            ' customize those methods.

            ' 1. Load the existing record from the database. Since we save the entire record, this ensures 
            ' that fields that are not displayed are also properly initialized.
            Me.LoadData()
        
            ' The checksum is used to ensure the record was not changed by another user.
            If (Not Me.DataSource Is Nothing) AndAlso (Not Me.DataSource.GetCheckSumValue Is Nothing) Then
                If Not Me.CheckSum Is Nothing AndAlso Me.CheckSum <> Me.DataSource.GetCheckSumValue.Value Then
                    Throw New Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "FASTPORT"))
                End If
            End If
        
        Dim parentCtrl As RoleRecordControl
          
          
          parentCtrl = DirectCast(Me.Page.FindControlRecursively("RoleRecordControl"), RoleRecordControl)				  
              
          If (Not IsNothing(parentCtrl) AndAlso IsNothing(parentCtrl.DataSource)) 
                ' Load the record if it is not loaded yet.
                parentCtrl.LoadData()
            End If
            If (IsNothing(parentCtrl) OrElse IsNothing(parentCtrl.DataSource)) 
                ' Get the error message from the application resource file.
                Throw New Exception(Page.GetResourceValue("Err:NoParentRecId", "FASTPORT"))
            End If
            
            Me.DataSource.RoleID = parentCtrl.DataSource.RoleID
              
            ' 2. Perform any custom validation.
            Me.Validate()

            
            ' 3. Set the values in the record with data from UI controls.
            ' This calls the Get() method for each of the user interface controls.
            Me.GetUIData()

            ' 4. Save in the database.
            ' We should not save the record if the data did not change. This
            ' will save a database hit and avoid triggering any database triggers.
             
            If Me.DataSource.IsAnyValueChanged Then
                ' Save record to database but do not commit yet.
                ' Auto generated ids are available after saving for use by child (dependent) records.
                Me.DataSource.Save()
              
                DirectCast(GetParentControlObject(Me, "DocTreeTableControl"), DocTreeTableControl).DataChanged = True
                DirectCast(GetParentControlObject(Me, "DocTreeTableControl"), DocTreeTableControl).ResetData = True
            End If
            
      
            ' update session or cookie by formula
                                    
      
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
            
            Me.CheckSum = ""
            ' For Master-Detail relationships, save data on the Detail table(s)
          
        End Sub

        ' To customize, override this method in DocTreeTableControlRow.
        Public Overridable Sub GetUIData()
            ' The GetUIData method retrieves the updated values from the user interface 
            ' controls into a database record in preparation for saving or updating.
            ' To do this, it calls the Get methods for each of the field displayed on 
            ' the webpage.  It is better to make changes in the Get methods, rather 
            ' than making changes here.
      
            ' Call the Get methods for each of the user interface controls.
        
            GetAlwaysShow()
            GetCIX1()
            GetCreatedAt1()
            GetCreatedByID1()
            GetDocDescription()
            GetDocIndex1()
            GetDocName()
            GetDocSort1()
            GetDocTreeParentID1()
            GetDocTypeID()
            GetFolder()
            GetHide1()
            GetItemRank()
            GetOnApp()
            GetOneActiveCopy()
            GetPrivateFolder()
            GetRecordDocDetails()
            GetUpdatedAt1()
            GetUpdatedByID1()
        End Sub
        
        
        Public Overridable Sub GetAlwaysShow()
        
        
            ' Retrieve the value entered by the user on the AlwaysShow ASP:CheckBox, and
            ' save it into the AlwaysShow field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.AlwaysShow = Me.AlwaysShow.Checked
                    
        End Sub
                
        Public Overridable Sub GetCIX1()
            
            ' Retrieve the value entered by the user on the CIX ASP:TextBox, and
            ' save it into the CIX field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.CIX1.Text, DocTreeTable.CIX)			

                      
        End Sub
                
        Public Overridable Sub GetCreatedAt1()
            
            ' Retrieve the value entered by the user on the CreatedAt ASP:TextBox, and
            ' save it into the CreatedAt field in DataSource DocTree record.
            ' Parse will also validate the date to ensure it is of the proper format
            ' and a valid date.  The format is verified based on the current culture 
            ' settings including the order of month, day and year and the separator character.
            ' Parse throws an exception if the date is invalid.
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.CreatedAt1.Text, DocTreeTable.CreatedAt)			

                      
        End Sub
                
        Public Overridable Sub GetCreatedByID1()
            
            ' Retrieve the value entered by the user on the CreatedByID ASP:TextBox, and
            ' save it into the CreatedByID field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.CreatedByID1.Text, DocTreeTable.CreatedByID)			

                      
        End Sub
                
        Public Overridable Sub GetDocDescription()
            
            ' Retrieve the value entered by the user on the DocDescription ASP:TextBox, and
            ' save it into the DocDescription field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocDescription.Text, DocTreeTable.DocDescription)			

                      
        End Sub
                
        Public Overridable Sub GetDocIndex1()
            
            ' Retrieve the value entered by the user on the DocIndex ASP:TextBox, and
            ' save it into the DocIndex field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocIndex1.Text, DocTreeTable.DocIndex)			

                      
        End Sub
                
        Public Overridable Sub GetDocName()
            
            ' Retrieve the value entered by the user on the DocName ASP:TextBox, and
            ' save it into the DocName field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocName.Text, DocTreeTable.DocName)			

                      
        End Sub
                
        Public Overridable Sub GetDocSort1()
            
            ' Retrieve the value entered by the user on the DocSort ASP:TextBox, and
            ' save it into the DocSort field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.DocSort1.Text, DocTreeTable.DocSort)			

                      
        End Sub
                
        Public Overridable Sub GetDocTreeParentID1()
         
            ' Retrieve the value entered by the user on the DocTreeParentID ASP:DropDownList, and
            ' save it into the DocTreeParentID field in DataSource DocTree record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.DocTreeParentID1), DocTreeTable.DocTreeParentID)				
            
        End Sub
                
        Public Overridable Sub GetDocTypeID()
         
            ' Retrieve the value entered by the user on the DocTypeID ASP:DropDownList, and
            ' save it into the DocTypeID field in DataSource DocTree record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.DocTypeID), DocTreeTable.DocTypeID)				
            
        End Sub
                
        Public Overridable Sub GetFolder()
        
        
            ' Retrieve the value entered by the user on the Folder ASP:CheckBox, and
            ' save it into the Folder field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.Folder = Me.Folder.Checked
                    
        End Sub
                
        Public Overridable Sub GetHide1()
        
        
            ' Retrieve the value entered by the user on the Hide ASP:CheckBox, and
            ' save it into the Hide field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.Hide = Me.Hide1.Checked
                    
        End Sub
                
        Public Overridable Sub GetItemRank()
            
            ' Retrieve the value entered by the user on the ItemRank ASP:TextBox, and
            ' save it into the ItemRank field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.ItemRank.Text, DocTreeTable.ItemRank)			

                      
        End Sub
                
        Public Overridable Sub GetOnApp()
        
        
            ' Retrieve the value entered by the user on the OnApp ASP:CheckBox, and
            ' save it into the OnApp field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.OnApp = Me.OnApp.Checked
                    
        End Sub
                
        Public Overridable Sub GetOneActiveCopy()
        
        
            ' Retrieve the value entered by the user on the OneActiveCopy ASP:CheckBox, and
            ' save it into the OneActiveCopy field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.OneActiveCopy = Me.OneActiveCopy.Checked
                    
        End Sub
                
        Public Overridable Sub GetPrivateFolder()
        
        
            ' Retrieve the value entered by the user on the PrivateFolder ASP:CheckBox, and
            ' save it into the PrivateFolder field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.PrivateFolder = Me.PrivateFolder.Checked
                    
        End Sub
                
        Public Overridable Sub GetRecordDocDetails()
        
        
            ' Retrieve the value entered by the user on the RecordDocDetails ASP:CheckBox, and
            ' save it into the RecordDocDetails field in DataSource DocTree record.
            ' Custom validation should be performed in Validate, not here.
            
            
            Me.DataSource.RecordDocDetails = Me.RecordDocDetails.Checked
                    
        End Sub
                
        Public Overridable Sub GetUpdatedAt1()
            
            ' Retrieve the value entered by the user on the UpdatedAt ASP:TextBox, and
            ' save it into the UpdatedAt field in DataSource DocTree record.
            ' Parse will also validate the date to ensure it is of the proper format
            ' and a valid date.  The format is verified based on the current culture 
            ' settings including the order of month, day and year and the separator character.
            ' Parse throws an exception if the date is invalid.
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.UpdatedAt1.Text, DocTreeTable.UpdatedAt)			

                      
        End Sub
                
        Public Overridable Sub GetUpdatedByID1()
            
            ' Retrieve the value entered by the user on the UpdatedByID ASP:TextBox, and
            ' save it into the UpdatedByID field in DataSource DocTree record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.UpdatedByID1.Text, DocTreeTable.UpdatedByID)			

                      
        End Sub
                
      
        ' To customize, override this method in DocTreeTableControlRow.
        
        Public Overridable Function CreateWhereClause() As WhereClause
        
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            Return Nothing
            
        End Function
        
    

        ' To customize, override this method in DocTreeTableControlRow.
        Public Overridable Sub Validate() 
            ' Add custom validation for any control within this panel.
            ' Example.  If you have a State ASP:Textbox control
            ' If Me.State.Text <> "CA" Then
            '    Throw New Exception("State must be CA (California).")
            ' End If

            ' The Validate method is common across all controls within
            ' this panel so you can validate multiple fields, but report
            ' one error message.
            
                
        End Sub

        Public Overridable Sub Delete()
        
            If Me.IsNewRecord() Then
                Return
            End If

            Dim pkValue As KeyValue = KeyValue.XmlToKey(Me.RecordUniqueId)
          DocTreeTable.DeleteRecord(pkValue)
          
            DirectCast(GetParentControlObject(Me, "DocTreeTableControl"), DocTreeTableControl).DataChanged = True
            DirectCast(GetParentControlObject(Me, "DocTreeTableControl"), DocTreeTableControl).ResetData = True
        End Sub

        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction()
                Me.RegisterPostback()

                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Me.LoadData()
                    Me.DataBind()			
                End If
                                
                						
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction()
            End Try
        End Sub
        
            
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()
        
    
            'Save pagination state to session.
          
        End Sub
        
        
    
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

        

            ' Clear pagination state from session.
        
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)
            Dim isNewRecord As String = CType(ViewState("IsNewRecord"), String)
            If Not isNewRecord Is Nothing AndAlso isNewRecord.Trim <> "" Then
                Me.IsNewRecord = Boolean.Parse(isNewRecord)
            End If
            
            Dim myCheckSum As String = CType(ViewState("CheckSum"), String)
            If Not myCheckSum Is Nothing AndAlso myCheckSum.Trim <> "" Then
                Me.CheckSum = myCheckSum
            End If
            
    
            ' Load view state for pagination control.
                 
        End Sub

        Protected Overrides Function SaveViewState() As Object
            ViewState("IsNewRecord") = Me.IsNewRecord.ToString()
            ViewState("CheckSum") = Me.CheckSum
            
    
            ' Load view state for pagination control.
                  
            Return MyBase.SaveViewState()
        End Function
        
        

        Public Overridable Function CreateWhereClause_DocTreeParentID1DropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the DocTree table.
            ' Examples:
            ' wc.iAND(DocTreeTable.DocName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(DocTreeTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_DocTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the Tree table.
            ' Examples:
            ' wc.iAND(TreeTable.ItemName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(TreeTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                
        ' Fill the DocTreeParentID1 list.
        Protected Overridable Sub PopulateDocTreeParentID1DropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.DocTreeParentID1.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.DocTreeParentID1.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_DocTreeParentID1DropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_DocTreeParentID1DropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(DocTreeTable.DocName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As DocTreeRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = DocTreeTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As DocTreeRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.DocTreeIDSpecified Then
                            cvalue = itemValue.DocTreeID.ToString() 
                            
                        If counter < maxItems AndAlso Me.DocTreeParentID1.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = DocTreeTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(DocTreeTable.DocTreeParentID)
                          If _isExpandableNonCompositeForeignKey AndAlso DocTreeTable.DocTreeParentID.IsApplyDisplayAs Then
                          fvalue = DocTreeTable.GetDFKA(itemValue, DocTreeTable.DocTreeParentID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(DocTreeTable.DocName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.DocTreeParentID1.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.DocTreeParentID1.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.DocTreeParentID1, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.DocTreeParentID1, selectedValue)Then

                ' construct a whereclause to query a record with DocTree.DocTreeID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(DocTreeTable.DocTreeID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As DocTreeRecord = DocTreeTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As DocTreeRecord = DirectCast(rc(0), DocTreeRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.DocTreeIDSpecified Then
                            cvalue = itemValue.DocTreeID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = DocTreeTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(DocTreeTable.DocTreeParentID)
                          If _isExpandableNonCompositeForeignKey AndAlso DocTreeTable.DocTreeParentID.IsApplyDisplayAs Then
                          fvalue = DocTreeTable.GetDFKA(itemValue, DocTreeTable.DocTreeParentID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(DocTreeTable.DocName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.DocTreeParentID1.Items.Add(newItem)
                      SetSelectedValue(Me.DocTreeParentID1, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the DocTypeID list.
        Protected Overridable Sub PopulateDocTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.DocTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.DocTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_DocTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_DocTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(TreeTable.ItemName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As TreeRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = TreeTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As TreeRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.TreeIDSpecified Then
                            cvalue = itemValue.TreeID.ToString() 
                            
                        If counter < maxItems AndAlso Me.DocTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = DocTreeTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(DocTreeTable.DocTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso DocTreeTable.DocTypeID.IsApplyDisplayAs Then
                          fvalue = DocTreeTable.GetDFKA(itemValue, DocTreeTable.DocTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(TreeTable.ItemName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.DocTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.DocTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.DocTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.DocTypeID, selectedValue)Then

                ' construct a whereclause to query a record with Tree.TreeID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(TreeTable.TreeID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As TreeRecord = TreeTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As TreeRecord = DirectCast(rc(0), TreeRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.TreeIDSpecified Then
                            cvalue = itemValue.TreeID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = DocTreeTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(DocTreeTable.DocTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso DocTreeTable.DocTypeID.IsApplyDisplayAs Then
                          fvalue = DocTreeTable.GetDFKA(itemValue, DocTreeTable.DocTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(TreeTable.ItemName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.DocTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.DocTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' event handler for ImageButton
        Public Overridable Sub DocTreeRowDeleteButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            If(Not Me.Page.IsPageRefresh) Then
        
                Dim tc As DocTreeTableControl = DirectCast(GetParentControlObject(Me, "DocTreeTableControl"), DocTreeTableControl)
                If Not (IsNothing(tc)) Then
                    If Not Me.IsNewRecord Then
                        tc.AddToDeletedRecordIds(DirectCast(Me, DocTreeTableControlRow))
                    End If
                    Me.Visible = False
                    tc.SetFormulaControls()
                End If
              
            End If
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub DocTreeRowEditButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
            ' The redirect URL is set on the Properties, Custom Properties or Actions.
            ' The ModifyRedirectURL call resolves the parameters before the
            ' Response.Redirect redirects the page to the URL.  
            ' Any code after the Response.Redirect call will not be executed, since the page is
            ' redirected to the URL.
            
              
                  Dim url As String = "../Shared/ConfigureEditRecord.aspx"
                
        Dim shouldRedirect As Boolean = True
        Dim TargetKey As String = Nothing
        Dim DFKA As String = TargetKey
        Dim id As String = DFKA
        Dim value As String = id
      
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            url = Me.ModifyRedirectUrl(url, "",True)
            url = Me.Page.ModifyRedirectUrl(url, "",True)
          
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                shouldRedirect = False
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
            If shouldRedirect Then
                Me.Page.ShouldSaveControlsToSession = True
                Me.Page.Response.Redirect(url)
            ElseIf Not TargetKey Is Nothing AndAlso _
                        Not shouldRedirect Then
            Me.Page.ShouldSaveControlsToSession = True
            Me.Page.CloseWindow(True)
        
            End If              
        End Sub
        
        Protected Overridable Sub DocTreeParentID1_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(DocTreeParentID1.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(DocTreeParentID1.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.DocTreeParentID1.Items.Add(New ListItem(displayText, val))
                Me.DocTreeParentID1.SelectedIndex = Me.DocTreeParentID1.Items.Count - 1
                Me.Page.Session.Remove(DocTreeParentID1.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(DocTreeParentID1.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub DocTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(DocTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(DocTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.DocTypeID.Items.Add(New ListItem(displayText, val))
                Me.DocTypeID.SelectedIndex = Me.DocTypeID.Items.Count - 1
                Me.Page.Session.Remove(DocTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(DocTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub AlwaysShow_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub Folder_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub Hide1_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub OnApp_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub OneActiveCopy_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub PrivateFolder_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub RecordDocDetails_CheckedChanged(ByVal sender As Object, ByVal args As EventArgs)                
             

        End Sub
            
        Protected Overridable Sub CIX1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub CreatedAt1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub CreatedByID1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocDescription_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocIndex1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocName_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub DocSort1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub ItemRank_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub UpdatedAt1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub UpdatedByID1_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
   
        Private _PreviousUIData As New Hashtable
        Public Overridable Property PreviousUIData() As Hashtable
            Get
                Return _PreviousUIData
            End Get
            Set(ByVal value As Hashtable)
                _PreviousUIData = value
            End Set
        End Property   
   
        Private _IsNewRecord As Boolean = True
        Public Overridable Property IsNewRecord() As Boolean
            Get
                Return Me._IsNewRecord
            End Get
            Set(ByVal value As Boolean)
                Me._IsNewRecord = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Overridable Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal Value As Boolean)
                Me._DataChanged = Value
            End Set
        End Property

        Private _ResetData As Boolean = False
        Public Overridable Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal Value As Boolean)
                Me._ResetData = Value
            End Set
        End Property
        
        Public Property RecordUniqueId() As String
            Get
                Return CType(Me.ViewState("BaseDocTreeTableControlRow_Rec"), String)
            End Get
            Set(ByVal value As String)
                Me.ViewState("BaseDocTreeTableControlRow_Rec") = value
            End Set
        End Property
        
        Private _DataSource As DocTreeRecord
        Public Property DataSource() As DocTreeRecord     
            Get
                Return Me._DataSource
            End Get
            
            Set(ByVal value As DocTreeRecord)
            
                Me._DataSource = value
            End Set
        End Property

        

        Private _checkSum As String
        Public Overridable Property CheckSum() As String
            Get
                Return Me._checkSum
            End Get
            Set(ByVal value As String)
                Me._checkSum = value
            End Set
        End Property
        
        Private _TotalPages As Integer
        Public Property TotalPages() As Integer
            Get
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property
        
        Private _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property
    
        Private _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property
        
        

#Region "Helper Properties"
        
        Public ReadOnly Property AlwaysShow() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AlwaysShow"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property AlwaysShowLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AlwaysShowLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CIX1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CIX1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property CIXLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CIXLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CreatedAt1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedAt1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property CreatedAtLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedAtLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property CreatedByID1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedByID1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property CreatedByIDLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedByIDLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocDescription() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocDescription"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocDescriptionLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocDescriptionLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocIndex1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocIndex1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocIndexLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocIndexLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocName() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocName"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocNameLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocNameLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocSort1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocSort1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property DocSortLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocSortLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeParentID1() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeParentID1"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property DocTreeParentIDLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeParentIDLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeRecordRowSelection() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeRecordRowSelection"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeRowDeleteButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeRowDeleteButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeRowEditButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeRowEditButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property DocTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property Folder() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "Folder"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property FolderLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FolderLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property Hide1() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "Hide1"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property HideLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "HideLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property ItemRank() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ItemRank"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property ItemRankLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ItemRankLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property OnApp() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "OnApp"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property OnAppLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "OnAppLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property OneActiveCopy() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "OneActiveCopy"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property OneActiveCopyLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "OneActiveCopyLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property PrivateFolder() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "PrivateFolder"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property PrivateFolderLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "PrivateFolderLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RecordDocDetails() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RecordDocDetails"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
            
        Public ReadOnly Property RecordDocDetailsLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RecordDocDetailsLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property UpdatedAt1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedAt1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property UpdatedAtLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedAtLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property UpdatedByID1() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedByID1"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property UpdatedByIDLabel1() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedByIDLabel1"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"

        Public Overrides Overloads Function ModifyRedirectUrl(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function

        Public Overrides Overloads Function EvaluateExpressions(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            
            Dim rec As DocTreeRecord = Nothing
             
        
            Try
                rec = Me.GetRecord()
            Catch ex As Exception
                ' Do nothing
            End Try

            If rec Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                ' Localization.
                
            Throw New Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "FASTPORT"))
                    
            End If
            Return EvaluateExpressions(url, arg, rec, bEncrypt)
        End Function

         
        Public Overridable Function GetRecord() As DocTreeRecord
            If Not Me.DataSource Is Nothing Then
                Return Me.DataSource
            End If
            
            If Not Me.RecordUniqueId Is Nothing Then
                
                Return DocTreeTable.GetRecord(Me.RecordUniqueId, True)
                
            End If
            
            ' Localization.
            
            Return Nothing
                
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

End Class

  

' Base class for the DocTreeTableControl control on the EditRole page.
' Do not modify this class. Instead override any method in DocTreeTableControl.
Public Class BaseDocTreeTableControl
        Inherits FASTPORT.UI.BaseApplicationTableControl

        

        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
  
      
                  
           ' Setup the filter and search events.
        
      
      
            ' Control Initializations.
            ' Initialize the table's current sort order.
            
            If Me.InSession(Me, "Order_By") Then
                Me.CurrentSortOrder = OrderBy.FromXmlString(Me.GetFromSession(Me, "Order_By", Nothing))
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
            
    End If

    
    
            ' Setup default pagination settings.
        
            Me.PageSize = CInt(Me.GetFromSession(Me, "Page_Size", "10"))
            Me.PageIndex = CInt(Me.GetFromSession(Me, "Page_Index", "0"))
            
        
            
            Me.ClearControlsFromSession()
        End Sub

        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
            SaveControlsToSession_Ajax()
        
              ' Show confirmation message on Click
              Me.DocTreeDeleteButton.Attributes.Add("onClick", "return (confirm('" & (CType(Me.Page,BaseApplicationPage)).GetResourceValue("DeleteConfirm", "FASTPORT") & "'));")
      
            ' Setup the pagination events.
            
              AddHandler Me.DocTreePagination.FirstPage.Click, AddressOf DocTreePagination_FirstPage_Click
              
              AddHandler Me.DocTreePagination.LastPage.Click, AddressOf DocTreePagination_LastPage_Click
              
              AddHandler Me.DocTreePagination.NextPage.Click, AddressOf DocTreePagination_NextPage_Click
              
              AddHandler Me.DocTreePagination.PageSizeButton.Click, AddressOf DocTreePagination_PageSizeButton_Click
            
              AddHandler Me.DocTreePagination.PreviousPage.Click, AddressOf DocTreePagination_PreviousPage_Click
                          
        
            ' Setup the sorting events.
          
              AddHandler Me.AlwaysShowSortLabel.Click, AddressOf AlwaysShowSortLabel_Click
            
              AddHandler Me.CIXSortLabel1.Click, AddressOf CIXSortLabel1_Click
            
              AddHandler Me.CreatedAtSortLabel1.Click, AddressOf CreatedAtSortLabel1_Click
            
              AddHandler Me.CreatedByIDSortLabel1.Click, AddressOf CreatedByIDSortLabel1_Click
            
              AddHandler Me.DocNameSortLabel.Click, AddressOf DocNameSortLabel_Click
            
              AddHandler Me.DocTreeParentIDSortLabel1.Click, AddressOf DocTreeParentIDSortLabel1_Click
            
              AddHandler Me.DocTypeIDSortLabel.Click, AddressOf DocTypeIDSortLabel_Click
            
              AddHandler Me.FolderSortLabel.Click, AddressOf FolderSortLabel_Click
            
              AddHandler Me.ItemRankSortLabel.Click, AddressOf ItemRankSortLabel_Click
            
              AddHandler Me.UpdatedAtSortLabel1.Click, AddressOf UpdatedAtSortLabel1_Click
            
            ' Setup the button events.
          
              AddHandler Me.DocTreeAddButton.Click, AddressOf DocTreeAddButton_Click
              
              AddHandler Me.DocTreeDeleteButton.Click, AddressOf DocTreeDeleteButton_Click
              
            AddHandler Me.DocTreeButtonsButton.Button.Click, AddressOf DocTreeButtonsButton_Click
        
            AddHandler Me.DocTreeFiltersButton.Button.Click, AddressOf DocTreeFiltersButton_Click
            
        
          ' Setup events for others
            
        End Sub
        
        
        Public Overridable Sub LoadData()        
        
            ' Read data from database. Returns an array of records that can be assigned
            ' to the DataSource table control property.
            Try	
                Dim joinFilter As CompoundFilter = CreateCompoundJoinFilter()
                
                ' The WHERE clause will be empty when displaying all records in table.
                Dim wc As WhereClause = CreateWhereClause()
                If wc IsNot Nothing AndAlso Not wc.RunQuery Then
                    ' Initialize an empty array of records
                    Dim alist As New ArrayList(0)
                    Me.DataSource = DirectCast(alist.ToArray(GetType(DocTreeRecord)), DocTreeRecord())
                    ' Add records to the list if needed.
                    Me.AddNewRecords()
                    Me._TotalRecords = 0
                    Me._TotalPages = 0
                    Return
                End If

                ' Call OrderBy to determine the order - either use the order defined
                ' on the Query Wizard, or specified by user (by clicking on column heading)
                Dim orderBy As OrderBy = CreateOrderBy()
                
                ' Get the pagesize from the pagesize control.
                Me.GetPageSize()
                               
                If Me.DisplayLastPage Then
                    Dim totalRecords As Integer = If(Me._TotalRecords < 0, DocTreeTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()), Me._TotalRecords)
                     
                      Dim totalPages As Integer = CInt(Math.Ceiling(totalRecords / Me.PageSize))
                    
                    Me.PageIndex = totalPages - 1
                End If                               
                
                ' Make sure PageIndex (current page) and PageSize are within bounds.
                If Me.PageIndex < 0 Then
                    Me.PageIndex = 0
                End If
                If Me.PageSize < 1 Then
                    Me.PageSize = 1
                End If
                
                ' Retrieve the records and set the table DataSource.
                ' Only PageSize records are fetched starting at PageIndex (zero based).
                If Me.AddNewRecord > 0 Then
                ' Make sure to preserve the previously entered data on new rows.
                    Dim postdata As New ArrayList
                    For Each rc As DocTreeTableControlRow In Me.GetRecordControls()
                        If Not rc.IsNewRecord Then
                            rc.DataSource = rc.GetRecord()
                            rc.GetUIData()
                            postdata.Add(rc.DataSource)
                            UIData.Add(rc.PreservedUIData())							
                        End If
                    Next
                    Me.DataSource = DirectCast(postdata.ToArray(GetType(DocTreeRecord)), DocTreeRecord())
                Else  ' Get the records from the database	
                        Me.DataSource = DocTreeTable.GetRecords(joinFilter, wc, orderBy, Me.PageIndex, Me.PageSize)
                      
                End If
                
                ' if the datasource contains no records contained in database, then load the last page.
                If (DbUtils.GetCreatedRecords(Me.DataSource).Length = 0 AndAlso Not Me.DisplayLastPage) Then
                      Me.DisplayLastPage = True
                      LoadData()
                Else
                
                    ' Add any new rows desired by the user.
                    Me.AddNewRecords()
                
                ' Turn off the ToggleAll checkbox
                Me.DocTreeToggleAll.Checked = False
            

                    ' Initialize the page and grand totals. now
                
                End If
    
            Catch ex As Exception
                ' Report the error message to the end user
                Dim msg As String = ex.Message
                If ex.InnerException IsNot Nothing Then
                    msg = msg & " InnerException: " & ex.InnerException.Message
                End If
                Throw New Exception(msg, ex.InnerException)
            End Try
        End Sub
        
        
        
    
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record for each row in the table.  To do this, it calls the
            ' DataBind for each of the rows.
            ' DataBind also populates any filters above the table, and sets the pagination
            ' control to the correct number of records and the current page number.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
                Return
            End If
            
            'LoadData for DataSource for chart and report if they exist
          
          ' Improve performance by prefetching display as records.
          Me.PreFetchForeignKeyValues()
             
            ' Setup the pagination controls.
            BindPaginationControls()

      
        
          ' Bind the repeater with the list of records to expand the UI.
          Dim rep As System.Web.UI.WebControls.Repeater = CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeTableControlRepeater"), System.Web.UI.WebControls.Repeater)
          If rep Is Nothing Then Return
          rep.DataSource = DataSource()
          rep.DataBind()

          Dim index As Integer = 0
          For Each repItem As System.Web.UI.WebControls.RepeaterItem In rep.Items
          ' Loop through all rows in the table, set its DataSource and call DataBind().
          Dim recControl As DocTreeTableControlRow = DirectCast(repItem.FindControl("DocTreeTableControlRow"), DocTreeTableControlRow)
          recControl.DataSource = Me.DataSource(index)
          If Me.UIData.Count > index Then
          recControl.PreviousUIData = Me.UIData(index)
          End If
          recControl.DataBind()
            recControl.Visible = Not Me.InDeletedRecordIds(recControl)
          
          index += 1
          Next
        
    
           
                
            ' Call the Set methods for each controls on the panel
        
                SetAlwaysShowSortLabel()
                SetCIXSortLabel1()
                SetCreatedAtSortLabel1()
                SetCreatedByIDSortLabel1()
                SetDocNameSortLabel()
                
                
                
                
                
                SetDocTreeParentIDSortLabel1()
                
                
                SetDocTypeIDSortLabel()
                SetFolderSortLabel()
                SetItemRankSortLabel()
                SetUpdatedAtSortLabel1()
            ' setting the state of expand or collapse alternative rows
      
    
            ' Load data for each record and table UI control.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
                
      
            ' this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls()
      End Sub
      
        Public Overridable Sub SetFormulaControls()
            ' this method calls Set methods for the control that has special formula
        
        

    End Sub

    
          Public Sub PreFetchForeignKeyValues()
          If (IsNothing(Me.DataSource))
            Return
          End If
          
            Me.Page.PregetDfkaRecords(DocTreeTable.DocTreeParentID, Me.DataSource)
          
            Me.Page.PregetDfkaRecords(DocTreeTable.DocTypeID, Me.DataSource)
          
          End Sub
        
      
        Public Overridable Sub RegisterPostback()
        
        
        End Sub

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e as FormulaEvaluator) As String
            If e Is Nothing
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()
            
            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If
            
            If includeDS
                
            End If
            
            ' All variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If
            
            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function			

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function




        Public Overridable Sub ResetControl()
                    
            Me.CurrentSortOrder.Reset()
            If (Me.InSession(Me, "Order_By")) Then
                Me.CurrentSortOrder = OrderBy.FromXmlString(Me.GetFromSession(Me, "Order_By", Nothing))
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
                
            End If
                
            Me.PageIndex = 0
        End Sub

        Protected Overridable Sub BindPaginationControls()
            ' Setup the pagination controls.

            ' Bind the pagination labels.
        
            If DbUtils.GetCreatedRecords(Me.DataSource).Length > 0 Then                      
                    
                Me.DocTreePagination.CurrentPage.Text = (Me.PageIndex + 1).ToString()
            Else
                Me.DocTreePagination.CurrentPage.Text = "0"
            End If
            Me.DocTreePagination.PageSize.Text = Me.PageSize.ToString()

            ' Bind the buttons for DocTreeTableControl pagination.
        
            Me.DocTreePagination.FirstPage.Enabled = Not (Me.PageIndex = 0)
            If Me._TotalPages < 0 Then      ' if the total pages is not determined yet, enable last and next buttons
                Me.DocTreePagination.LastPage.Enabled = True
            ElseIf Me._TotalPages = 0          ' if the total pages is determined and it is 0, enable last and next buttons
                Me.DocTreePagination.LastPage.Enabled = False            
            Else                               ' if the total pages is the last page, disable last and next buttons
                Me.DocTreePagination.LastPage.Enabled = Not (Me.PageIndex = Me.TotalPages - 1)
            End If
          
            If Me._TotalPages < 0 Then      ' if the total pages is not determined yet, enable last and next buttons
                Me.DocTreePagination.NextPage.Enabled = True
            ElseIf Me._TotalPages = 0          ' if the total pages is determined and it is 0, enable last and next buttons
                Me.DocTreePagination.NextPage.Enabled = False            
            Else                               ' if the total pages is the last page, disable last and next buttons
                Me.DocTreePagination.NextPage.Enabled = Not (Me.PageIndex = Me.TotalPages - 1)
            End If
          
            Me.DocTreePagination.PreviousPage.Enabled = Not (Me.PageIndex = 0)


        End Sub

        Public Overridable Sub SaveData()
            ' Save the data from the entire table.  Calls each row's Save Data
            ' to save their data.  This function is called by the Click handler of the
            ' Save button.  The button handler should Start/Commit/End a transaction.
            
            Dim recCtl As DocTreeTableControlRow
            For Each recCtl In Me.GetRecordControls()
        
                If Me.InDeletedRecordIds(recCtl) Then
                    ' Delete any pending deletes. 
                    recCtl.Delete()
                Else
                    If recCtl.Visible Then
                        recCtl.SaveData()
                    End If
                End If
          
            Next
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
          
            ' Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            For Each recCtl In Me.GetRecordControls()
                recCtl.IsNewRecord = False
            Next
    
      
            ' Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            Me.DeletedRecordIds = Nothing
      
        End Sub

        Public Overridable Function CreateCompoundJoinFilter() As CompoundFilter
            Dim jFilter As CompoundFilter = New CompoundFilter()
        
            Return jFilter

        End Function

        
          Public Overridable Function CreateOrderBy() As OrderBy
          ' The CurrentSortOrder is initialized to the sort order on the
          ' Query Wizard.  It may be modified by the Click handler for any of
          ' the column heading to sort or reverse sort by that column.
          ' You can add your own sort order, or modify it on the Query Wizard.
          Return Me.CurrentSortOrder
          End Function
      
        Public Overridable Function CreateWhereClause() As WhereClause
            'This CreateWhereClause is used for loading the data.
            DocTreeTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
            
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            ' Compose the WHERE clause consiting of:
            ' 1. Static clause defined at design time.
            ' 2. User selected search criteria.
            ' 3. User selected filter criteria.

              
      Dim selectedRecordKeyValue as KeyValue = New KeyValue()
    
              Dim roleRecordControlObj As FASTPORT.UI.Controls.EditRole.RoleRecordControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "RoleRecordControl"), FASTPORT.UI.Controls.EditRole.RoleRecordControl)
              
                If (Not IsNothing(roleRecordControlObj) AndAlso Not IsNothing(roleRecordControlObj.GetRecord()) AndAlso roleRecordControlObj.GetRecord().IsCreated AndAlso Not IsNothing(roleRecordControlObj.GetRecord().RoleID))
                    wc.iAND(DocTreeTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, roleRecordControlObj.GetRecord().RoleID.ToString())
                    selectedRecordKeyValue.AddElement(DocTreeTable.RoleID.InternalName, roleRecordControlObj.GetRecord().RoleID.ToString())
                Else
                    wc.RunQuery = False
                    Return wc
                End If
              
      HttpContext.Current.Session("DocTreeTableControlWhereClause") = selectedRecordKeyValue.ToXmlString()
    
            Dim themeButtonDocTreeFiltersButton As IThemeButtonWithArrow = DirectCast(MiscUtils.FindControlRecursively(Me, "DocTreeFiltersButton"), IThemeButtonWithArrow)
            If ( IsNothing(themeButtonDocTreeFiltersButton) ) Then
              	themeButtonDocTreeFiltersButton = DirectCast(MiscUtils.FindControlRecursively(Me, "_DocTreeFiltersButton"), IThemeButtonWithArrow)
            End If

            If ( IsNothing(Me.DataSource) AndAlso Not IsNothing(themeButtonDocTreeFiltersButton) AndAlso Not IsNothing(themeButtonDocTreeFiltersButton.ArrowImage)) Then
                If (hasFiltersDocTreeTableControl) Then
                   themeButtonDocTreeFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonCheckmark.png"
                Else
                   themeButtonDocTreeFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonExpandArrow.png"
                End If
            End If
           
    Return wc
    End Function

    
        Public Overridable Function CreateWhereClause(ByVal searchText as String, ByVal fromSearchControl as String, ByVal AutoTypeAheadSearch as String, ByVal AutoTypeAheadWordSeparators as String) As WhereClause
            ' This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            DocTreeTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
        
          Dim hasFiltersAgreementTableControl As Boolean = False
        
          Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
        
          Dim hasFiltersDocTreeTableControl As Boolean = False
        
          Dim hasFiltersRoleRecordControl As Boolean = False
        
      ' Compose the WHERE clause consiting of:
      ' 1. Static clause defined at design time.
      ' 2. User selected search criteria.
      ' 3. User selected filter criteria.

      Dim appRelativeVirtualPath As String = CType(HttpContext.Current.Session("AppRelativeVirtualPath"), String)
      
            Dim selectedRecordInRoleRecordControl as String = DirectCast(HttpContext.Current.Session("DocTreeTableControlWhereClause"), String)
            
            If Not selectedRecordInRoleRecordControl Is Nothing AndAlso KeyValue.IsXmlKey(selectedRecordInRoleRecordControl) Then
                Dim selectedRecordKeyValue as KeyValue = KeyValue.XmlToKey(selectedRecordInRoleRecordControl)
                
       If Not IsNothing(selectedRecordKeyValue) AndAlso selectedRecordKeyValue.ContainsColumn(DocTreeTable.RoleID) Then
            wc.iAND(DocTreeTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(DocTreeTable.RoleID).ToString())
       End If
      
            End If
          
            ' Adds clauses if values are selected in Filter controls which are configured in the page.
          
            Dim themeButtonDocTreeFiltersButton As IThemeButtonWithArrow = DirectCast(MiscUtils.FindControlRecursively(Me, "DocTreeFiltersButton"), IThemeButtonWithArrow)

    
            If ( IsNothing(Me.DataSource) AndAlso Not IsNothing(themeButtonDocTreeFiltersButton) AndAlso Not IsNothing(themeButtonDocTreeFiltersButton.ArrowImage)) Then
                If (hasFiltersDocTreeTableControl) Then
                   themeButtonDocTreeFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonCheckmark.png"
                Else
                   themeButtonDocTreeFiltersButton.ArrowImage.ImageUrl = "../Images/ButtonExpandArrow.png"
                End If
            End If
    
      
            Return wc
        End Function
          
          
        Public Overridable Function FormatSuggestions(ByVal prefixText As String, ByVal resultItem As String, _
                                                 ByVal columnLength As Integer, ByVal AutoTypeAheadDisplayFoundText As String, _
                                                 ByVal autoTypeAheadSearch As String, ByVal AutoTypeAheadWordSeparators As String, _
                                                 ByVal resultList As ArrayList) As Boolean
                                                 
            'Formats the resultItem and adds it to the list of suggestions.
            Dim index As Integer = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture))
            Dim itemToAdd As String = ""
            Dim isFound As Boolean = False
            Dim isAdded As Boolean = False
            ' Get the index where prfixt is at the beginning of resultItem. If not found then, index of word which begins with prefixText.
            If InvariantLCase(autoTypeAheadSearch).equals("wordsstartingwithsearchstring") And Not index = 0 Then
                ' Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                If regex1.IsMatch(resultItem) Then
                    index = regex1.Match(resultItem).Index
                    isFound = True
                End If
                ' If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                If not resultItem(index).ToString() = " " Then
                    ' Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    Dim regex As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    If regex.IsMatch(resultItem) Then
                        index = regex.Match(resultItem).Index
                        isFound = True
                    End If
                 End If
            End If
            
            ' If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            ' beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            If index = 0 Or isFound Or InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") then
                If InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atbeginningofmatchedstring") Then
                    ' Expression to find beginning of the word which contains prefixText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    '  Find the beginning of the word which contains prefexText
                    If (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") AndAlso regex1.IsMatch(resultItem)) Then
                        index = regex1.Match(resultItem).Index
                        isFound = True
                    End If
                    ' Display string from the index till end of the string if sub string from index till end is less than columnLength value.
                    If Len(resultItem) - index <= columnLength Then
                        If index = 0 Then 
                            itemToAdd = resultItem 
                        Else
                            itemToAdd = "..." & resultItem.Substring(index, Len(resultItem) - index) 
                        End If
                    Else
                        If index = 0 Then
                            itemToAdd = resultItem.Substring(index, (columnLength - 3)) & "..."
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index , columnLength - 6) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("inmiddleofmatchedstring") Then
                    Dim subStringBeginIndex As Integer = CType(columnLength/2, Integer)
                    If Len(resultItem) <= columnLength Then
                        itemToAdd = resultItem
                    Else
                        ' Sanity check at end of the string
                        If index + Len(prefixText) = columnLength Then
                            itemToAdd =  "..." & resultItem.Substring(index-columnLength,index)
                        ElseIf Len(resultItem) - index < subStringBeginIndex Then 
                            ' Display string from the end till columnLength value if, index is closer to the end of the string.
                            itemToAdd =  "..." & resultItem.Substring(Len(resultItem)-columnLength,Len(resultItem))
                        ElseIf index <= subStringBeginIndex Then 
                            ' Sanity chet at beginning of the string
                            itemToAdd =  resultItem.Substring(0, columnLength) & "..."
                        Else
                            ' Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd =  "..." & resultItem.Substring(index - subStringBeginIndex, columnLength) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atendofmatchedstring") Then
                     ' Expression to find ending of the word which contains prefexText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    ' Find the ending of the word which contains prefexText
                    If regex1.IsMatch(resultItem, index + 1) Then
                        index = regex1.Match(resultItem, index + 1).Index
                    Else
                        ' If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length
                    End If
                    If index > Len(resultItem) Then
                        index = Len(resultItem)
                    End If
                    ' If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    If  index <= columnLength Then
                        if index = Len(resultItem) Then   'Make decision to append "..."
                            itemToAdd = resultItem.Substring(0,index)
                        Else
                            itemToAdd = resultItem.Substring(0,index) & "..."
                        End If
                    Else
                        If index = Len(resultItem) Then
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 3), (columnLength - 3))
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 6), columnLength - 6) & "..." 
                        End If
                    End If
                End If
                
                ' Remove newline character from itemToAdd
                Dim prefixTextIndex As Integer = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase)
                ' If itemToAdd contains any newline after the search text then show text only till newline
                Dim regex2 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                Dim newLineIndexAfterPrefix As Integer = -1
                If regex2.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexAfterPrefix > -1) Then
                    If itemToAdd.EndsWith("...") Then
                        itemToAdd = (itemToAdd.Substring(0, newLineIndexAfterPrefix) + "...")
                    Else
                        itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix)
                    End If
                End If
                ' If itemToAdd contains any newline before search text then show text which comes after newline
                Dim regex3 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", (System.Text.RegularExpressions.RegexOptions.IgnoreCase Or System.Text.RegularExpressions.RegexOptions.RightToLeft))
                Dim newLineIndexBeforePrefix As Integer = -1
                If regex3.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexBeforePrefix > -1) Then
                    If itemToAdd.StartsWith("...") Then
                        itemToAdd = ("..." + itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length)))
                    Else
                        itemToAdd = itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length))
                    End If
                End If

                If Not itemToAdd is nothing AndAlso Not resultList.Contains(itemToAdd) Then
                    
                    resultList.Add(itemToAdd)
          				
                    isAdded = true
                End If
            End If
            Return isAdded
        End Function
        
    
        Protected Overridable Sub GetPageSize()
        
            If Me.DocTreePagination.PageSize.Text.Trim <> "" Then
                Try
                    'Me.PageSize = Integer.Parse(Me.DocTreePagination.PageSize.Text)
                Catch ex As Exception
                End Try
            End If
        End Sub

        Protected Overridable Sub AddNewRecords()
            
            Dim newRecordList As ArrayList = New ArrayList()
          
    Dim newUIDataList As System.Collections.Generic.List(Of Hashtable) = New System.Collections.Generic.List(Of Hashtable)()

    ' Loop though all the record controls and if the record control
    ' does not have a unique record id set, then create a record
    ' and add to the list.
    If Not Me.ResetData Then
    Dim rep As System.Web.UI.WebControls.Repeater = CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeTableControlRepeater"), System.Web.UI.WebControls.Repeater)
    If rep Is Nothing Then Return

    Dim repItem As System.Web.UI.WebControls.RepeaterItem
    For Each repItem In rep.Items
    ' Loop through all rows in the table, set its DataSource and call DataBind().
    
    Dim recControl As DocTreeTableControlRow = DirectCast(repItem.FindControl("DocTreeTableControlRow"), DocTreeTableControlRow)

                    If recControl.Visible AndAlso recControl.IsNewRecord() Then
                    
                        Dim rec As DocTreeRecord = New DocTreeRecord()
        
                        rec.AlwaysShow = recControl.AlwaysShow.Checked
                
                        If recControl.CIX1.Text <> "" Then
                            rec.Parse(recControl.CIX1.Text, DocTreeTable.CIX)
                        End If
                        If recControl.CreatedAt1.Text <> "" Then
                            rec.Parse(recControl.CreatedAt1.Text, DocTreeTable.CreatedAt)
                        End If
                        If recControl.CreatedByID1.Text <> "" Then
                            rec.Parse(recControl.CreatedByID1.Text, DocTreeTable.CreatedByID)
                        End If
                        If recControl.DocDescription.Text <> "" Then
                            rec.Parse(recControl.DocDescription.Text, DocTreeTable.DocDescription)
                        End If
                        If recControl.DocIndex1.Text <> "" Then
                            rec.Parse(recControl.DocIndex1.Text, DocTreeTable.DocIndex)
                        End If
                        If recControl.DocName.Text <> "" Then
                            rec.Parse(recControl.DocName.Text, DocTreeTable.DocName)
                        End If
                        If recControl.DocSort1.Text <> "" Then
                            rec.Parse(recControl.DocSort1.Text, DocTreeTable.DocSort)
                        End If
                        If MiscUtils.IsValueSelected(recControl.DocTreeParentID1) Then
                            rec.Parse(recControl.DocTreeParentID1.SelectedItem.Value, DocTreeTable.DocTreeParentID)
                        End If
                        If MiscUtils.IsValueSelected(recControl.DocTypeID) Then
                            rec.Parse(recControl.DocTypeID.SelectedItem.Value, DocTreeTable.DocTypeID)
                        End If
                        rec.Folder = recControl.Folder.Checked
                
                        rec.Hide = recControl.Hide1.Checked
                
                        If recControl.ItemRank.Text <> "" Then
                            rec.Parse(recControl.ItemRank.Text, DocTreeTable.ItemRank)
                        End If
                        rec.OnApp = recControl.OnApp.Checked
                
                        rec.OneActiveCopy = recControl.OneActiveCopy.Checked
                
                        rec.PrivateFolder = recControl.PrivateFolder.Checked
                
                        rec.RecordDocDetails = recControl.RecordDocDetails.Checked
                
                        If recControl.UpdatedAt1.Text <> "" Then
                            rec.Parse(recControl.UpdatedAt1.Text, DocTreeTable.UpdatedAt)
                        End If
                        If recControl.UpdatedByID1.Text <> "" Then
                            rec.Parse(recControl.UpdatedByID1.Text, DocTreeTable.UpdatedByID)
                        End If
                        newUIDataList.Add(recControl.PreservedUIData())	  
                        newRecordList.Add(rec)
                    End If
                Next
            End If
            
    
            ' Add any new record to the list.
            Dim index As Integer = 0
            For index = 1 To Me.AddNewRecord
            
                newRecordList.Insert(0, New DocTreeRecord())
                newUIDataList.Insert(0, New Hashtable())				
              
            Next
            Me.AddNewRecord = 0

            ' Finally, add any new records to the DataSource.
            If newRecordList.Count > 0 Then
            
                Dim finalList As ArrayList = New ArrayList(Me.DataSource)
                finalList.InsertRange(0, newRecordList)

                Me.DataSource = DirectCast(finalList.ToArray(GetType(DocTreeRecord)), DocTreeRecord())
              
            End If
            
            ' Add the existing UI data to this hash table
            If newUIDataList.Count > 0 Then
                Me.UIData.InsertRange(0, newUIDataList)
            End If
            
        End Sub

        
        Public Sub AddToDeletedRecordIds(ByVal rec As DocTreeTableControlRow)
            If rec.IsNewRecord() Then
                Return
            End If

            If Not Me.DeletedRecordIds Is Nothing AndAlso Me.DeletedRecordIds.Trim <> "" Then
                Me.DeletedRecordIds &= ","
            End If

            Me.DeletedRecordIds &= "[" & rec.RecordUniqueId & "]"
        End Sub

        Protected Overridable Function InDeletedRecordIds(ByVal rec As DocTreeTableControlRow) As Boolean
            If Me.DeletedRecordIds Is Nothing OrElse Me.DeletedRecordIds.Trim = "" Then
                Return False
            End If

            Return Me.DeletedRecordIds.IndexOf("[" & rec.RecordUniqueId & "]") >= 0
        End Function

        Private _DeletedRecordIds As String
        Public Property DeletedRecordIds() As String
            Get
                Return Me._DeletedRecordIds
            End Get
            Set(ByVal value As String)
                Me._DeletedRecordIds = value
            End Set
        End Property
        
      
        ' Create Set, WhereClause, and Populate Methods
        
        Public Overridable Sub SetAlwaysShowSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetCIXSortLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedAtSortLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetCreatedByIDSortLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetDocNameSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetDocTreeParentIDSortLabel1()
                  
                  End Sub
                
        Public Overridable Sub SetDocTypeIDSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetFolderSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetItemRankSortLabel()
                  
                  End Sub
                
        Public Overridable Sub SetUpdatedAtSortLabel1()
                  
                  End Sub
                

    
    
        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction
                Me.RegisterPostback()
                
                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Dim added As Boolean = Me.AddNewRecord > 0
                    Me.LoadData()
                    Me.DataBind()
                    
                    If added Then
                        Me.SetFocusToAddedRow()
                    End If
                    
                End If
                
               
                				
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction
            End Try
        End Sub
        
        'this function sets focus to the first editable element in the new added row in the editable table	
        Protected Overridable Sub SetFocusToAddedRow()
            Dim rep As System.Web.UI.WebControls.Repeater = CType(Me.FindControl("DocTreeTableControlRepeater"), System.Web.UI.WebControls.Repeater)
            If rep Is Nothing OrElse rep.Items.Count = 0 Then Return
            Dim repItem As System.Web.UI.WebControls.RepeaterItem
            For Each repItem In rep.Items  
                'Load scripts to table rows
                Me.Page.LoadFocusScripts(repItem)
                Dim recControl As DocTreeTableControlRow = DirectCast(repItem.FindControl("DocTreeTableControlRow"), DocTreeTableControlRow)
                If recControl.IsNewRecord Then
                    For Each field As Control In recControl.Controls
                        If field.Visible AndAlso Me.Page.IsControlEditable(field, False) Then
                            'set focus on the first editable field in the new row
                            field.Focus()
                            Dim updPan As UpdatePanel = DirectCast(Me.Page.FindControlRecursively("UpdatePanel1"), UpdatePanel)
                            If Not updPan Is Nothing Then updPan.Update()
                            Return
                        End If
                    Next
                    Return
                End If
            Next
        End Sub
        
        
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()

            ' Save filter controls to values to session.
        
        
            'Save pagination state to session.
        
            
            
            ' Save table control properties to the session.
            If Not Me.CurrentSortOrder Is Nothing Then
            Me.SaveToSession(Me, "Order_By", Me.CurrentSortOrder.ToXmlString())
            End If
            
            Me.SaveToSession(Me, "Page_Index", Me.PageIndex.ToString())
            Me.SaveToSession(Me, "Page_Size", Me.PageSize.ToString())
        
            Me.SaveToSession(Me, "DeletedRecordIds", Me.DeletedRecordIds)  
        
        End Sub
        
        Protected  Sub SaveControlsToSession_Ajax()
            ' Save filter controls to values to session.
          
            HttpContext.Current.Session("AppRelativeVirtualPath") = Me.Page.AppRelativeVirtualPath
         
        End Sub
        
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

            ' Clear filter controls values from the session.
        
    
            ' Clear pagination state from session.
        


    ' Clear table properties from the session.
    Me.RemoveFromSession(Me, "Order_By")
    Me.RemoveFromSession(Me, "Page_Index")
    Me.RemoveFromSession(Me, "Page_Size")
    
            Me.RemoveFromSession(Me, "DeletedRecordIds")  
            
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)

            Dim orderByStr As String = CType(ViewState("DocTreeTableControl_OrderBy"), String)
            
            If orderByStr IsNot Nothing AndAlso orderByStr.Trim <> "" Then
                Me.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr)
            Else
                Me.CurrentSortOrder = New OrderBy(True, False)
            End If
            
    Dim pageIndex As String = CType(ViewState("Page_Index"), String)
    If pageIndex IsNot Nothing Then
    Me.PageIndex = CInt(pageIndex)
    End If

    Dim pageSize As String = CType(ViewState("Page_Size"), String)
    If Not pageSize Is Nothing Then
    Me.PageSize = CInt(pageSize)
    End If

    
    
            ' Load view state for pagination control.
        
            Me.DeletedRecordIds = CType(Me.ViewState("DeletedRecordIds"), String)
        
        End Sub

        Protected Overrides Function SaveViewState() As Object
            
            If Me.CurrentSortOrder IsNot Nothing Then
                Me.ViewState("DocTreeTableControl_OrderBy") = Me.CurrentSortOrder.ToXmlString()
            End If
                      
            Me.ViewState("Page_Index") = Me.PageIndex
            Me.ViewState("Page_Size") = Me.PageSize
            
            Me.ViewState("DeletedRecordIds") = Me.DeletedRecordIds
        
    
            ' Load view state for pagination control.
          
    
            Return MyBase.SaveViewState()
        End Function

        ' Generate the event handling functions for pagination events.
        
        ' event handler for ImageButton
        Public Overridable Sub DocTreePagination_FirstPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.PageIndex = 0
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub DocTreePagination_LastPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.DisplayLastPage = True
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub DocTreePagination_NextPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            Me.PageIndex += 1
            Me.DataChanged = True
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        
        ' event handler for LinkButton
        Public Overridable Sub DocTreePagination_PageSizeButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            Me.DataChanged = True
      
            Me.PageSize = Integer.Parse(Me.DocTreePagination.PageSize.Text)
      
            Me.PageIndex = Integer.Parse(Me.DocTreePagination.CurrentPage.Text) - 1
          
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
        ' event handler for ImageButton
        Public Overridable Sub DocTreePagination_PreviousPage_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    
            If Me.PageIndex > 0 Then
                Me.PageIndex -= 1
                Me.DataChanged = True
            End If
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
                  
        End Sub
        

        ' Generate the event handling functions for sorting events.
        
        Public Overridable Sub AlwaysShowSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by AlwaysShow when clicked.
              
            ' Get previous sorting state for AlwaysShow.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.AlwaysShow)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for AlwaysShow.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.AlwaysShow, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by AlwaysShow, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CIXSortLabel1_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CIX when clicked.
              
            ' Get previous sorting state for CIX.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.CIX)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CIX.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.CIX, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CIX, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CreatedAtSortLabel1_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CreatedAt when clicked.
              
            ' Get previous sorting state for CreatedAt.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.CreatedAt)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CreatedAt.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.CreatedAt, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CreatedAt, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub CreatedByIDSortLabel1_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by CreatedByID when clicked.
              
            ' Get previous sorting state for CreatedByID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.CreatedByID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for CreatedByID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.CreatedByID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by CreatedByID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub DocNameSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by DocName when clicked.
              
            ' Get previous sorting state for DocName.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.DocName)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for DocName.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.DocName, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by DocName, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub DocTreeParentIDSortLabel1_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by DocTreeParentID when clicked.
              
            ' Get previous sorting state for DocTreeParentID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.DocTreeParentID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for DocTreeParentID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.DocTreeParentID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by DocTreeParentID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub DocTypeIDSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by DocTypeID when clicked.
              
            ' Get previous sorting state for DocTypeID.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.DocTypeID)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for DocTypeID.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.DocTypeID, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by DocTypeID, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub FolderSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by Folder when clicked.
              
            ' Get previous sorting state for Folder.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.Folder)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for Folder.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.Folder, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by Folder, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub ItemRankSortLabel_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by ItemRank when clicked.
              
            ' Get previous sorting state for ItemRank.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.ItemRank)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for ItemRank.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.ItemRank, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by ItemRank, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            
        Public Overridable Sub UpdatedAtSortLabel1_Click(ByVal sender As Object, ByVal args As EventArgs)
            ' Sorts by UpdatedAt when clicked.
              
            ' Get previous sorting state for UpdatedAt.
            
            Dim sd As OrderByItem = Me.CurrentSortOrder.Find(DocTreeTable.UpdatedAt)
            If sd Is Nothing OrElse (Me.CurrentSortOrder.Items IsNot Nothing Andalso Me.CurrentSortOrder.Items.Length > 1) Then
                ' First time sort, so add sort order for UpdatedAt.
                Me.CurrentSortOrder.Reset()
                Me.CurrentSortOrder.Add(DocTreeTable.UpdatedAt, OrderByItem.OrderDir.Asc)
            Else
                ' Previously sorted by UpdatedAt, so just reverse.
                sd.Reverse()
            End If
            
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
              
        End Sub
            

        ' Generate the event handling functions for button events.
        
        ' event handler for ImageButton
        Public Overridable Sub DocTreeAddButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            Me.AddNewRecord = 1
            Me.DataChanged = True
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for ImageButton
        Public Overridable Sub DocTreeDeleteButton_Click(ByVal sender As Object, ByVal args As ImageClickEventArgs)
        
    Try
    ' Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction
                
            If(Not Me.Page.IsPageRefresh) Then
        
                Me.DeleteSelectedRecords(True)
                Me.SetFormulaControls()
                
          
            End If
      
            Catch ex As Exception
                ' Upon error, rollback the transaction
                Me.Page.RollBackTransaction(sender)
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
                DbUtils.EndTransaction
            End Try
                  
        End Sub
        
        ' event handler for Button with Layout
        Public Overridable Sub DocTreeButtonsButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            'This method is initially empty to implement custom click handler.
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
        ' event handler for Button with Layout
        Public Overridable Sub DocTreeFiltersButton_Click(ByVal sender As Object, ByVal args As EventArgs)
              
    Try
    
            'This method is initially empty to implement custom click handler.
      
            Catch ex As Exception
                Me.Page.ErrorOnPage = True
    
                ' Report the error message to the end user
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
    
            Finally
    
            End Try
    
        End Sub
            
      

        ' Generate the event handling functions for filter and search events.
        
      
        ' Generate the event handling functions for others
        
      
        Private _UIData As New System.Collections.Generic.List(Of Hashtable)
        Public Property UIData() As System.Collections.Generic.List(Of Hashtable)
            Get
                Return Me._UIData
            End Get
            Set(ByVal value As System.Collections.Generic.List(Of Hashtable))
                Me._UIData = value
            End Set
        End Property
        
        ' pagination properties
        Protected _PageSize As Integer
        Public Property PageSize() As Integer
            Get
                Return Me._PageSize
            End Get
            Set(ByVal value As Integer)
                Me._PageSize = value
            End Set
        End Property

        Protected _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property

        Protected _TotalRecords As Integer = -1
        Public Property TotalRecords() As Integer
            Get
                If _TotalRecords < 0 
                    _TotalRecords = DocTreeTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause())
                End If
                Return Me._TotalRecords
            End Get
            Set(ByVal value As Integer)
                If Me.PageSize > 0 Then
                
                    Me.TotalPages = CInt(Math.Ceiling(value / Me.PageSize))
                  
                End If
                Me._TotalRecords = value
            End Set
        End Property

        
    
        Protected _TotalPages As Integer = -1
        Public Property TotalPages() As Integer
            Get
                If _TotalPages < 0 Then
                
                    Me.TotalPages = CInt(Math.Ceiling(TotalRecords / Me.PageSize))
                  
                End If                
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property

        Protected _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal value As Boolean)
                Me._DataChanged = value
            End Set
        End Property
        
        Private _ResetData As Boolean = False
        Public Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal value As Boolean)
                Me._ResetData = value
            End Set
        End Property

        Private _AddNewRecord As Integer = 0
        Public Property AddNewRecord() As Integer
            Get
                Return Me._AddNewRecord
            End Get
            Set(ByVal value As Integer)
                Me._AddNewRecord = value
            End Set
        End Property

        
        Private _CurrentSortOrder As OrderBy = Nothing
        Public Property CurrentSortOrder() As OrderBy
            Get
                Return Me._CurrentSortOrder
            End Get
            Set(ByVal value As BaseClasses.Data.OrderBy)
                Me._CurrentSortOrder = value
            End Set
        End Property
        
        Private _DataSource() As DocTreeRecord = Nothing
        Public Property DataSource() As DocTreeRecord ()
            Get
                Return Me._DataSource
            End Get
            Set(ByVal value() As DocTreeRecord)
                Me._DataSource = value
            End Set
        End Property
       
#Region "Helper Properties"
        
        Public ReadOnly Property AlwaysShowSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "AlwaysShowSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CIXSortLabel1() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CIXSortLabel1"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CreatedAtSortLabel1() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedAtSortLabel1"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property CreatedByIDSortLabel1() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "CreatedByIDSortLabel1"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property DocNameSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocNameSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeAddButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeAddButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeButtonsButton() As FASTPORT.UI.IThemeButtonWithArrow
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeButtonsButton"), FASTPORT.UI.IThemeButtonWithArrow)
          End Get
          End Property
        
        Public ReadOnly Property DocTreeDeleteButton() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeDeleteButton"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeFiltersButton() As FASTPORT.UI.IThemeButtonWithArrow
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeFiltersButton"), FASTPORT.UI.IThemeButtonWithArrow)
          End Get
          End Property
        
        Public ReadOnly Property DocTreePagination() As FASTPORT.UI.IPaginationModern
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreePagination"), FASTPORT.UI.IPaginationModern)
          End Get
          End Property
        
        Public ReadOnly Property DocTreeParentIDSortLabel1() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeParentIDSortLabel1"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property DocTreeToggleAll() As System.Web.UI.WebControls.CheckBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTreeToggleAll"), System.Web.UI.WebControls.CheckBox)
            End Get
        End Property
        
        Public ReadOnly Property DocTypeIDSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "DocTypeIDSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property FolderSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "FolderSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property ItemRankSortLabel() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "ItemRankSortLabel"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
        Public ReadOnly Property UpdatedAtSortLabel1() As System.Web.UI.WebControls.LinkButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "UpdatedAtSortLabel1"), System.Web.UI.WebControls.LinkButton)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"
        
        Public Overrides Overloads Function ModifyRedirectUrl(url As String, arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function
      
        Public Overrides Overloads Function EvaluateExpressions(url As String, arg As String, ByVal bEncrypt As Boolean) As String
            Dim needToProcess As Boolean = AreAnyUrlParametersForMe(url, arg)
            If (needToProcess) Then
                Dim recCtl As DocTreeTableControlRow = Me.GetSelectedRecordControl()
                If recCtl Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                    ' Localization.
                    Throw New Exception(Page.GetResourceValue("Err:NoRecSelected", "FASTPORT"))
                End If
                Dim rec As DocTreeRecord = Nothing     
                If recCtl IsNot Nothing Then
                    rec = recCtl.GetRecord()
                End If
                Return EvaluateExpressions(url, arg, rec, bEncrypt)
            End If
            Return url
        End Function
          
        Public Overridable Function GetSelectedRecordIndex() As Integer
            Dim counter As Integer = 0
            Dim recControl As DocTreeTableControlRow
            For Each recControl In Me.GetRecordControls()
                If recControl.DocTreeRecordRowSelection.Checked Then
                    Return counter
                End If
                counter += 1
            Next
            Return -1
        End Function
        
        Public Overridable Function GetSelectedRecordControl() As DocTreeTableControlRow
            Dim selectedList() As DocTreeTableControlRow = Me.GetSelectedRecordControls()
            If selectedList.Length = 0 Then
                Return Nothing
            End If
            Return selectedList(0)
          
        End Function

        Public Overridable Function GetSelectedRecordControls() As DocTreeTableControlRow()
        
            Dim selectedList As ArrayList = New ArrayList(25)
            Dim recControl As DocTreeTableControlRow
            For Each recControl In Me.GetRecordControls()
                If recControl.DocTreeRecordRowSelection IsNot Nothing AndAlso recControl.DocTreeRecordRowSelection.Checked Then
                    selectedList.Add(recControl)
                End If
            Next
            Return DirectCast(selectedList.ToArray(GetType(DocTreeTableControlRow)), DocTreeTableControlRow())
          
        End Function

        Public Overridable Sub DeleteSelectedRecords(ByVal deferDeletion As Boolean)
            Dim recList() As DocTreeTableControlRow = Me.GetSelectedRecordControls()
            If recList.Length = 0 Then
                ' Localization.
                Throw New Exception(Page.GetResourceValue("Err:NoRecSelected", "FASTPORT"))
            End If
            
            Dim recCtl As DocTreeTableControlRow
            For Each recCtl In recList
                If deferDeletion Then
                    If Not recCtl.IsNewRecord Then
                
                        Me.AddToDeletedRecordIds(recCtl)
                  
                    End If
                    recCtl.Visible = False
                
                    recCtl.DocTreeRecordRowSelection.Checked = False
                
                Else
                
                    recCtl.Delete()
                    
                    ' Setting the DataChanged to True results in the page being refreshed with
                    ' the most recent data from the database.  This happens in PreRender event
                    ' based on the current sort, search and filter criteria.
                    Me.DataChanged = True
                    Me.ResetData = True
                  
                End If
            Next
        End Sub

        Public Function GetRecordControls() As DocTreeTableControlRow()
            Dim recList As ArrayList = New ArrayList()
            Dim rep As System.Web.UI.WebControls.Repeater = CType(Me.FindControl("DocTreeTableControlRepeater"), System.Web.UI.WebControls.Repeater)
            If rep Is Nothing Then Return Nothing
            Dim repItem As System.Web.UI.WebControls.RepeaterItem

            For Each repItem In rep.Items
            
                Dim recControl As DocTreeTableControlRow = DirectCast(repItem.FindControl("DocTreeTableControlRow"), DocTreeTableControlRow)
                recList.Add(recControl)
              
            Next

            Return DirectCast(recList.ToArray(GetType(DocTreeTableControlRow)), DocTreeTableControlRow())
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

    

End Class

  
' Base class for the RoleRecordControl control on the EditRole page.
' Do not modify this class. Instead override any method in RoleRecordControl.
Public Class BaseRoleRecordControl
        Inherits FASTPORT.UI.BaseApplicationRecordControl

        '  To customize, override this method in RoleRecordControl.
        Protected Overridable Sub Control_Init(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Init
      
            ' Setup the filter and search events.
            
            Me.ClearControlsFromSession()
        End Sub

        '  To customize, override this method in RoleRecordControl.
        Protected Overridable Sub Control_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        
              ' Setup the pagination events.	  
                     
        
              ' Register the event handlers.
          
              Me.GeneralRoleIDAddRecordLink.PostBackUrl = "../Role/AddRole.aspx" & "?Target=" & Me.GeneralRoleID.ClientID & "&DFKA=" & HttpUtility.UrlEncode("Role")
              Me.GeneralRoleIDAddRecordLink.Attributes.Item("onClick") = "window.open('" & Me.GeneralRoleIDAddRecordLink.PostBackUrl & "','_blank', 'width=900, height=700, resizable, scrollbars, modal=yes'); return false;"
              
              AddHandler Me.GeneralRoleID.SelectedIndexChanged, AddressOf GeneralRoleID_SelectedIndexChanged
            
              AddHandler Me.RoleTypeID.SelectedIndexChanged, AddressOf RoleTypeID_SelectedIndexChanged
            
              AddHandler Me.Role.TextChanged, AddressOf Role_TextChanged
            
              AddHandler Me.RoleDescription.TextChanged, AddressOf RoleDescription_TextChanged
            
              AddHandler Me.RoleRank.TextChanged, AddressOf RoleRank_TextChanged
            
    
        End Sub

        
        Public Overridable Sub LoadData()        
                
            ' Load the data from the database into the DataSource Role record.
            ' It is better to make changes to functions called by LoadData such as
            ' CreateWhereClause, rather than making changes here.
    
            ' The RecordUniqueId is set the first time a record is loaded, and is
            ' used during a PostBack to load the record.
          
            If Me.RecordUniqueId IsNot Nothing AndAlso Me.RecordUniqueId.Trim <> "" Then
                Me.DataSource = RoleTable.GetRecord(Me.RecordUniqueId, True)
          
                Return
            End If
        
            ' This is the first time a record is being retrieved from the database.
            ' So create a Where Clause based on the staic Where clause specified
            ' on the Query wizard and the dynamic part specified by the end user
            ' on the search and filter controls (if any).
            
            Dim wc As WhereClause = Me.CreateWhereClause()
          
            Dim Panel As System.Web.UI.WebControls.Panel = CType(MiscUtils.FindControlRecursively(Me, "RoleRecordControlPanel"), System.Web.UI.WebControls.Panel)
            If Not Panel is Nothing Then
                Panel.visible = True
            End If
            
            ' If there is no Where clause, then simply create a new, blank record.
             
            If wc Is Nothing OrElse Not wc.RunQuery Then
                Me.DataSource = New RoleRecord()
            
                If Not Panel is Nothing Then
                    Panel.visible = False
                End If
                
                Return
            End If
          
            ' Retrieve the record from the database.  It is possible
            
            Dim recList() As RoleRecord = RoleTable.GetRecords(wc, Nothing, 0, 2)
            If recList.Length = 0 Then
                ' There is no data for this Where clause.
                wc.RunQuery = False
                
                If Not Panel is Nothing Then
                    Panel.visible = False
                End If
                
                Return
            End If
            
            ' Set DataSource based on record retrieved from the database.
            Me.DataSource = RoleTable.GetRecord(recList(0).GetID.ToXmlString(), True)
                  
    
    
        End Sub

        ' Populate the UI controls using the DataSource.  To customize, override this method in RoleRecordControl.
        Public Overrides Sub DataBind()
            ' The DataBind method binds the user interface controls to the values
            ' from the database record.  To do this, it calls the Set methods for 
            ' each of the field displayed on the webpage.  It is better to make 
            ' changes in the Set methods, rather than making changes here.
            
            MyBase.DataBind()

            ' Make sure that the DataSource is initialized.
            If Me.DataSource Is Nothing Then
    
                Return
            End If
            
    
            'LoadData for DataSource for chart and report if they exist
          
            ' Store the checksum. The checksum is used to
            ' ensure the record was not changed by another user.
            If Not Me.DataSource.GetCheckSumValue() Is Nothing
                Me.CheckSum = Me.DataSource.GetCheckSumValue().Value
            End If
            
      
      
            ' Call the Set methods for each controls on the panel
        
                SetGeneralRoleID()
                
                SetGeneralRoleIDLabel()
                SetRole()
                SetRoleDescription()
                SetRoleDescriptionLabel()
                SetRoleLabel()
                SetRoleRank()
                SetRoleRankLabel()
                
                SetRoleTypeID()
                SetRoleTypeIDLabel()
      
      
            Me.IsNewRecord = True
            
            If Me.DataSource.IsCreated Then
                Me.IsNewRecord = False
                
                Me.RecordUniqueId = Me.DataSource.GetID.ToXmlString()
            End If
          
            ' Now load data for each record and table child UI controls.
            ' Ordering is important because child controls get 
            ' their parent ids from their parent UI controls.
            Dim shouldResetControl As Boolean = False
            
        Dim recAgreementTableControl as AgreementTableControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "AgreementTableControl"), AgreementTableControl)
        
            If (shouldResetControl OrElse Me.Page.IsPageRefresh)
              recAgreementTableControl.ResetControl()
            End IF
        
        recAgreementTableControl.LoadData()
        recAgreementTableControl.DataBind()
        
        Dim recCarrierAdContactsTableControl as CarrierAdContactsTableControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl)
        
            If (shouldResetControl OrElse Me.Page.IsPageRefresh)
              recCarrierAdContactsTableControl.ResetControl()
            End IF
        
        recCarrierAdContactsTableControl.LoadData()
        recCarrierAdContactsTableControl.DataBind()
        
        Dim recDocTreeTableControl as DocTreeTableControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "DocTreeTableControl"), DocTreeTableControl)
        
            If (shouldResetControl OrElse Me.Page.IsPageRefresh)
              recDocTreeTableControl.ResetControl()
            End IF
        
        recDocTreeTableControl.LoadData()
        recDocTreeTableControl.DataBind()
              
        End Sub
        
        
        Public Overridable Sub SetGeneralRoleID()
            
        
            ' Set the GeneralRoleID DropDownList on the webpage with value from the
            ' Role database record.
            
            ' Me.DataSource is the Role record retrieved from the database.
            ' Me.GeneralRoleID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetGeneralRoleID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.GeneralRoleIDSpecified Then
                            
                ' If the GeneralRoleID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateGeneralRoleIDDropDownList(Me.DataSource.GeneralRoleID.ToString(), 100)
                
            Else
                
                ' GeneralRoleID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateGeneralRoleIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateGeneralRoleIDDropDownList(RoleTable.GeneralRoleID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetRole()
            
        
            ' Set the Role TextBox on the webpage with value from the
            ' Role database record.

            ' Me.DataSource is the Role record retrieved from the database.
            ' Me.Role is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetRole()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RoleSpecified Then
                				
                ' If the Role is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(RoleTable.Role)
                              
                Me.Role.Text = formattedValue
                
            Else 
            
                ' Role is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.Role.Text = RoleTable.Role.Format(RoleTable.Role.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetRoleDescription()
            
        
            ' Set the RoleDescription TextBox on the webpage with value from the
            ' Role database record.

            ' Me.DataSource is the Role record retrieved from the database.
            ' Me.RoleDescription is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetRoleDescription()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RoleDescriptionSpecified Then
                				
                ' If the RoleDescription is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(RoleTable.RoleDescription)
                              
                Me.RoleDescription.Text = formattedValue
                
            Else 
            
                ' RoleDescription is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.RoleDescription.Text = RoleTable.RoleDescription.Format(RoleTable.RoleDescription.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetRoleRank()
            
        
            ' Set the RoleRank TextBox on the webpage with value from the
            ' Role database record.

            ' Me.DataSource is the Role record retrieved from the database.
            ' Me.RoleRank is the ASP:TextBox on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetRoleRank()
            ' and add your own code before or after the call to the MyBase function.

            
                  
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RoleRankSpecified Then
                				
                ' If the RoleRank is non-NULL, then format the value.

                ' The Format method will use the Display Format
                                Dim formattedValue As String = Me.DataSource.Format(RoleTable.RoleRank)
                              
                Me.RoleRank.Text = formattedValue
                
            Else 
            
                ' RoleRank is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
        
                Me.RoleRank.Text = RoleTable.RoleRank.Format(RoleTable.RoleRank.DefaultValue)
                        		
                End If
                 
        End Sub
                
        Public Overridable Sub SetRoleTypeID()
            
        
            ' Set the RoleTypeID DropDownList on the webpage with value from the
            ' Role database record.
            
            ' Me.DataSource is the Role record retrieved from the database.
            ' Me.RoleTypeID is the ASP:DropDownList on the webpage.
            
            ' You can modify this method directly, or replace it with a call to
            '     MyBase.SetRoleTypeID()
            ' and add your own code before or after the call to the MyBase function.

            
            If Me.DataSource IsNot Nothing AndAlso Me.DataSource.RoleTypeIDSpecified Then
                            
                ' If the RoleTypeID is non-NULL, then format the value.
                ' The Format method will return the Display Foreign Key As (DFKA) value
                Me.PopulateRoleTypeIDDropDownList(Me.DataSource.RoleTypeID.ToString(), 100)
                
            Else
                
                ' RoleTypeID is NULL in the database, so use the Default Value.  
                ' Default Value could also be NULL.
                If Me.DataSource IsNot Nothing AndAlso Me.DataSource.IsCreated Then
                    Me.PopulateRoleTypeIDDropDownList(Nothing, 100)
                Else
                    Me.PopulateRoleTypeIDDropDownList(RoleTable.RoleTypeID.DefaultValue, 100)
                End If
                				
            End If			
                
        End Sub
                
        Public Overridable Sub SetGeneralRoleIDLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRoleDescriptionLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRoleLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRoleRankLabel()
                  
                  End Sub
                
        Public Overridable Sub SetRoleTypeIDLabel()
                  
                  End Sub
                
        Public Overridable Sub ResetControl()
          
        End Sub
        

        Public EvaluateFormulaDelegate As BaseClasses.Data.DataSource.EvaluateFormulaDelegate = New BaseClasses.Data.DataSource.EvaluateFormulaDelegate(AddressOf Me.EvaluateFormula)

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean, ByVal e As FormulaEvaluator) As String
            If e Is Nothing Then
                e = New FormulaEvaluator()
            End If
            
            e.Variables.Clear()

            
            ' add variables for formula evaluation
            If variables IsNot Nothing Then
                Dim enumerator As System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of String, Object)) = variables.GetEnumerator()
                While enumerator.MoveNext()
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value)
                End While
            End If

            If includeDS
                
            End IF
            
            
            ' Other variables referred to in the formula are expected to be
            ' properties of the DataSource.  For example, referring to
            ' UnitPrice as a variable will refer to DataSource.UnitPrice
            If dataSourceForEvaluate Is Nothing Then

                e.DataSource = Me.DataSource

            Else
                e.DataSource = dataSourceForEvaluate
            End If

            ' Define the calling control.  This is used to add other 
            ' related table and record controls as variables.
            e.CallingControl = Me

            Dim resultObj As Object = e.Evaluate(formula)
            If resultObj Is Nothing Then
                Return ""
            End If

            If Not String.IsNullOrEmpty(format) AndAlso (String.IsNullOrEmpty(formula) OrElse formula.IndexOf("Format(") < 0) Then
                Return FormulaUtils.Format(resultObj, format)
            Else
                Return resultObj.ToString()
            End If
        End Function      
        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate as BaseClasses.Data.BaseRecord, ByVal format as String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal includeDS As Boolean) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format,variables ,includeDS, Nothing)        
        End Function        

        
        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object)) As String
            Return EvaluateFormula(formula, dataSourceForEvaluate, format, variables ,True, Nothing)        
        End Function        

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal format As String) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, format, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord, ByVal variables As System.Collections.Generic.IDictionary(Of String, Object), ByVal e as FormulaEvaluator) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, variables, True, e)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal dataSourceForEvaluate As BaseClasses.Data.BaseRecord) As String
            Return Me.EvaluateFormula(formula, dataSourceForEvaluate, Nothing, Nothing, True, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String, ByVal includeDS as Boolean) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, includeDS, Nothing)
        End Function

        Public Overridable Function EvaluateFormula(ByVal formula As String) As String
            Return Me.EvaluateFormula(formula, Nothing, Nothing, Nothing, True, Nothing)
        End Function


        Public Overridable Sub RegisterPostback()
        
        
        End Sub

      
        
        ' To customize, override this method in RoleRecordControl.
        Public Overridable Sub SaveData()
            ' Saves the associated record in the database.
            ' SaveData calls Validate and Get methods - so it may be more appropriate to
            ' customize those methods.

            ' 1. Load the existing record from the database. Since we save the entire record, this ensures 
            ' that fields that are not displayed are also properly initialized.
            Me.LoadData()
        
            ' The checksum is used to ensure the record was not changed by another user.
            If (Not Me.DataSource Is Nothing) AndAlso (Not Me.DataSource.GetCheckSumValue Is Nothing) Then
                If Not Me.CheckSum Is Nothing AndAlso Me.CheckSum <> Me.DataSource.GetCheckSumValue.Value Then
                    Throw New Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "FASTPORT"))
                End If
            End If
        
          Dim Panel As System.Web.UI.WebControls.Panel = CType(MiscUtils.FindControlRecursively(Me, "RoleRecordControlPanel"), System.Web.UI.WebControls.Panel)

          If ((Not IsNothing(Panel)) AndAlso (Not Panel.Visible)) OrElse IsNothing(Me.DataSource) Then
              Return
          End If
          
              
            ' 2. Perform any custom validation.
            Me.Validate()

            
            ' 3. Set the values in the record with data from UI controls.
            ' This calls the Get() method for each of the user interface controls.
            Me.GetUIData()

            ' 4. Save in the database.
            ' We should not save the record if the data did not change. This
            ' will save a database hit and avoid triggering any database triggers.
             
            If Me.DataSource.IsAnyValueChanged Then
                ' Save record to database but do not commit yet.
                ' Auto generated ids are available after saving for use by child (dependent) records.
                Me.DataSource.Save()
              
            End If
            
      
            ' update session or cookie by formula
                                    
      
            ' Setting the DataChanged to True results in the page being refreshed with
            ' the most recent data from the database.  This happens in PreRender event
            ' based on the current sort, search and filter criteria.
            Me.DataChanged = True
            Me.ResetData = True
            
            Me.CheckSum = ""
            ' For Master-Detail relationships, save data on the Detail table(s)
          
        Dim recAgreementTableControl as AgreementTableControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "AgreementTableControl"), AgreementTableControl)
        recAgreementTableControl.SaveData()
        
        Dim recCarrierAdContactsTableControl as CarrierAdContactsTableControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "CarrierAdContactsTableControl"), CarrierAdContactsTableControl)
        recCarrierAdContactsTableControl.SaveData()
        
        Dim recDocTreeTableControl as DocTreeTableControl = DirectCast(MiscUtils.FindControlRecursively(Me.Page, "DocTreeTableControl"), DocTreeTableControl)
        recDocTreeTableControl.SaveData()
        
        End Sub

        ' To customize, override this method in RoleRecordControl.
        Public Overridable Sub GetUIData()
            ' The GetUIData method retrieves the updated values from the user interface 
            ' controls into a database record in preparation for saving or updating.
            ' To do this, it calls the Get methods for each of the field displayed on 
            ' the webpage.  It is better to make changes in the Get methods, rather 
            ' than making changes here.
      
            ' Call the Get methods for each of the user interface controls.
        
            GetGeneralRoleID()
            GetRole()
            GetRoleDescription()
            GetRoleRank()
            GetRoleTypeID()
        End Sub
        
        
        Public Overridable Sub GetGeneralRoleID()
         
            ' Retrieve the value entered by the user on the GeneralRoleID ASP:DropDownList, and
            ' save it into the GeneralRoleID field in DataSource Role record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.GeneralRoleID), RoleTable.GeneralRoleID)				
            
        End Sub
                
        Public Overridable Sub GetRole()
            
            ' Retrieve the value entered by the user on the Role ASP:TextBox, and
            ' save it into the Role field in DataSource Role record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.Role.Text, RoleTable.Role)			

                      
        End Sub
                
        Public Overridable Sub GetRoleDescription()
            
            ' Retrieve the value entered by the user on the RoleDescription ASP:TextBox, and
            ' save it into the RoleDescription field in DataSource Role record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.RoleDescription.Text, RoleTable.RoleDescription)			

                      
        End Sub
                
        Public Overridable Sub GetRoleRank()
            
            ' Retrieve the value entered by the user on the RoleRank ASP:TextBox, and
            ' save it into the RoleRank field in DataSource Role record.
            
            ' Custom validation should be performed in Validate, not here.
            
            'Save the value to data source
            Me.DataSource.Parse(Me.RoleRank.Text, RoleTable.RoleRank)			

                      
        End Sub
                
        Public Overridable Sub GetRoleTypeID()
         
            ' Retrieve the value entered by the user on the RoleTypeID ASP:DropDownList, and
            ' save it into the RoleTypeID field in DataSource Role record.
                        
            ' Custom validation should be performed in Validate, not here.
            
            Me.DataSource.Parse(GetValueSelectedPageRequest(Me.RoleTypeID), RoleTable.RoleTypeID)				
            
        End Sub
                
      
        ' To customize, override this method in RoleRecordControl.
        
        Public Overridable Function CreateWhereClause() As WhereClause
        
        Dim hasFiltersAgreementTableControl As Boolean = False
      
        Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
      
        Dim hasFiltersDocTreeTableControl As Boolean = False
      
        Dim hasFiltersRoleRecordControl As Boolean = False
      
            Dim wc As WhereClause
            RoleTable.Instance.InnerFilter = Nothing
            wc = New WhereClause()
            
            ' Compose the WHERE clause consiting of:
            ' 1. Static clause defined at design time.
            ' 2. User selected filter criteria.
            ' 3. User selected search criteria.

            
            ' Retrieve the record id from the URL parameter.
              
                  Dim recId As String = DirectCast(Me.Page, BaseApplicationPage).Decrypt(Me.Page.Request.QueryString.Item("Role"))
                
            If recId Is Nothing OrElse recId.Trim = "" Then
                ' Get the error message from the application resource file.
                Throw New Exception(Page.GetResourceValue("Err:UrlParamMissing", "FASTPORT").Replace("{URL}", "Role"))
            End If
            HttpContext.Current.Session("QueryString in EditRole") = recId
              
            If KeyValue.IsXmlKey(recId) Then
                ' Keys are typically passed as XML structures to handle composite keys.
                ' If XML, then add a Where clause based on the Primary Key in the XML.
                Dim pkValue As KeyValue = KeyValue.XmlToKey(recId)
                
                wc.iAND(RoleTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, pkValue.GetColumnValueString(RoleTable.RoleID))
        
            Else
                ' The URL parameter contains the actual value, not an XML structure.
                
                wc.iAND(RoleTable.RoleID, BaseFilter.ComparisonOperator.EqualsTo, recId)
        
            End If
              
            Return wc
          
        End Function
        
        ' This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
        
        Public Overridable Function CreateWhereClause(ByVal searchText As String, ByVal fromSearchControl As String, ByVal AutoTypeAheadSearch As String, ByVal AutoTypeAheadWordSeparators As String) As WhereClause
            RoleTable.Instance.InnerFilter = Nothing
            Dim wc As WhereClause = New WhereClause()
        
                Dim hasFiltersAgreementTableControl As Boolean = False
              
                Dim hasFiltersCarrierAdContactsTableControl As Boolean = False
              
                Dim hasFiltersDocTreeTableControl As Boolean = False
              
                Dim hasFiltersRoleRecordControl As Boolean = False
              
            ' Compose the WHERE clause consiting of:
            ' 1. Static clause defined at design time.
            ' 2. User selected filter criteria.
            ' 3. User selected search criteria.
            Dim appRelativeVirtualPath As String = CType(HttpContext.Current.Session("AppRelativeVirtualPath"), String)

            
            ' Adds clauses if values are selected in Filter controls which are configured in the page.
          
       
          
            Return wc
        End Function
          
          
        'Formats the resultItem and adds it to the list of suggestions.
        Public Overridable Function FormatSuggestions(ByVal prefixText As String, ByVal resultItem As String, _
                                                 ByVal columnLength As Integer, ByVal AutoTypeAheadDisplayFoundText As String, _
                                                 ByVal autoTypeAheadSearch As String, ByVal AutoTypeAheadWordSeparators As String, _
                                                 ByVal resultList As ArrayList) As Boolean
            Dim index As Integer = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture))
            Dim itemToAdd As String = ""
            Dim isFound As Boolean = False
            Dim isAdded As Boolean = False
            ' Get the index where prfixt is at the beginning of resultItem. If not found then, index of word which begins with prefixText.
            If InvariantLCase(autoTypeAheadSearch).equals("wordsstartingwithsearchstring") and not index = 0 Then
                ' Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                If regex1.IsMatch(resultItem) Then
                    index = regex1.Match(resultItem).Index
                    isFound = True
                End If
                ' If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                If not resultItem(index).ToString() = " " Then
                    ' Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    Dim regex As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    If regex.IsMatch(resultItem) Then
                        index = regex.Match(resultItem).Index
                        isFound = True
                    End If
                 End If
            End If
            ' If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            ' beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            If index = 0 Or isFound Or InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") then
                If InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atbeginningofmatchedstring") Then
                    ' Expression to find beginning of the word which contains prefixText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    '  Find the beginning of the word which contains prefexText
                    If (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") AndAlso regex1.IsMatch(resultItem)) Then
                        index = regex1.Match(resultItem).Index
                        isFound = True
                    End If
                    ' Display string from the index till end of the string if sub string from index till end is less than columnLength value.
                    If Len(resultItem) - index <= columnLength Then
                        If index = 0 Then 
                            itemToAdd = resultItem 
                        Else
                            itemToAdd = "..." & resultItem.Substring(index, Len(resultItem) - index) 
                        End If
                    Else
                        If index = 0 Then
                            itemToAdd = resultItem.Substring(index, (columnLength - 3)) & "..."
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index , columnLength - 6) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("inmiddleofmatchedstring") Then
                    Dim subStringBeginIndex As Integer = CType(columnLength/2, Integer)
                    If Len(resultItem) <= columnLength Then
                        itemToAdd = resultItem
                    Else
                        ' Sanity check at end of the string
                        If index + Len(prefixText) = columnLength Then
                            itemToAdd =  "..." & resultItem.Substring(index-columnLength,index)
                        ElseIf Len(resultItem) - index < subStringBeginIndex Then 
                            ' Display string from the end till columnLength value if, index is closer to the end of the string.
                            itemToAdd =  "..." & resultItem.Substring(Len(resultItem)-columnLength,Len(resultItem))
                        ElseIf index <= subStringBeginIndex Then 
                            ' Sanity chet at beginning of the string
                            itemToAdd =  resultItem.Substring(0, columnLength) & "..."
                        Else
                            ' Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd =  "..." & resultItem.Substring(index - subStringBeginIndex, columnLength) & "..." 
                        End If
                    End If
                ElseIf InvariantLCase(AutoTypeAheadDisplayFoundText).equals("atendofmatchedstring") Then
                     ' Expression to find ending of the word which contains prefexText
                    Dim regex1 As System.Text.RegularExpressions.Regex = new System.Text.RegularExpressions.Regex("\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                    ' Find the ending of the word which contains prefexText
                    If regex1.IsMatch(resultItem, index + 1) Then
                        index = regex1.Match(resultItem, index + 1).Index
                    Else
                        ' If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length
                    End If
                    If index > Len(resultItem) Then
                        index = Len(resultItem)
                    End If
                    ' If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    If  index <= columnLength Then
                        if index = Len(resultItem) then   'Make decision to append "..."
                            itemToAdd = resultItem.Substring(0,index)
                        Else
                            itemToAdd = resultItem.Substring(0,index) & "..."
                        End If
                    Else
                        If index = Len(resultItem) Then
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 3), (columnLength - 3))
                        Else
                            'Truncate the string to show only columnLength - 6 characters as begining and trailing "..." has to be appended.
                            itemToAdd = "..." & resultItem.Substring(index - (columnLength - 6), columnLength - 6) & "..." 
                        End If
                    End If
                End If
                
                ' Remove newline character from itemToAdd
                Dim prefixTextIndex As Integer = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase)
                ' If itemToAdd contains any newline after the search text then show text only till newline
                Dim regex2 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", System.Text.RegularExpressions.RegexOptions.IgnoreCase)
                Dim newLineIndexAfterPrefix As Integer = -1
                If regex2.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexAfterPrefix > -1) Then
                    If itemToAdd.EndsWith("...") Then
                        itemToAdd = (itemToAdd.Substring(0, newLineIndexAfterPrefix) + "...")
                    Else
                        itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix)
                    End If
                End If
                ' If itemToAdd contains any newline before search text then show text which comes after newline
                Dim regex3 As System.Text.RegularExpressions.Regex = New System.Text.RegularExpressions.Regex("(" & vbCrLf & "|" & vbLf & ")", (System.Text.RegularExpressions.RegexOptions.IgnoreCase Or System.Text.RegularExpressions.RegexOptions.RightToLeft))
                Dim newLineIndexBeforePrefix As Integer = -1
                If regex3.IsMatch(itemToAdd, prefixTextIndex) Then
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index
                End If
                If (newLineIndexBeforePrefix > -1) Then
                    If itemToAdd.StartsWith("...") Then
                        itemToAdd = ("..." + itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length)))
                    Else
                        itemToAdd = itemToAdd.Substring((newLineIndexBeforePrefix + regex3.Match(itemToAdd, prefixTextIndex).Length))
                    End If
                End If

                If Not itemToAdd is nothing AndAlso Not resultList.Contains(itemToAdd) Then
                    resultList.Add(itemToAdd)
                    isAdded = true
                End If
            End If
            Return isAdded
        End Function
        
    

        ' To customize, override this method in RoleRecordControl.
        Public Overridable Sub Validate() 
            ' Add custom validation for any control within this panel.
            ' Example.  If you have a State ASP:Textbox control
            ' If Me.State.Text <> "CA" Then
            '    Throw New Exception("State must be CA (California).")
            ' End If

            ' The Validate method is common across all controls within
            ' this panel so you can validate multiple fields, but report
            ' one error message.
            
                
        End Sub

        Public Overridable Sub Delete()
        
            If Me.IsNewRecord() Then
                Return
            End If

            Dim pkValue As KeyValue = KeyValue.XmlToKey(Me.RecordUniqueId)
          RoleTable.DeleteRecord(pkValue)
          
        End Sub

        Protected Overridable Sub Control_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.PreRender
            ' PreRender event is raised just before page is being displayed.
            Try
                DbUtils.StartTransaction()
                Me.RegisterPostback()

                If Not Me.Page.ErrorOnPage AndAlso (Me.Page.IsPageRefresh OrElse Me.DataChanged OrElse Me.ResetData) Then
                  
                
                    ' Re-load the data and update the web page if necessary.
                    ' This is typically done during a postback (filter, search button, sort, pagination button).
                    ' In each of the other click handlers, simply set DataChanged to True to reload the data.
                    Me.LoadData()
                    Me.DataBind()			
                End If
                                
                						
            Catch ex As Exception
                Utils.MiscUtils.RegisterJScriptAlert(Me, "BUTTON_CLICK_MESSAGE", ex.Message)
            Finally
                DbUtils.EndTransaction()
            End Try
        End Sub
        
            
        Protected Overrides Sub SaveControlsToSession()
            MyBase.SaveControlsToSession()
        
    
            'Save pagination state to session.
          
        End Sub
        
        
    
        Protected Overrides Sub ClearControlsFromSession()
            MyBase.ClearControlsFromSession()

        

            ' Clear pagination state from session.
        
        End Sub

        Protected Overrides Sub LoadViewState(ByVal savedState As Object)
            MyBase.LoadViewState(savedState)
            Dim isNewRecord As String = CType(ViewState("IsNewRecord"), String)
            If Not isNewRecord Is Nothing AndAlso isNewRecord.Trim <> "" Then
                Me.IsNewRecord = Boolean.Parse(isNewRecord)
            End If
            
            Dim myCheckSum As String = CType(ViewState("CheckSum"), String)
            If Not myCheckSum Is Nothing AndAlso myCheckSum.Trim <> "" Then
                Me.CheckSum = myCheckSum
            End If
            
    
            ' Load view state for pagination control.
                 
        End Sub

        Protected Overrides Function SaveViewState() As Object
            ViewState("IsNewRecord") = Me.IsNewRecord.ToString()
            ViewState("CheckSum") = Me.CheckSum
            
    
            ' Load view state for pagination control.
                  
            Return MyBase.SaveViewState()
        End Function
        
        
        ' Generate the event handling functions for pagination events.
            
      
        ' Generate the event handling functions for filter and search events.
            

        Public Overridable Function CreateWhereClause_GeneralRoleIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the Role table.
            ' Examples:
            ' wc.iAND(RoleTable.Role, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(RoleTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                

        Public Overridable Function CreateWhereClause_RoleTypeIDDropDownList() As WhereClause
            ' By default, we simply return a new WhereClause.
            ' Add additional where clauses to restrict the items shown in the dropdown list.
            						
            ' This WhereClause is for the Tree table.
            ' Examples:
            ' wc.iAND(TreeTable.ItemName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ")
            ' wc.iAND(TreeTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1")
            
            Dim wc As WhereClause = New WhereClause()
            Return wc
            				
        End Function
        
                
        ' Fill the GeneralRoleID list.
        Protected Overridable Sub PopulateGeneralRoleIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.GeneralRoleID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.GeneralRoleID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_GeneralRoleIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_GeneralRoleIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(RoleTable.Role, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As RoleRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = RoleTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As RoleRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.RoleIDSpecified Then
                            cvalue = itemValue.RoleID.ToString() 
                            
                        If counter < maxItems AndAlso Me.GeneralRoleID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = RoleTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RoleTable.GeneralRoleID)
                          If _isExpandableNonCompositeForeignKey AndAlso RoleTable.GeneralRoleID.IsApplyDisplayAs Then
                          fvalue = RoleTable.GetDFKA(itemValue, RoleTable.GeneralRoleID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(RoleTable.Role)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.GeneralRoleID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.GeneralRoleID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.GeneralRoleID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.GeneralRoleID, selectedValue)Then

                ' construct a whereclause to query a record with Role.RoleID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(RoleTable.RoleID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As RoleRecord = RoleTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As RoleRecord = DirectCast(rc(0), RoleRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.RoleIDSpecified Then
                            cvalue = itemValue.RoleID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = RoleTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RoleTable.GeneralRoleID)
                          If _isExpandableNonCompositeForeignKey AndAlso RoleTable.GeneralRoleID.IsApplyDisplayAs Then
                          fvalue = RoleTable.GetDFKA(itemValue, RoleTable.GeneralRoleID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(RoleTable.Role)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.GeneralRoleID.Items.Add(newItem)
                      SetSelectedValue(Me.GeneralRoleID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        ' Fill the RoleTypeID list.
        Protected Overridable Sub PopulateRoleTypeIDDropDownList( _
                ByVal selectedValue As String, _
                ByVal maxItems As Integer)
            		  					                
            Me.RoleTypeID.Items.Clear()
            
                    
            ' 1. Setup the static list items        
            
            ' Add the Please Select item.
            Me.RoleTypeID.Items.Insert(0, new ListItem(Me.Page.GetResourceValue("Txt:PleaseSelect", "FASTPORT"), "--PLEASE_SELECT--"))
                            		  			
            ' 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_RoleTypeIDDropDownList function.
            ' It is better to customize the where clause there.
            
            Dim wc As WhereClause = CreateWhereClause_RoleTypeIDDropDownList()
            ' Create the ORDER BY clause to sort based on the displayed value.			
                

            Dim orderBy As OrderBy = New OrderBy(false, false)			
                          orderBy.Add(TreeTable.ItemName, OrderByItem.OrderDir.Asc)

                      Dim variables As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      
            ' 3. Read a total of maxItems from the database and insert them		
            Dim itemValues() As TreeRecord = Nothing
            Dim evaluator As New FormulaEvaluator                
            If wc.RunQuery
                Dim counter As Integer = 0
                Dim pageNum As Integer = 0
                Dim listDuplicates As New ArrayList()

                Do
                    itemValues = TreeTable.GetRecords(wc, orderBy, pageNum, maxItems)
                    For each itemValue As TreeRecord In itemValues
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.TreeIDSpecified Then
                            cvalue = itemValue.TreeID.ToString() 
                            
                        If counter < maxItems AndAlso Me.RoleTypeID.Items.FindByValue(cvalue) Is Nothing Then
                      
                          Dim _isExpandableNonCompositeForeignKey As Boolean = RoleTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RoleTable.RoleTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso RoleTable.RoleTypeID.IsApplyDisplayAs Then
                          fvalue = RoleTable.GetDFKA(itemValue, RoleTable.RoleTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(TreeTable.ItemName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue

                      If (IsNothing(fvalue)) Then
                         fvalue = ""
                      End If

                      fvalue = fvalue.Trim()

                      If ( fvalue.Length > 50 ) Then
                          fvalue = fvalue.Substring(0, 50) & "..."
                      End If

                      Dim dupItem As ListItem = Me.RoleTypeID.Items.FindByText(fvalue)
								
                      If Not IsNothing(dupItem) Then
                          listDuplicates.Add(fvalue)
                          dupItem.Text = fvalue & " (ID " & dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) & ")"
                      End If

                      Dim newItem As ListItem = New ListItem(fvalue, cvalue)
                      Me.RoleTypeID.Items.Add(newItem)

                      If listDuplicates.Contains(fvalue) Then
                          newItem.Text = fvalue & " (ID " & cvalue.Substring(0, Math.Min(cvalue.Length,38)) & ")"
                      End If

                                counter += 1			  
                            End If
                        End If
                    Next
                    pageNum += 1
                Loop While (itemValues.Length = maxItems AndAlso counter < maxItems)
            End If
                            
                    
            ' 4. Set the selected value (insert if not already present).
              
            If Not selectedValue Is Nothing AndAlso _
                selectedValue.Trim <> "" AndAlso _
                Not SetSelectedValue(Me.RoleTypeID, selectedValue) AndAlso _
                Not SetSelectedDisplayText(Me.RoleTypeID, selectedValue)Then

                ' construct a whereclause to query a record with Tree.TreeID = selectedValue
                Dim filter2 As CompoundFilter = New CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, Nothing)
                Dim whereClause2 As WhereClause = New WhereClause()
                filter2.AddFilter(New BaseClasses.Data.ColumnValueFilter(TreeTable.TreeID, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, False))
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator)

                Try
                    ' Execute the query
                    Dim rc() As TreeRecord = TreeTable.GetRecords(whereClause2, New OrderBy(False, False), 0, 1)
                      Dim vars As System.Collections.Generic.IDictionary(Of String, Object) = New System.Collections.Generic.Dictionary(Of String, Object)
                      ' if find a record, add it to the dropdown and set it as selected item
                      If rc IsNot Nothing AndAlso rc.Length = 1 Then
                      Dim itemValue As TreeRecord = DirectCast(rc(0), TreeRecord)
                        ' Create the item and add to the list.
                        Dim cvalue As String = Nothing
                        Dim fvalue As String = Nothing
                        If itemValue.TreeIDSpecified Then
                            cvalue = itemValue.TreeID.ToString() 
                          Dim _isExpandableNonCompositeForeignKey As Boolean = RoleTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RoleTable.RoleTypeID)
                          If _isExpandableNonCompositeForeignKey AndAlso RoleTable.RoleTypeID.IsApplyDisplayAs Then
                          fvalue = RoleTable.GetDFKA(itemValue, RoleTable.RoleTypeID)
                          End If
                          If (Not _isExpandableNonCompositeForeignKey) Or (String.IsNullOrEmpty(fvalue)) Then
                          fvalue = itemValue.Format(TreeTable.ItemName)
                          End If
                        
                      If fvalue Is Nothing OrElse fvalue.Trim() = "" Then fvalue = cvalue
                      Dim newItem As New ListItem(fvalue, cvalue)
                      Me.RoleTypeID.Items.Add(newItem)
                      SetSelectedValue(Me.RoleTypeID, selectedValue)
                            End If
                        End If
                Catch
                End Try

            End If					
                        
                
        End Sub
                
        Protected Overridable Sub GeneralRoleID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(GeneralRoleID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(GeneralRoleID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.GeneralRoleID.Items.Add(New ListItem(displayText, val))
                Me.GeneralRoleID.SelectedIndex = Me.GeneralRoleID.Items.Count - 1
                Me.Page.Session.Remove(GeneralRoleID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(GeneralRoleID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub RoleTypeID_SelectedIndexChanged(ByVal sender As Object, ByVal args As EventArgs)

            ' for the value inserted by quick add button or large list selector, 
            ' the value is necessary to be inserted by this event during postback 
            Dim val As String = CType(Me.Page.Session()(RoleTypeID.ClientID & "_SelectedValue"), String)
            Dim displayText As String = CType(Me.Page.Session()(RoleTypeID.ClientID & "_SelectedDisplayText"), String)
            If displayText <> "" AndAlso val <> "" Then
                Me.RoleTypeID.Items.Add(New ListItem(displayText, val))
                Me.RoleTypeID.SelectedIndex = Me.RoleTypeID.Items.Count - 1
                Me.Page.Session.Remove(RoleTypeID.ClientID & "_SelectedValue")
                Me.Page.Session.Remove(RoleTypeID.ClientID & "_SelectedDisplayText")
            End If

          									
                
                
        End Sub
            
        Protected Overridable Sub Role_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub RoleDescription_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
        Protected Overridable Sub RoleRank_TextChanged(ByVal sender As Object, ByVal args As EventArgs)                
                    
              End Sub
            
   
        Private _PreviousUIData As New Hashtable
        Public Overridable Property PreviousUIData() As Hashtable
            Get
                Return _PreviousUIData
            End Get
            Set(ByVal value As Hashtable)
                _PreviousUIData = value
            End Set
        End Property   
   
        Private _IsNewRecord As Boolean = True
        Public Overridable Property IsNewRecord() As Boolean
            Get
                Return Me._IsNewRecord
            End Get
            Set(ByVal value As Boolean)
                Me._IsNewRecord = value
            End Set
        End Property

        Private _DataChanged As Boolean = False
        Public Overridable Property DataChanged() As Boolean
            Get
                Return Me._DataChanged
            End Get
            Set(ByVal Value As Boolean)
                Me._DataChanged = Value
            End Set
        End Property

        Private _ResetData As Boolean = False
        Public Overridable Property ResetData() As Boolean
            Get
                Return Me._ResetData
            End Get
            Set(ByVal Value As Boolean)
                Me._ResetData = Value
            End Set
        End Property
        
        Public Property RecordUniqueId() As String
            Get
                Return CType(Me.ViewState("BaseRoleRecordControl_Rec"), String)
            End Get
            Set(ByVal value As String)
                Me.ViewState("BaseRoleRecordControl_Rec") = value
            End Set
        End Property
        
        Private _DataSource As RoleRecord
        Public Property DataSource() As RoleRecord     
            Get
                Return Me._DataSource
            End Get
            
            Set(ByVal value As RoleRecord)
            
                Me._DataSource = value
            End Set
        End Property

        

        Private _checkSum As String
        Public Overridable Property CheckSum() As String
            Get
                Return Me._checkSum
            End Get
            Set(ByVal value As String)
                Me._checkSum = value
            End Set
        End Property
        
        Private _TotalPages As Integer
        Public Property TotalPages() As Integer
            Get
                Return Me._TotalPages
            End Get
            Set(ByVal value As Integer)
                Me._TotalPages = value
            End Set
        End Property
        
        Private _PageIndex As Integer
        Public Property PageIndex() As Integer
            Get
                ' Return the PageIndex
                Return Me._PageIndex
            End Get
            Set(ByVal value As Integer)
                Me._PageIndex = value
            End Set
        End Property
    
        Private _PageSize As Integer
        Public Property PageSize() As Integer
            Get
                Return Me._PageSize
            End Get
            Set(ByVal value As Integer)
                Me._PageSize = value
            End Set
        End Property
    
        Private _TotalRecords As Integer
        Public Property TotalRecords() As Integer
            Get
                Return Me._TotalRecords
            End Get
            Set(ByVal value As Integer)
                If Me.PageSize > 0 Then
                    Me.TotalPages = CInt(Math.Ceiling(value / Me.PageSize))
                End If

                Me._TotalRecords = value
            End Set
        End Property
        
        Private _DisplayLastPage As Boolean
        Public Property DisplayLastPage() As Boolean
            Get
                Return Me._DisplayLastPage
            End Get
            Set(ByVal value As Boolean)
                Me._DisplayLastPage = value
            End Set
        End Property
        
        

#Region "Helper Properties"
        
        Public ReadOnly Property GeneralRoleID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "GeneralRoleID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property GeneralRoleIDAddRecordLink() As System.Web.UI.WebControls.ImageButton
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "GeneralRoleIDAddRecordLink"), System.Web.UI.WebControls.ImageButton)
            End Get
        End Property
        
        Public ReadOnly Property GeneralRoleIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "GeneralRoleIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property Role() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "Role"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property RoleDescription() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleDescription"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property RoleDescriptionLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleDescriptionLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RoleLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RoleRank() As System.Web.UI.WebControls.TextBox
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleRank"), System.Web.UI.WebControls.TextBox)
            End Get
        End Property
            
        Public ReadOnly Property RoleRankLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleRankLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RoleTitle() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleTitle"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
        Public ReadOnly Property RoleTypeID() As System.Web.UI.WebControls.DropDownList
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleTypeID"), System.Web.UI.WebControls.DropDownList)
            End Get
        End Property
            
        Public ReadOnly Property RoleTypeIDLabel() As System.Web.UI.WebControls.Literal
            Get
                Return CType(BaseClasses.Utils.MiscUtils.FindControlRecursively(Me, "RoleTypeIDLabel"), System.Web.UI.WebControls.Literal)
            End Get
        End Property
        
#End Region

#Region "Helper Functions"

        Public Overrides Overloads Function ModifyRedirectUrl(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            Return Me.Page.EvaluateExpressions(url, arg, bEncrypt, Me)
        End Function

        Public Overrides Overloads Function EvaluateExpressions(ByVal url As String, ByVal arg As String, ByVal bEncrypt As Boolean) As String
            
            Dim rec As RoleRecord = Nothing
             
        
            Try
                rec = Me.GetRecord()
            Catch ex As Exception
                ' Do nothing
            End Try

            If rec Is Nothing AndAlso url.IndexOf("{") >= 0 Then
                ' Localization.
                
            Throw New Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "FASTPORT"))
                    
            End If
            Return EvaluateExpressions(url, arg, rec, bEncrypt)
        End Function

         
        Public Overridable Function GetRecord() As RoleRecord
            If Not Me.DataSource Is Nothing Then
                Return Me.DataSource
            End If
            
            If Not Me.RecordUniqueId Is Nothing Then
                
                Return RoleTable.GetRecord(Me.RecordUniqueId, True)
                
            End If
            
            ' Localization.
            
            Throw New Exception(Page.GetResourceValue("Err:RetrieveRec", "FASTPORT"))
                
        End Function

        Public Shadows ReadOnly Property Page() As BaseApplicationPage
            Get
                Return DirectCast(MyBase.Page, BaseApplicationPage)
            End Get
        End Property

#End Region

End Class

  

#End Region
    
  
End Namespace

  